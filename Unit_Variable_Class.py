from numpy import *

class Block_23ATM04:
	def __init__(self):
		self.ID = 1
		self.Name = "23ATM04"
		self.Model = "BL_F2"
		self.Notes = "Air Intake"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23ATM05:
	def __init__(self):
		self.ID = 2
		self.Name = "23ATM05"
		self.Model = "BL_P6"
		self.Notes = "Vent with Rev. Air Flow"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "Atmos. Sys."

class Block_23ATMIN01:
	def __init__(self):
		self.ID = 3
		self.Name = "23ATMIN01"
		self.Model = "BL_F3"
		self.Notes = "Air Intake"

		# General Parameters
		self._TYPE_Value = "0"
		self._TYPE_Notes = "0:T constant, 1:RV constant"

		# General Parameters
		self._NXVAR_Value = "0"
		self._NXVAR_Notes = "Number of Composition Change Params(<=5)"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Feed Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0.  , 0.21, 0.  , 0.79, 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,
       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,
       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ])
		# Primary Parameters
		self.T_Value = "30"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.P_Value = "110"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.phase_Value = "0"
		self.phase_Notes = "Phase(0:Stream Definition, 1:L, 2:V)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23BLBR12:
	def __init__(self):
		self.ID = 4
		self.Name = "23BLBR12"
		self.Model = "BL_F1"
		self.Notes = "Constant Pressure Feed"

		# General Parameters
		self._TYPE_Value = "0"
		self._TYPE_Notes = "0:T constant, 1:RV constant"

		# General Parameters
		self._NXVAR_Value = "0"
		self._NXVAR_Notes = "Number of Composition Change Params(<=5)"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Feed Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])
		# Primary Parameters
		self.T_Value = "40"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.P_Value = "1900"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.phase_Value = "0"
		self.phase_Notes = "Phase(0:Stream Definition, 1:L, 2:V)"

		# Primary Parameters
		self.s1_Value = "5"
		self.s1_Notes = "System No."

class Block_23BLCATAT:
	def __init__(self):
		self.ID = 5
		self.Name = "23BLCATAT"
		self.Model = "BL_F1"
		self.Notes = "Constant Pressure Feed"

		# General Parameters
		self._TYPE_Value = "0"
		self._TYPE_Notes = "0:T constant, 1:RV constant"

		# General Parameters
		self._NXVAR_Value = "0"
		self._NXVAR_Notes = "Number of Composition Change Params(<=5)"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Feed Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.T_Value = "32"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.P_Value = "200"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.phase_Value = "0"
		self.phase_Notes = "Phase(0:Stream Definition, 1:L, 2:V)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23BLCATOF:
	def __init__(self):
		self.ID = 6
		self.Name = "23BLCATOF"
		self.Model = "POT"
		self.Notes = "Pot"

		# Primary Parameters
		self.AD_Value = "1"
		self.AD_Notes = "Vessel Cross Section Area[m2]"

		# Primary Parameters
		self.Fwc_Value = "540"
		self.Fwc_Notes = "Design Outflow[kg/h]"

		# Primary Parameters
		self.Zlinit_Value = "1.4"
		self.Zlinit_Notes = "Initial Liquid Holdup[kmol]"

		# Primary Parameters
		self.xinit_Value = "(31)"
		self.xinit_Notes = "Initial Liquid Composition[mol/mol]"

		# Primary Parameters List Value
		self.xinit_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])
		# Primary Parameters
		self.Tinit_Value = "30"
		self.Tinit_Notes = "Initial Temperature[C]"

		# Primary Parameters
		self.Pinit_Value = "200"
		self.Pinit_Notes = "Initial Pressure[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23BLCATTK:
	def __init__(self):
		self.ID = 7
		self.Name = "23BLCATTK"
		self.Model = "POT"
		self.Notes = "Pot"

		# Primary Parameters
		self.AD_Value = "1"
		self.AD_Notes = "Vessel Cross Section Area[m2]"

		# Primary Parameters
		self.Fwc_Value = "840"
		self.Fwc_Notes = "Design Outflow[kg/h]"

		# Primary Parameters
		self.Zlinit_Value = "0.369"
		self.Zlinit_Notes = "Initial Liquid Holdup[kmol]"

		# Primary Parameters
		self.xinit_Value = "(31)"
		self.xinit_Notes = "Initial Liquid Composition[mol/mol]"

		# Primary Parameters List Value
		self.xinit_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Tinit_Value = "30"
		self.Tinit_Notes = "Initial Temperature[C]"

		# Primary Parameters
		self.Pinit_Value = "200"
		self.Pinit_Notes = "Initial Pressure[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23BLCO01:
	def __init__(self):
		self.ID = 8
		self.Name = "23BLCO01"
		self.Model = "BL_F1"
		self.Notes = "Constant Pressure Feed"

		# General Parameters
		self._TYPE_Value = "0"
		self._TYPE_Notes = "0:T constant, 1:RV constant"

		# General Parameters
		self._NXVAR_Value = "0"
		self._NXVAR_Notes = "Number of Composition Change Params(<=5)"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Feed Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.T_Value = "20"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.P_Value = "9907.98"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.phase_Value = "0"
		self.phase_Notes = "Phase(0:Stream Definition, 1:L, 2:V)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23BLCO02:
	def __init__(self):
		self.ID = 9
		self.Name = "23BLCO02"
		self.Model = "BL_F1"
		self.Notes = "Constant Pressure Feed"

		# General Parameters
		self._TYPE_Value = "0"
		self._TYPE_Notes = "0:T constant, 1:RV constant"

		# General Parameters
		self._NXVAR_Value = "0"
		self._NXVAR_Notes = "Number of Composition Change Params(<=5)"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Feed Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.T_Value = "20"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.P_Value = "9907.98"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.phase_Value = "0"
		self.phase_Notes = "Phase(0:Stream Definition, 1:L, 2:V)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23BLCO03:
	def __init__(self):
		self.ID = 10
		self.Name = "23BLCO03"
		self.Model = "BL_F1"
		self.Notes = "Constant Pressure Feed"

		# General Parameters
		self._TYPE_Value = "0"
		self._TYPE_Notes = "0:T constant, 1:RV constant"

		# General Parameters
		self._NXVAR_Value = "0"
		self._NXVAR_Notes = "Number of Composition Change Params(<=5)"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Feed Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.T_Value = "20"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.P_Value = "9907.98"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.phase_Value = "0"
		self.phase_Notes = "Phase(0:Stream Definition, 1:L, 2:V)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23BLCW:
	def __init__(self):
		self.ID = 11
		self.Name = "23BLCW"
		self.Model = "BL_F1"
		self.Notes = "Constant Pressure Feed"

		# General Parameters
		self._TYPE_Value = "0"
		self._TYPE_Notes = "0:T constant, 1:RV constant"

		# General Parameters
		self._NXVAR_Value = "0"
		self._NXVAR_Notes = "Number of Composition Change Params(<=5)"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Feed Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.T_Value = "32"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.P_Value = "493.591"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.phase_Value = "0"
		self.phase_Notes = "Phase(0:Stream Definition, 1:L, 2:V)"

		# Primary Parameters
		self.s1_Value = "2"
		self.s1_Notes = "System No."

class Block_23BLCWR:
	def __init__(self):
		self.ID = 12
		self.Name = "23BLCWR"
		self.Model = "BL_P1"
		self.Notes = "Constant Pressure Product"

		# Primary Parameters
		self.P_Value = "346.491"
		self.P_Notes = "Pressure[kPa]"

class Block_23BLDMW:
	def __init__(self):
		self.ID = 13
		self.Name = "23BLDMW"
		self.Model = "BL_F1"
		self.Notes = "Constant Pressure Feed"

		# General Parameters
		self._TYPE_Value = "0"
		self._TYPE_Notes = "0:T constant, 1:RV constant"

		# General Parameters
		self._NXVAR_Value = "0"
		self._NXVAR_Notes = "Number of Composition Change Params(<=5)"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Feed Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.T_Value = "32"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.P_Value = "787.79"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.phase_Value = "0"
		self.phase_Notes = "Phase(0:Stream Definition, 1:L, 2:V)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23BLDUM01:
	def __init__(self):
		self.ID = 14
		self.Name = "23BLDUM01"
		self.Model = "BL_F1"
		self.Notes = "Constant Pressure Feed"

		# General Parameters
		self._TYPE_Value = "0"
		self._TYPE_Notes = "0:T constant, 1:RV constant"

		# General Parameters
		self._NXVAR_Value = "0"
		self._NXVAR_Notes = "Number of Composition Change Params(<=5)"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Feed Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.T_Value = "32"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.P_Value = "101.325"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.phase_Value = "0"
		self.phase_Notes = "Phase(0:Stream Definition, 1:L, 2:V)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23BLDUM02:
	def __init__(self):
		self.ID = 15
		self.Name = "23BLDUM02"
		self.Model = "BL_P1"
		self.Notes = "Constant Pressure Product"

		# Primary Parameters
		self.P_Value = "600"
		self.P_Notes = "Pressure[kPa]"

class Block_23BLDUM03:
	def __init__(self):
		self.ID = 16
		self.Name = "23BLDUM03"
		self.Model = "BL_F1"
		self.Notes = "Constant Pressure Feed"

		# General Parameters
		self._TYPE_Value = "0"
		self._TYPE_Notes = "0:T constant, 1:RV constant"

		# General Parameters
		self._NXVAR_Value = "0"
		self._NXVAR_Notes = "Number of Composition Change Params(<=5)"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Feed Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.T_Value = "32"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.P_Value = "101.325"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.phase_Value = "0"
		self.phase_Notes = "Phase(0:Stream Definition, 1:L, 2:V)"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_23BLDUM04:
	def __init__(self):
		self.ID = 17
		self.Name = "23BLDUM04"
		self.Model = "BL_P1"
		self.Notes = "Constant Pressure Product"

		# Primary Parameters
		self.P_Value = "600"
		self.P_Notes = "Pressure[kPa]"

class Block_23BLDUM05:
	def __init__(self):
		self.ID = 18
		self.Name = "23BLDUM05"
		self.Model = "BL_F1"
		self.Notes = "Constant Pressure Feed"

		# General Parameters
		self._TYPE_Value = "0"
		self._TYPE_Notes = "0:T constant, 1:RV constant"

		# General Parameters
		self._NXVAR_Value = "0"
		self._NXVAR_Notes = "Number of Composition Change Params(<=5)"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Feed Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.T_Value = "32"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.P_Value = "101.325"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.phase_Value = "0"
		self.phase_Notes = "Phase(0:Stream Definition, 1:L, 2:V)"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_23BLDUM06:
	def __init__(self):
		self.ID = 19
		self.Name = "23BLDUM06"
		self.Model = "BL_P1"
		self.Notes = "Constant Pressure Product"

		# Primary Parameters
		self.P_Value = "600"
		self.P_Notes = "Pressure[kPa]"

class Block_23BLDUM07:
	def __init__(self):
		self.ID = 20
		self.Name = "23BLDUM07"
		self.Model = "BL_F1"
		self.Notes = "Constant Pressure Feed"

		# General Parameters
		self._TYPE_Value = "0"
		self._TYPE_Notes = "0:T constant, 1:RV constant"

		# General Parameters
		self._NXVAR_Value = "0"
		self._NXVAR_Notes = "Number of Composition Change Params(<=5)"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Feed Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.T_Value = "32"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.P_Value = "101.325"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.phase_Value = "0"
		self.phase_Notes = "Phase(0:Stream Definition, 1:L, 2:V)"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_23BLDUM08:
	def __init__(self):
		self.ID = 21
		self.Name = "23BLDUM08"
		self.Model = "BL_P1"
		self.Notes = "Constant Pressure Product"

		# Primary Parameters
		self.P_Value = "600"
		self.P_Notes = "Pressure[kPa]"

class Block_23BLDUM09:
	def __init__(self):
		self.ID = 22
		self.Name = "23BLDUM09"
		self.Model = "BL_P1"
		self.Notes = "Constant Pressure Product"

		# Primary Parameters
		self.P_Value = "101.325"
		self.P_Notes = "Pressure[kPa]"

class Block_23BLDUM10:
	def __init__(self):
		self.ID = 23
		self.Name = "23BLDUM10"
		self.Model = "BL_P1"
		self.Notes = "Constant Pressure Product"

		# Primary Parameters
		self.P_Value = "600"
		self.P_Notes = "Pressure[kPa]"

class Block_23BLDUM11:
	def __init__(self):
		self.ID = 24
		self.Name = "23BLDUM11"
		self.Model = "BL_F1"
		self.Notes = "Constant Pressure Feed"

		# General Parameters
		self._TYPE_Value = "0"
		self._TYPE_Notes = "0:T constant, 1:RV constant"

		# General Parameters
		self._NXVAR_Value = "0"
		self._NXVAR_Notes = "Number of Composition Change Params(<=5)"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Feed Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.T_Value = "32"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.P_Value = "101.325"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.phase_Value = "0"
		self.phase_Notes = "Phase(0:Stream Definition, 1:L, 2:V)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23BLDUM12:
	def __init__(self):
		self.ID = 25
		self.Name = "23BLDUM12"
		self.Model = "BL_P1"
		self.Notes = "Constant Pressure Product"

		# Primary Parameters
		self.P_Value = "600"
		self.P_Notes = "Pressure[kPa]"

class Block_23BLDUM13:
	def __init__(self):
		self.ID = 26
		self.Name = "23BLDUM13"
		self.Model = "BL_P1"
		self.Notes = "Constant Pressure Product"

		# Primary Parameters
		self.P_Value = "2700"
		self.P_Notes = "Pressure[kPa]"

class Block_23BLDUM14:
	def __init__(self):
		self.ID = 27
		self.Name = "23BLDUM14"
		self.Model = "BL_P1"
		self.Notes = "Constant Pressure Product"

		# Primary Parameters
		self.P_Value = "4500"
		self.P_Notes = "Pressure[kPa]"

class Block_23BLDUM15:
	def __init__(self):
		self.ID = 28
		self.Name = "23BLDUM15"
		self.Model = "BL_F1"
		self.Notes = "Constant Pressure Feed"

		# General Parameters
		self._TYPE_Value = "0"
		self._TYPE_Notes = "0:T constant, 1:RV constant"

		# General Parameters
		self._NXVAR_Value = "0"
		self._NXVAR_Notes = "Number of Composition Change Params(<=5)"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Feed Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.T_Value = "30"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.P_Value = "101.325"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.phase_Value = "0"
		self.phase_Notes = "Phase(0:Stream Definition, 1:L, 2:V)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23BLDUM20:
	def __init__(self):
		self.ID = 29
		self.Name = "23BLDUM20"
		self.Model = "BL_F1"
		self.Notes = "Air Intake"

		# General Parameters
		self._TYPE_Value = "0"
		self._TYPE_Notes = "0:T constant, 1:RV constant"

		# General Parameters
		self._NXVAR_Value = "0"
		self._NXVAR_Notes = "Number of Composition Change Params(<=5)"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Feed Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.T_Value = "30"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.P_Value = "120"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.phase_Value = "0"
		self.phase_Notes = "Phase(0:Stream Definition, 1:L, 2:V)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23BLDUM21:
	def __init__(self):
		self.ID = 30
		self.Name = "23BLDUM21"
		self.Model = "BL_F1"
		self.Notes = "Air Intake"

		# General Parameters
		self._TYPE_Value = "0"
		self._TYPE_Notes = "0:T constant, 1:RV constant"

		# General Parameters
		self._NXVAR_Value = "0"
		self._NXVAR_Notes = "Number of Composition Change Params(<=5)"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Feed Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.T_Value = "30"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.P_Value = "150"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.phase_Value = "0"
		self.phase_Notes = "Phase(0:Stream Definition, 1:L, 2:V)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23BLDUM21IN:
	def __init__(self):
		self.ID = 31
		self.Name = "23BLDUM21IN"
		self.Model = "BL_F4"
		self.Notes = "Constant Flow Feed"

		# General Parameters
		self._TYPE_Value = "0"
		self._TYPE_Notes = "0:T constant, 1:RV constant"

		# General Parameters
		self._NXVAR_Value = "0"
		self._NXVAR_Notes = "Number of Composition Change Params(<=5)"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Feed Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
       0.0000e+00, 0.0000e+00, 1.9000e-04, 0.0000e+00, 0.0000e+00,
       0.0000e+00, 5.9540e-02, 2.8006e-01, 0.0000e+00, 0.0000e+00,
       0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
       0.0000e+00, 1.1000e-02, 6.4921e-01, 0.0000e+00, 0.0000e+00,
       0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
       0.0000e+00])
		# Primary Parameters
		self.Fw_Value = "6233"
		self.Fw_Notes = "Feed[kg/h]"

		# Primary Parameters
		self.T_Value = "80"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.phase_Value = "0"
		self.phase_Notes = "Phase(0:Stream Definition, 1:L, 2:V)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23BLDUM21OUT:
	def __init__(self):
		self.ID = 32
		self.Name = "23BLDUM21OUT"
		self.Model = "BL_P1"
		self.Notes = "Constant Pressure Product"

		# Primary Parameters
		self.P_Value = "1768.45"
		self.P_Notes = "Pressure[kPa]"

class Block_23BLDUM29IN1:
	def __init__(self):
		self.ID = 33
		self.Name = "23BLDUM29IN1"
		self.Model = "BL_F4"
		self.Notes = "Constant Flow Feed"

		# General Parameters
		self._TYPE_Value = "0"
		self._TYPE_Notes = "0:T constant, 1:RV constant"

		# General Parameters
		self._NXVAR_Value = "0"
		self._NXVAR_Notes = "Number of Composition Change Params(<=5)"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Feed Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
       0.0000e+00, 0.0000e+00, 1.9000e-04, 0.0000e+00, 0.0000e+00,
       0.0000e+00, 5.9540e-02, 2.8006e-01, 0.0000e+00, 0.0000e+00,
       0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
       0.0000e+00, 1.1000e-02, 0.0000e+00, 6.4921e-01, 0.0000e+00,
       0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
       0.0000e+00])
		# Primary Parameters
		self.Fw_Value = "6131.91"
		self.Fw_Notes = "Feed[kg/h]"

		# Primary Parameters
		self.T_Value = "78.7708"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.phase_Value = "0"
		self.phase_Notes = "Phase(0:Stream Definition, 1:L, 2:V)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23BLDUM29IN2:
	def __init__(self):
		self.ID = 34
		self.Name = "23BLDUM29IN2"
		self.Model = "BL_F4"
		self.Notes = "Constant Flow Feed"

		# General Parameters
		self._TYPE_Value = "0"
		self._TYPE_Notes = "0:T constant, 1:RV constant"

		# General Parameters
		self._NXVAR_Value = "0"
		self._NXVAR_Notes = "Number of Composition Change Params(<=5)"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Feed Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
       0.0000e+00, 0.0000e+00, 5.6000e-04, 0.0000e+00, 0.0000e+00,
       0.0000e+00, 1.7028e-01, 8.1990e-01, 0.0000e+00, 0.0000e+00,
       0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
       0.0000e+00, 9.2600e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00,
       0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
       0.0000e+00])
		# Primary Parameters
		self.Fw_Value = "4374.92"
		self.Fw_Notes = "Feed[kg/h]"

		# Primary Parameters
		self.T_Value = "79.9997"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.phase_Value = "0"
		self.phase_Notes = "Phase(0:Stream Definition, 1:L, 2:V)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23BLDUM29OUT:
	def __init__(self):
		self.ID = 35
		self.Name = "23BLDUM29OUT"
		self.Model = "BL_P1"
		self.Notes = "Constant Pressure Product"

		# Primary Parameters
		self.P_Value = "145.13"
		self.P_Notes = "Pressure[kPa]"

class Block_23BLH2:
	def __init__(self):
		self.ID = 36
		self.Name = "23BLH2"
		self.Model = "BL_F1"
		self.Notes = "Constant Pressure Feed"

		# General Parameters
		self._TYPE_Value = "0"
		self._TYPE_Notes = "0:T constant, 1:RV constant"

		# General Parameters
		self._NXVAR_Value = "0"
		self._NXVAR_Notes = "Number of Composition Change Params(<=5)"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Feed Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.T_Value = "32"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.P_Value = "4220.11"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.phase_Value = "0"
		self.phase_Notes = "Phase(0:Stream Definition, 1:L, 2:V)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23BLHF01:
	def __init__(self):
		self.ID = 37
		self.Name = "23BLHF01"
		self.Model = "BL_P1"
		self.Notes = "Constant Pressure Product"

		# Primary Parameters
		self.P_Value = "101.325"
		self.P_Notes = "Pressure[kPa]"

class Block_23BLHX:
	def __init__(self):
		self.ID = 38
		self.Name = "23BLHX"
		self.Model = "BL_F1"
		self.Notes = "Constant Pressure Feed"

		# General Parameters
		self._TYPE_Value = "0"
		self._TYPE_Notes = "0:T constant, 1:RV constant"

		# General Parameters
		self._NXVAR_Value = "0"
		self._NXVAR_Notes = "Number of Composition Change Params(<=5)"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Feed Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.T_Value = "32"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.P_Value = "493.591"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.phase_Value = "0"
		self.phase_Notes = "Phase(0:Stream Definition, 1:L, 2:V)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23BLHXW:
	def __init__(self):
		self.ID = 39
		self.Name = "23BLHXW"
		self.Model = "BL_P1"
		self.Notes = "Constant Pressure Product"

		# Primary Parameters
		self.P_Value = "423.266"
		self.P_Notes = "Pressure[kPa]"

class Block_23BLI02:
	def __init__(self):
		self.ID = 40
		self.Name = "23BLI02"
		self.Model = "BL_F1"
		self.Notes = "Constant Pressure Feed"

		# General Parameters
		self._TYPE_Value = "0"
		self._TYPE_Notes = "0:T constant, 1:RV constant"

		# General Parameters
		self._NXVAR_Value = "0"
		self._NXVAR_Notes = "Number of Composition Change Params(<=5)"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Feed Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.T_Value = "32"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.P_Value = "200"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.phase_Value = "0"
		self.phase_Notes = "Phase(0:Stream Definition, 1:L, 2:V)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23BLI03:
	def __init__(self):
		self.ID = 41
		self.Name = "23BLI03"
		self.Model = "BL_F1"
		self.Notes = "Constant Pressure Feed"

		# General Parameters
		self._TYPE_Value = "0"
		self._TYPE_Notes = "0:T constant, 1:RV constant"

		# General Parameters
		self._NXVAR_Value = "0"
		self._NXVAR_Notes = "Number of Composition Change Params(<=5)"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Feed Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.T_Value = "32"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.P_Value = "200"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.phase_Value = "0"
		self.phase_Notes = "Phase(0:Stream Definition, 1:L, 2:V)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23BLLP01:
	def __init__(self):
		self.ID = 42
		self.Name = "23BLLP01"
		self.Model = "BL_P1"
		self.Notes = "Constant Pressure Product"

		# Primary Parameters
		self.P_Value = "101.325"
		self.P_Notes = "Pressure[kPa]"

class Block_23BLN25:
	def __init__(self):
		self.ID = 43
		self.Name = "23BLN25"
		self.Model = "BL_F1"
		self.Notes = "Constant Pressure Feed"

		# General Parameters
		self._TYPE_Value = "0"
		self._TYPE_Notes = "0:T constant, 1:RV constant"

		# General Parameters
		self._NXVAR_Value = "0"
		self._NXVAR_Notes = "Number of Composition Change Params(<=5)"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Feed Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.T_Value = "32"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.P_Value = "2552.99"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.phase_Value = "0"
		self.phase_Notes = "Phase(0:Stream Definition, 1:L, 2:V)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23BLN2IN:
	def __init__(self):
		self.ID = 44
		self.Name = "23BLN2IN"
		self.Model = "BL_F1"
		self.Notes = "Constant Pressure Feed"

		# General Parameters
		self._TYPE_Value = "0"
		self._TYPE_Notes = "0:T constant, 1:RV constant"

		# General Parameters
		self._NXVAR_Value = "0"
		self._NXVAR_Notes = "Number of Composition Change Params(<=5)"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Feed Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.T_Value = "32"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.P_Value = "15791.9"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.phase_Value = "0"
		self.phase_Notes = "Phase(0:Stream Definition, 1:L, 2:V)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23BLN50:
	def __init__(self):
		self.ID = 45
		self.Name = "23BLN50"
		self.Model = "BL_F1"
		self.Notes = "Constant Pressure Feed"

		# General Parameters
		self._TYPE_Value = "0"
		self._TYPE_Notes = "0:T constant, 1:RV constant"

		# General Parameters
		self._NXVAR_Value = "0"
		self._NXVAR_Notes = "Number of Composition Change Params(<=5)"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Feed Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.T_Value = "32"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.P_Value = "5004.65"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.phase_Value = "0"
		self.phase_Notes = "Phase(0:Stream Definition, 1:L, 2:V)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23BLNAOH:
	def __init__(self):
		self.ID = 46
		self.Name = "23BLNAOH"
		self.Model = "BL_F1"
		self.Notes = "Constant Pressure Feed"

		# General Parameters
		self._TYPE_Value = "0"
		self._TYPE_Notes = "0:T constant, 1:RV constant"

		# General Parameters
		self._NXVAR_Value = "0"
		self._NXVAR_Notes = "Number of Composition Change Params(<=5)"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Feed Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0.10112, 0.     , 0.89888, 0.     , 0.     , 0.     , 0.     ,
       0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
       0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
       0.     , 0.     , 0.     , 0.     , 0.     , 0.     , 0.     ,
       0.     , 0.     , 0.     ])
		# Primary Parameters
		self.T_Value = "32"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.P_Value = "200"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.phase_Value = "0"
		self.phase_Notes = "Phase(0:Stream Definition, 1:L, 2:V)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23BLO01:
	def __init__(self):
		self.ID = 47
		self.Name = "23BLO01"
		self.Model = "BL_P1"
		self.Notes = "Constant Pressure Product"

		# Primary Parameters
		self.P_Value = "101.325"
		self.P_Notes = "Pressure[kPa]"

class Block_23BLO02:
	def __init__(self):
		self.ID = 48
		self.Name = "23BLO02"
		self.Model = "BL_P1"
		self.Notes = "Constant Pressure Product"

		# Primary Parameters
		self.P_Value = "103.325"
		self.P_Notes = "Pressure[kPa]"

class Block_23BLO03:
	def __init__(self):
		self.ID = 49
		self.Name = "23BLO03"
		self.Model = "BL_P1"
		self.Notes = "Vent"

		# Primary Parameters
		self.P_Value = "101.325"
		self.P_Notes = "Pressure[kPa]"

class Block_23BLO04:
	def __init__(self):
		self.ID = 50
		self.Name = "23BLO04"
		self.Model = "BL_P1"
		self.Notes = "Constant Pressure Product"

		# Primary Parameters
		self.P_Value = "101.325"
		self.P_Notes = "Pressure[kPa]"

class Block_23BLPP:
	def __init__(self):
		self.ID = 51
		self.Name = "23BLPP"
		self.Model = "POT"
		self.Notes = "Pot"

		# Primary Parameters
		self.AD_Value = "0.5"
		self.AD_Notes = "Vessel Cross Section Area[m2]"

		# Primary Parameters
		self.Fwc_Value = "400"
		self.Fwc_Notes = "Design Outflow[kg/h]"

		# Primary Parameters
		self.Zlinit_Value = "1.584"
		self.Zlinit_Notes = "Initial Liquid Holdup[kmol]"

		# Primary Parameters
		self.xinit_Value = "(31)"
		self.xinit_Notes = "Initial Liquid Composition[mol/mol]"

		# Primary Parameters List Value
		self.xinit_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Tinit_Value = "30"
		self.Tinit_Notes = "Initial Temperature[C]"

		# Primary Parameters
		self.Pinit_Value = "200"
		self.Pinit_Notes = "Initial Pressure[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23BLR22:
	def __init__(self):
		self.ID = 52
		self.Name = "23BLR22"
		self.Model = "BL_F1"
		self.Notes = "Constant Pressure Feed"

		# General Parameters
		self._TYPE_Value = "0"
		self._TYPE_Notes = "0:T constant, 1:RV constant"

		# General Parameters
		self._NXVAR_Value = "0"
		self._NXVAR_Notes = "Number of Composition Change Params(<=5)"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Feed Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])
		# Primary Parameters
		self.T_Value = "40"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.P_Value = "1900"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.phase_Value = "0"
		self.phase_Notes = "Phase(0:Stream Definition, 1:L, 2:V)"

		# Primary Parameters
		self.s1_Value = "5"
		self.s1_Notes = "System No."

class Block_23BLS40:
	def __init__(self):
		self.ID = 53
		self.Name = "23BLS40"
		self.Model = "BL_F1"
		self.Notes = "Constant Pressure Feed"

		# General Parameters
		self._TYPE_Value = "0"
		self._TYPE_Notes = "0:T constant, 1:RV constant"

		# General Parameters
		self._NXVAR_Value = "0"
		self._NXVAR_Notes = "Number of Composition Change Params(<=5)"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Feed Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.T_Value = "392"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.P_Value = "4023.99"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.phase_Value = "0"
		self.phase_Notes = "Phase(0:Stream Definition, 1:L, 2:V)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23BLSO:
	def __init__(self):
		self.ID = 54
		self.Name = "23BLSO"
		self.Model = "BL_F1"
		self.Notes = "Constant Pressure Feed"

		# General Parameters
		self._TYPE_Value = "0"
		self._TYPE_Notes = "0:T constant, 1:RV constant"

		# General Parameters
		self._NXVAR_Value = "0"
		self._NXVAR_Notes = "Number of Composition Change Params(<=5)"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Feed Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])
		# Primary Parameters
		self.T_Value = "50"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.P_Value = "200"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.phase_Value = "0"
		self.phase_Notes = "Phase(0:Stream Definition, 1:L, 2:V)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23DUM01:
	def __init__(self):
		self.ID = 55
		self.Name = "23DUM01"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "500"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "5"
		self.s1_Notes = "System No."

class Block_23DUM02:
	def __init__(self):
		self.ID = 56
		self.Name = "23DUM02"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "3"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_23DUM03:
	def __init__(self):
		self.ID = 57
		self.Name = "23DUM03"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "3"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_23DUM04:
	def __init__(self):
		self.ID = 58
		self.Name = "23DUM04"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "3"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_23DUM05:
	def __init__(self):
		self.ID = 59
		self.Name = "23DUM05"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "3"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_23DUM06:
	def __init__(self):
		self.ID = 60
		self.Name = "23DUM06"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23DUM07:
	def __init__(self):
		self.ID = 61
		self.Name = "23DUM07"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "11"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23DUM08:
	def __init__(self):
		self.ID = 62
		self.Name = "23DUM08"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23DUM09:
	def __init__(self):
		self.ID = 63
		self.Name = "23DUM09"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "3"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_23DUM10:
	def __init__(self):
		self.ID = 64
		self.Name = "23DUM10"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23DUM11:
	def __init__(self):
		self.ID = 65
		self.Name = "23DUM11"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "10"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23DUM12:
	def __init__(self):
		self.ID = 66
		self.Name = "23DUM12"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "3"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_23DUM13:
	def __init__(self):
		self.ID = 67
		self.Name = "23DUM13"
		self.Model = "BL_F1"
		self.Notes = "Constant Pressure Feed"

		# General Parameters
		self._TYPE_Value = "0"
		self._TYPE_Notes = "0:T constant, 1:RV constant"

		# General Parameters
		self._NXVAR_Value = "0"
		self._NXVAR_Notes = "Number of Composition Change Params(<=5)"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Feed Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.T_Value = "30"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.P_Value = "200"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.phase_Value = "0"
		self.phase_Notes = "Phase(0:Stream Definition, 1:L, 2:V)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23DUM14:
	def __init__(self):
		self.ID = 68
		self.Name = "23DUM14"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "3"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_23DUM15:
	def __init__(self):
		self.ID = 69
		self.Name = "23DUM15"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "3"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_23DUM16:
	def __init__(self):
		self.ID = 70
		self.Name = "23DUM16"
		self.Model = "HVALVE_T"
		self.Notes = "Stabilizing Pipe"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.4"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23DUM17:
	def __init__(self):
		self.ID = 71
		self.Name = "23DUM17"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23DUM18:
	def __init__(self):
		self.ID = 72
		self.Name = "23DUM18"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23DUM19:
	def __init__(self):
		self.ID = 73
		self.Name = "23DUM19"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "11"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23DUM20:
	def __init__(self):
		self.ID = 74
		self.Name = "23DUM20"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "44"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23DUM21:
	def __init__(self):
		self.ID = 75
		self.Name = "23DUM21"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23DUM22:
	def __init__(self):
		self.ID = 76
		self.Name = "23DUM22"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23DUM23:
	def __init__(self):
		self.ID = 77
		self.Name = "23DUM23"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23DUM24:
	def __init__(self):
		self.ID = 78
		self.Name = "23DUM24"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "3"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23DUM25:
	def __init__(self):
		self.ID = 79
		self.Name = "23DUM25"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "3"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23DUM26:
	def __init__(self):
		self.ID = 80
		self.Name = "23DUM26"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "3"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_23DUM27:
	def __init__(self):
		self.ID = 81
		self.Name = "23DUM27"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "40"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23DUM28:
	def __init__(self):
		self.ID = 82
		self.Name = "23DUM28"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23DUM30:
	def __init__(self):
		self.ID = 83
		self.Name = "23DUM30"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23DUM31:
	def __init__(self):
		self.ID = 84
		self.Name = "23DUM31"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23DUM32:
	def __init__(self):
		self.ID = 85
		self.Name = "23DUM32"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23DUM33:
	def __init__(self):
		self.ID = 86
		self.Name = "23DUM33"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23DUMK2911H:
	def __init__(self):
		self.ID = 87
		self.Name = "23DUMK2911H"
		self.Model = "_HEATXA"
		self.Notes = "Simplified Heater/Cooler"

		# Primary Parameters
		self.TYPE_Value = "0"
		self.TYPE_Notes = "Specification Type(0:T,1:R,2:Q)"

		# Primary Parameters
		self.T_Value = "0"
		self.T_Notes = "Outlet Temperature Set/Calc. Value[C]"

		# Primary Parameters
		self.RV_Value = "1"
		self.RV_Notes = "Outlet Vapor Ratio Set/Calc. Value[-]"

		# Primary Parameters
		self.Q_Value = "0"
		self.Q_Notes = "Heat Load Set/Calc. Value[MJ/h]"

		# Primary Parameters
		self.Wdes_Value = "72500"
		self.Wdes_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters
		self.Ddes_Value = "1055"
		self.Ddes_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.Pddes_Value = "1"
		self.Pddes_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.tau_Value = "30"
		self.tau_Notes = "Response Delay Time[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Outlet Temperature Start Value[C]"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System 1"

class Block_23EG:
	def __init__(self):
		self.ID = 88
		self.Name = "23EG"
		self.Model = "BL_F1"
		self.Notes = "Constant Pressure Feed"

		# General Parameters
		self._TYPE_Value = "0"
		self._TYPE_Notes = "0:T constant, 1:RV constant"

		# General Parameters
		self._NXVAR_Value = "0"
		self._NXVAR_Notes = "Number of Composition Change Params(<=5)"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Feed Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])
		# Primary Parameters
		self.T_Value = "15.8"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.P_Value = "700"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.phase_Value = "0"
		self.phase_Notes = "Phase(0:Stream Definition, 1:L, 2:V)"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_23MX2391301:
	def __init__(self):
		self.ID = 89
		self.Name = "23MX2391301"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_23PB01:
	def __init__(self):
		self.ID = 90
		self.Name = "23PB01"
		self.Model = "PIPEFLOW"
		self.Notes = "Regulation Valve"

		# Primary Parameters
		self.Unit_Value = "2"
		self.Unit_Notes = "Unit 1:kmol/h 2:kg/h"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "Property System"

class Block_23PB02:
	def __init__(self):
		self.ID = 91
		self.Name = "23PB02"
		self.Model = "PIPE_STB"
		self.Notes = "Stabilizing Pipe"

		# Primary Parameters
		self.eflow_Value = "0"
		self.eflow_Notes = "Stabilizing Coef.(>=0)[kPa/(kmol/h)/s]"

		# Primary Parameters
		self.rflow_Value = "0"
		self.rflow_Notes = "Resistance Coef.(dP/dF)[kPa/(kmol/h)]"

		# Primary Parameters
		self.eheat_Value = "0"
		self.eheat_Notes = "Heat Load Coef.(0-1)"

		# Primary Parameters
		self.ecomp_Value = "0"
		self.ecomp_Notes = "Composition Filter Coef.(0-1)"

		# Primary Parameters
		self.calcEQ_Value = "1"
		self.calcEQ_Notes = "Mixed Phase Equilibrium Calc.(0:N 1:Y)"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No. of Up Stream"

		# Primary Parameters
		self.s2_Value = "4"
		self.s2_Notes = "System No. of Down Stream"

class Block_23PB03:
	def __init__(self):
		self.ID = 92
		self.Name = "23PB03"
		self.Model = "PIPE_STB"
		self.Notes = "Stabilizing Pipe"

		# Primary Parameters
		self.eflow_Value = "0"
		self.eflow_Notes = "Stabilizing Coef.(>=0)[kPa/(kmol/h)/s]"

		# Primary Parameters
		self.rflow_Value = "0"
		self.rflow_Notes = "Resistance Coef.(dP/dF)[kPa/(kmol/h)]"

		# Primary Parameters
		self.eheat_Value = "0"
		self.eheat_Notes = "Heat Load Coef.(0-1)"

		# Primary Parameters
		self.ecomp_Value = "0"
		self.ecomp_Notes = "Composition Filter Coef.(0-1)"

		# Primary Parameters
		self.calcEQ_Value = "1"
		self.calcEQ_Notes = "Mixed Phase Equilibrium Calc.(0:N 1:Y)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No. of Up Stream"

		# Primary Parameters
		self.s2_Value = "4"
		self.s2_Notes = "System No. of Down Stream"

class Block_23PB04:
	def __init__(self):
		self.ID = 93
		self.Name = "23PB04"
		self.Model = "PIPE_STB"
		self.Notes = "Stabilizing Pipe"

		# Primary Parameters
		self.eflow_Value = "0"
		self.eflow_Notes = "Stabilizing Coef.(>=0)[kPa/(kmol/h)/s]"

		# Primary Parameters
		self.rflow_Value = "0"
		self.rflow_Notes = "Resistance Coef.(dP/dF)[kPa/(kmol/h)]"

		# Primary Parameters
		self.eheat_Value = "0"
		self.eheat_Notes = "Heat Load Coef.(0-1)"

		# Primary Parameters
		self.ecomp_Value = "0"
		self.ecomp_Notes = "Composition Filter Coef.(0-1)"

		# Primary Parameters
		self.calcEQ_Value = "1"
		self.calcEQ_Notes = "Mixed Phase Equilibrium Calc.(0:N 1:Y)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No. of Up Stream"

		# Primary Parameters
		self.s2_Value = "4"
		self.s2_Notes = "System No. of Down Stream"

class Block_23PB05:
	def __init__(self):
		self.ID = 94
		self.Name = "23PB05"
		self.Model = "PIPE_STB"
		self.Notes = "Stabilizing Pipe"

		# Primary Parameters
		self.eflow_Value = "0"
		self.eflow_Notes = "Stabilizing Coef.(>=0)[kPa/(kmol/h)/s]"

		# Primary Parameters
		self.rflow_Value = "0.08"
		self.rflow_Notes = "Resistance Coef.(dP/dF)[kPa/(kmol/h)]"

		# Primary Parameters
		self.eheat_Value = "0"
		self.eheat_Notes = "Heat Load Coef.(0-1)"

		# Primary Parameters
		self.ecomp_Value = "0"
		self.ecomp_Notes = "Composition Filter Coef.(0-1)"

		# Primary Parameters
		self.calcEQ_Value = "1"
		self.calcEQ_Notes = "Mixed Phase Equilibrium Calc.(0:N 1:Y)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No. of Up Stream"

		# Primary Parameters
		self.s2_Value = "1"
		self.s2_Notes = "System No. of Down Stream"

class Block_23PP01:
	def __init__(self):
		self.ID = 95
		self.Name = "23PP01"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.0762"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP02:
	def __init__(self):
		self.ID = 96
		self.Name = "23PP02"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.0508"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP03:
	def __init__(self):
		self.ID = 97
		self.Name = "23PP03"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.0508"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP04:
	def __init__(self):
		self.ID = 98
		self.Name = "23PP04"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.2032"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "20"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP05:
	def __init__(self):
		self.ID = 99
		self.Name = "23PP05"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.2032"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "20"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.2"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_23PP06:
	def __init__(self):
		self.ID = 100
		self.Name = "23PP06"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.1016"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "2"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_23PP07:
	def __init__(self):
		self.ID = 101
		self.Name = "23PP07"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.1016"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "5"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP08:
	def __init__(self):
		self.ID = 102
		self.Name = "23PP08"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.106"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "5"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP09:
	def __init__(self):
		self.ID = 103
		self.Name = "23PP09"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.0205"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "3"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP10:
	def __init__(self):
		self.ID = 104
		self.Name = "23PP10"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.0254"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "5"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP11:
	def __init__(self):
		self.ID = 105
		self.Name = "23PP11"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.0762"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "5"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP12:
	def __init__(self):
		self.ID = 106
		self.Name = "23PP12"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.0254"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "5"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP13:
	def __init__(self):
		self.ID = 107
		self.Name = "23PP13"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.1524"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "5"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP14:
	def __init__(self):
		self.ID = 108
		self.Name = "23PP14"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.0762"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "5"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP15:
	def __init__(self):
		self.ID = 109
		self.Name = "23PP15"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.0762"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "5"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP16:
	def __init__(self):
		self.ID = 110
		self.Name = "23PP16"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.0254"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "-10"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP17:
	def __init__(self):
		self.ID = 111
		self.Name = "23PP17"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.0254"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "-5"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP18:
	def __init__(self):
		self.ID = 112
		self.Name = "23PP18"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.0254"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "-5"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP19:
	def __init__(self):
		self.ID = 113
		self.Name = "23PP19"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.0254"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "-10"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP20:
	def __init__(self):
		self.ID = 114
		self.Name = "23PP20"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.0254"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "-10"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP21:
	def __init__(self):
		self.ID = 115
		self.Name = "23PP21"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.0762"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "5"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP22:
	def __init__(self):
		self.ID = 116
		self.Name = "23PP22"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.01"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.1"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "-5"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "5"
		self.s1_Notes = "System No."

class Block_23PP23:
	def __init__(self):
		self.ID = 117
		self.Name = "23PP23"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.1"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.05"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP24:
	def __init__(self):
		self.ID = 118
		self.Name = "23PP24"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.02"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "2"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.1"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "2"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP25:
	def __init__(self):
		self.ID = 119
		self.Name = "23PP25"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.254"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP26:
	def __init__(self):
		self.ID = 120
		self.Name = "23PP26"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.0524"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP27:
	def __init__(self):
		self.ID = 121
		self.Name = "23PP27"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.3048"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP28:
	def __init__(self):
		self.ID = 122
		self.Name = "23PP28"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.0508"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.06"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP29:
	def __init__(self):
		self.ID = 123
		self.Name = "23PP29"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.01"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP30:
	def __init__(self):
		self.ID = 124
		self.Name = "23PP30"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.01"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "5"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "-4.7"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP31:
	def __init__(self):
		self.ID = 125
		self.Name = "23PP31"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.01"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP32:
	def __init__(self):
		self.ID = 126
		self.Name = "23PP32"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.01"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP33:
	def __init__(self):
		self.ID = 127
		self.Name = "23PP33"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.01"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "3"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "-5.2"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP34:
	def __init__(self):
		self.ID = 128
		self.Name = "23PP34"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.1"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "2"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP35:
	def __init__(self):
		self.ID = 129
		self.Name = "23PP35"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.1"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "2"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP36:
	def __init__(self):
		self.ID = 130
		self.Name = "23PP36"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.1"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP37:
	def __init__(self):
		self.ID = 131
		self.Name = "23PP37"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.2032"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.2"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP38:
	def __init__(self):
		self.ID = 132
		self.Name = "23PP38"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.05"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP39:
	def __init__(self):
		self.ID = 133
		self.Name = "23PP39"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.05"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "10"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP40:
	def __init__(self):
		self.ID = 134
		self.Name = "23PP40"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.4"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP41:
	def __init__(self):
		self.ID = 135
		self.Name = "23PP41"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.1016"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.25"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP42:
	def __init__(self):
		self.ID = 136
		self.Name = "23PP42"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.1"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP43:
	def __init__(self):
		self.ID = 137
		self.Name = "23PP43"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.3556"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "5"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.1"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP44:
	def __init__(self):
		self.ID = 138
		self.Name = "23PP44"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.3048"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.291"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP45:
	def __init__(self):
		self.ID = 139
		self.Name = "23PP45"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.1"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "5"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.1"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP46:
	def __init__(self):
		self.ID = 140
		self.Name = "23PP46"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.0381"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "5"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP47:
	def __init__(self):
		self.ID = 141
		self.Name = "23PP47"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.0508"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "80"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.1"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "-80"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP48:
	def __init__(self):
		self.ID = 142
		self.Name = "23PP48"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.0508"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "5"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "-35"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP49:
	def __init__(self):
		self.ID = 143
		self.Name = "23PP49"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.01"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "4.7"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "-4.7"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP50:
	def __init__(self):
		self.ID = 144
		self.Name = "23PP50"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.1524"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "5"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP51:
	def __init__(self):
		self.ID = 145
		self.Name = "23PP51"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.01"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "5"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "2"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP52:
	def __init__(self):
		self.ID = 146
		self.Name = "23PP52"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.02"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.1"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP53:
	def __init__(self):
		self.ID = 147
		self.Name = "23PP53"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.05"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "5"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.2"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP54:
	def __init__(self):
		self.ID = 148
		self.Name = "23PP54"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.2032"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "5"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.1"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP56:
	def __init__(self):
		self.ID = 149
		self.Name = "23PP56"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.1016"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "3"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "20"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP57:
	def __init__(self):
		self.ID = 150
		self.Name = "23PP57"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.02"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "5"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.1"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP58:
	def __init__(self):
		self.ID = 151
		self.Name = "23PP58"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.02"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "2"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.1"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "2"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP59:
	def __init__(self):
		self.ID = 152
		self.Name = "23PP59"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.1"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.2"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP60:
	def __init__(self):
		self.ID = 153
		self.Name = "23PP60"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.1524"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.1"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP61:
	def __init__(self):
		self.ID = 154
		self.Name = "23PP61"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.1524"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP62:
	def __init__(self):
		self.ID = 155
		self.Name = "23PP62"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.1"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "-30"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP63:
	def __init__(self):
		self.ID = 156
		self.Name = "23PP63"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.0762"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "5"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.1"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP64:
	def __init__(self):
		self.ID = 157
		self.Name = "23PP64"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.36"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP65:
	def __init__(self):
		self.ID = 158
		self.Name = "23PP65"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.02"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP66:
	def __init__(self):
		self.ID = 159
		self.Name = "23PP66"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.1"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "-100"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP67:
	def __init__(self):
		self.ID = 160
		self.Name = "23PP67"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.0524"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP68:
	def __init__(self):
		self.ID = 161
		self.Name = "23PP68"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.0524"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP69:
	def __init__(self):
		self.ID = 162
		self.Name = "23PP69"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.01905"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "5"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP70:
	def __init__(self):
		self.ID = 163
		self.Name = "23PP70"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.2032"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "5"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.1"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP71:
	def __init__(self):
		self.ID = 164
		self.Name = "23PP71"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.4"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "2"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "-10"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP72:
	def __init__(self):
		self.ID = 165
		self.Name = "23PP72"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.4"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "-10"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP73:
	def __init__(self):
		self.ID = 166
		self.Name = "23PP73"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.8"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP74:
	def __init__(self):
		self.ID = 167
		self.Name = "23PP74"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.0524"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP75:
	def __init__(self):
		self.ID = 168
		self.Name = "23PP75"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.0524"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP76:
	def __init__(self):
		self.ID = 169
		self.Name = "23PP76"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.0524"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP77:
	def __init__(self):
		self.ID = 170
		self.Name = "23PP77"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.0524"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP78:
	def __init__(self):
		self.ID = 171
		self.Name = "23PP78"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.013"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP79:
	def __init__(self):
		self.ID = 172
		self.Name = "23PP79"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.0508"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "40"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.1"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "-40"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP80:
	def __init__(self):
		self.ID = 173
		self.Name = "23PP80"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.0524"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP81:
	def __init__(self):
		self.ID = 174
		self.Name = "23PP81"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.02"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.07"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP82:
	def __init__(self):
		self.ID = 175
		self.Name = "23PP82"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.05"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP83:
	def __init__(self):
		self.ID = 176
		self.Name = "23PP83"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.03"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP84:
	def __init__(self):
		self.ID = 177
		self.Name = "23PP84"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.05"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP85:
	def __init__(self):
		self.ID = 178
		self.Name = "23PP85"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.02"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.1"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP86:
	def __init__(self):
		self.ID = 179
		self.Name = "23PP86"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.02"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.1"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP87:
	def __init__(self):
		self.ID = 180
		self.Name = "23PP87"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.02"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.1"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP88:
	def __init__(self):
		self.ID = 181
		self.Name = "23PP88"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.02"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.1"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP89:
	def __init__(self):
		self.ID = 182
		self.Name = "23PP89"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.0508"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "100"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.15"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "-120"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP90:
	def __init__(self):
		self.ID = 183
		self.Name = "23PP90"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.01"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "2.4"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP91:
	def __init__(self):
		self.ID = 184
		self.Name = "23PP91"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.01"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "2.4"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP92:
	def __init__(self):
		self.ID = 185
		self.Name = "23PP92"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.1016"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "2"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "8"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP93:
	def __init__(self):
		self.ID = 186
		self.Name = "23PP93"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.2"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.15"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP94:
	def __init__(self):
		self.ID = 187
		self.Name = "23PP94"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.1524"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "5"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP95:
	def __init__(self):
		self.ID = 188
		self.Name = "23PP95"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.0762"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.1"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "-10"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP96:
	def __init__(self):
		self.ID = 189
		self.Name = "23PP96"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.0254"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "5"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PP97:
	def __init__(self):
		self.ID = 190
		self.Name = "23PP97"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.05"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "5"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "5"
		self.s1_Notes = "System No."

class Block_23PPH01:
	def __init__(self):
		self.ID = 191
		self.Name = "23PPH01"
		self.Model = "_HEATXA"
		self.Notes = "Heat Exchange Flow(General Cold)"

		# Primary Parameters
		self.TYPE_Value = "0"
		self.TYPE_Notes = "Specification Type(0:T,1:R,2:Q)"

		# Primary Parameters
		self.T_Value = "143"
		self.T_Notes = "Outlet Temperature Set/Calc. Value[C]"

		# Primary Parameters
		self.RV_Value = "1"
		self.RV_Notes = "Outlet Vapor Ratio Set/Calc. Value[-]"

		# Primary Parameters
		self.Q_Value = "0"
		self.Q_Notes = "Heat Load Set/Calc. Value[MJ/h]"

		# Primary Parameters
		self.Wdes_Value = "300"
		self.Wdes_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters
		self.Ddes_Value = "1000"
		self.Ddes_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.Pddes_Value = "10"
		self.Pddes_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.tau_Value = "30"
		self.tau_Notes = "Response Delay Time[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Outlet Temperature Start Value[C]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System 1"

class Block_23PR:
	def __init__(self):
		self.ID = 192
		self.Name = "23PR"
		self.Model = "BL_F1"
		self.Notes = "Constant Pressure Feed"

		# General Parameters
		self._TYPE_Value = "0"
		self._TYPE_Notes = "0:T constant, 1:RV constant"

		# General Parameters
		self._NXVAR_Value = "0"
		self._NXVAR_Notes = "Number of Composition Change Params(<=5)"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Feed Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0.0000e+00, 0.0000e+00, 2.0000e-05, 0.0000e+00, 0.0000e+00,
       0.0000e+00, 0.0000e+00, 0.0000e+00, 3.0000e-05, 1.9100e-03,
       0.0000e+00, 1.9600e-03, 9.9608e-01, 0.0000e+00, 0.0000e+00,
       0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
       0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
       0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
       0.0000e+00])
		# Primary Parameters
		self.T_Value = "32"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.P_Value = "2651.05"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.phase_Value = "0"
		self.phase_Notes = "Phase(0:Stream Definition, 1:L, 2:V)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PU01:
	def __init__(self):
		self.ID = 193
		self.Name = "23PU01"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.0508"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.05"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PU04:
	def __init__(self):
		self.ID = 194
		self.Name = "23PU04"
		self.Model = "PIPE_U"
		self.Notes = "U Tube"

		# General Parameters
		self._Lname_Value = "Level"
		self._Lname_Notes = "Name of Level Parameter in Upstream Unit"

		# Primary Parameters
		self.Wd_Value = "100"
		self.Wd_Notes = "Design Discharge Capacity[kg/h]"

		# Primary Parameters
		self.Hd_Value = "0.1"
		self.Hd_Notes = "Design Discharge Head[m]"

		# Primary Parameters
		self.Hmin_Value = "0.05"
		self.Hmin_Notes = "Minimum Liquid Level for Discharge[m]"

		# Primary Parameters
		self.Hdiff_Value = "1"
		self.Hdiff_Notes = "Discharge Head due to Elevation[m]"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PU05:
	def __init__(self):
		self.ID = 195
		self.Name = "23PU05"
		self.Model = "PIPE_U"
		self.Notes = "U Tube"

		# General Parameters
		self._Lname_Value = "L"
		self._Lname_Notes = "Name of Level Parameter in Upstream Unit"

		# Primary Parameters
		self.Wd_Value = "100"
		self.Wd_Notes = "Design Discharge Capacity[kg/h]"

		# Primary Parameters
		self.Hd_Value = "0.1"
		self.Hd_Notes = "Design Discharge Head[m]"

		# Primary Parameters
		self.Hmin_Value = "0.05"
		self.Hmin_Notes = "Minimum Liquid Level for Discharge[m]"

		# Primary Parameters
		self.Hdiff_Value = "1"
		self.Hdiff_Notes = "Discharge Head due to Elevation[m]"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PU06:
	def __init__(self):
		self.ID = 196
		self.Name = "23PU06"
		self.Model = "PIPE_U"
		self.Notes = "U Tube"

		# General Parameters
		self._Lname_Value = "LH"
		self._Lname_Notes = "Name of Level Parameter in Upstream Unit"

		# Primary Parameters
		self.Wd_Value = "18000"
		self.Wd_Notes = "Design Discharge Capacity[kg/h]"

		# Primary Parameters
		self.Hd_Value = "0.5"
		self.Hd_Notes = "Design Discharge Head[m]"

		# Primary Parameters
		self.Hmin_Value = "0.05"
		self.Hmin_Notes = "Minimum Liquid Level for Discharge[m]"

		# Primary Parameters
		self.Hdiff_Value = "15"
		self.Hdiff_Notes = "Discharge Head due to Elevation[m]"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PU07:
	def __init__(self):
		self.ID = 197
		self.Name = "23PU07"
		self.Model = "PIPE_U"
		self.Notes = "U Tube"

		# General Parameters
		self._Lname_Value = "Level"
		self._Lname_Notes = "Name of Level Parameter in Upstream Unit"

		# Primary Parameters
		self.Wd_Value = "100"
		self.Wd_Notes = "Design Discharge Capacity[kg/h]"

		# Primary Parameters
		self.Hd_Value = "0.15"
		self.Hd_Notes = "Design Discharge Head[m]"

		# Primary Parameters
		self.Hmin_Value = "0.05"
		self.Hmin_Notes = "Minimum Liquid Level for Discharge[m]"

		# Primary Parameters
		self.Hdiff_Value = "1"
		self.Hdiff_Notes = "Discharge Head due to Elevation[m]"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PU08:
	def __init__(self):
		self.ID = 198
		self.Name = "23PU08"
		self.Model = "PIPE_U"
		self.Notes = "U Tube"

		# General Parameters
		self._Lname_Value = "Level"
		self._Lname_Notes = "Name of Level Parameter in Upstream Unit"

		# Primary Parameters
		self.Wd_Value = "6500"
		self.Wd_Notes = "Design Discharge Capacity[kg/h]"

		# Primary Parameters
		self.Hd_Value = "0.5"
		self.Hd_Notes = "Design Discharge Head[m]"

		# Primary Parameters
		self.Hmin_Value = "0.1"
		self.Hmin_Notes = "Minimum Liquid Level for Discharge[m]"

		# Primary Parameters
		self.Hdiff_Value = "5"
		self.Hdiff_Notes = "Discharge Head due to Elevation[m]"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PU09:
	def __init__(self):
		self.ID = 199
		self.Name = "23PU09"
		self.Model = "PIPE_U"
		self.Notes = "U Tube"

		# General Parameters
		self._Lname_Value = "Level"
		self._Lname_Notes = "Name of Level Parameter in Upstream Unit"

		# Primary Parameters
		self.Wd_Value = "4500"
		self.Wd_Notes = "Design Discharge Capacity[kg/h]"

		# Primary Parameters
		self.Hd_Value = "0.05"
		self.Hd_Notes = "Design Discharge Head[m]"

		# Primary Parameters
		self.Hmin_Value = "0.01"
		self.Hmin_Notes = "Minimum Liquid Level for Discharge[m]"

		# Primary Parameters
		self.Hdiff_Value = "1"
		self.Hdiff_Notes = "Discharge Head due to Elevation[m]"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PU10:
	def __init__(self):
		self.ID = 200
		self.Name = "23PU10"
		self.Model = "PIPE_U"
		self.Notes = "U Tube"

		# General Parameters
		self._Lname_Value = "Level"
		self._Lname_Notes = "Name of Level Parameter in Upstream Unit"

		# Primary Parameters
		self.Wd_Value = "4500"
		self.Wd_Notes = "Design Discharge Capacity[kg/h]"

		# Primary Parameters
		self.Hd_Value = "0.1"
		self.Hd_Notes = "Design Discharge Head[m]"

		# Primary Parameters
		self.Hmin_Value = "0.05"
		self.Hmin_Notes = "Minimum Liquid Level for Discharge[m]"

		# Primary Parameters
		self.Hdiff_Value = "1"
		self.Hdiff_Notes = "Discharge Head due to Elevation[m]"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PU11:
	def __init__(self):
		self.ID = 201
		self.Name = "23PU11"
		self.Model = "PIPE_U"
		self.Notes = "U Tube"

		# General Parameters
		self._Lname_Value = "Level"
		self._Lname_Notes = "Name of Level Parameter in Upstream Unit"

		# Primary Parameters
		self.Wd_Value = "300"
		self.Wd_Notes = "Design Discharge Capacity[kg/h]"

		# Primary Parameters
		self.Hd_Value = "0.1"
		self.Hd_Notes = "Design Discharge Head[m]"

		# Primary Parameters
		self.Hmin_Value = "0.05"
		self.Hmin_Notes = "Minimum Liquid Level for Discharge[m]"

		# Primary Parameters
		self.Hdiff_Value = "20"
		self.Hdiff_Notes = "Discharge Head due to Elevation[m]"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PU12:
	def __init__(self):
		self.ID = 202
		self.Name = "23PU12"
		self.Model = "PIPE_U"
		self.Notes = "U Tube"

		# General Parameters
		self._Lname_Value = "L"
		self._Lname_Notes = "Name of Level Parameter in Upstream Unit"

		# Primary Parameters
		self.Wd_Value = "100"
		self.Wd_Notes = "Design Discharge Capacity[kg/h]"

		# Primary Parameters
		self.Hd_Value = "0.1"
		self.Hd_Notes = "Design Discharge Head[m]"

		# Primary Parameters
		self.Hmin_Value = "0.05"
		self.Hmin_Notes = "Minimum Liquid Level for Discharge[m]"

		# Primary Parameters
		self.Hdiff_Value = "1"
		self.Hdiff_Notes = "Discharge Head due to Elevation[m]"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PU13:
	def __init__(self):
		self.ID = 203
		self.Name = "23PU13"
		self.Model = "HVALVE_T"
		self.Notes = "U Tube"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "200"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PU14:
	def __init__(self):
		self.ID = 204
		self.Name = "23PU14"
		self.Model = "HVALVE_T"
		self.Notes = "U Tube"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "200"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PU15:
	def __init__(self):
		self.ID = 205
		self.Name = "23PU15"
		self.Model = "HVALVE_T"
		self.Notes = "U Tube"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "200"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PU16:
	def __init__(self):
		self.ID = 206
		self.Name = "23PU16"
		self.Model = "HVALVE_T"
		self.Notes = "U Tube"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "200"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23PU17:
	def __init__(self):
		self.ID = 207
		self.Name = "23PU17"
		self.Model = "HVALVE_T"
		self.Notes = "U Tube"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "200"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23SOHuser:
	def __init__(self):
		self.ID = 208
		self.Name = "23SOHuser"
		self.Model = "_HEATXA"
		self.Notes = "Simplified Heater/Cooler"

		# Primary Parameters
		self.TYPE_Value = "0"
		self.TYPE_Notes = "Specification Type(0:T,1:R,2:Q)"

		# Primary Parameters
		self.T_Value = "55"
		self.T_Notes = "Outlet Temperature Set/Calc. Value[C]"

		# Primary Parameters
		self.RV_Value = "1"
		self.RV_Notes = "Outlet Vapor Ratio Set/Calc. Value[-]"

		# Primary Parameters
		self.Q_Value = "0"
		self.Q_Notes = "Heat Load Set/Calc. Value[MJ/h]"

		# Primary Parameters
		self.Wdes_Value = "10000"
		self.Wdes_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters
		self.Ddes_Value = "835"
		self.Ddes_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.Pddes_Value = "3400"
		self.Pddes_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.tau_Value = "30"
		self.tau_Notes = "Response Delay Time[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Outlet Temperature Start Value[C]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System 1"

class Block_23SOLuser:
	def __init__(self):
		self.ID = 209
		self.Name = "23SOLuser"
		self.Model = "_HEATXA"
		self.Notes = "Simplified Heater/Cooler"

		# Primary Parameters
		self.TYPE_Value = "0"
		self.TYPE_Notes = "Specification Type(0:T,1:R,2:Q)"

		# Primary Parameters
		self.T_Value = "55"
		self.T_Notes = "Outlet Temperature Set/Calc. Value[C]"

		# Primary Parameters
		self.RV_Value = "1"
		self.RV_Notes = "Outlet Vapor Ratio Set/Calc. Value[-]"

		# Primary Parameters
		self.Q_Value = "0"
		self.Q_Notes = "Heat Load Set/Calc. Value[MJ/h]"

		# Primary Parameters
		self.Wdes_Value = "5000"
		self.Wdes_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters
		self.Ddes_Value = "890"
		self.Ddes_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.Pddes_Value = "1000"
		self.Pddes_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.tau_Value = "30"
		self.tau_Notes = "Response Delay Time[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Outlet Temperature Start Value[C]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System 1"

class Block_23SOMuser:
	def __init__(self):
		self.ID = 210
		self.Name = "23SOMuser"
		self.Model = "_HEATXA"
		self.Notes = "Simplified Heater/Cooler"

		# Primary Parameters
		self.TYPE_Value = "0"
		self.TYPE_Notes = "Specification Type(0:T,1:R,2:Q)"

		# Primary Parameters
		self.T_Value = "55"
		self.T_Notes = "Outlet Temperature Set/Calc. Value[C]"

		# Primary Parameters
		self.RV_Value = "1"
		self.RV_Notes = "Outlet Vapor Ratio Set/Calc. Value[-]"

		# Primary Parameters
		self.Q_Value = "0"
		self.Q_Notes = "Heat Load Set/Calc. Value[MJ/h]"

		# Primary Parameters
		self.Wdes_Value = "10000"
		self.Wdes_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters
		self.Ddes_Value = "835"
		self.Ddes_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.Pddes_Value = "10"
		self.Pddes_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.tau_Value = "30"
		self.tau_Notes = "Response Delay Time[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Outlet Temperature Start Value[C]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System 1"

class Block_23TRAP01:
	def __init__(self):
		self.ID = 211
		self.Name = "23TRAP01"
		self.Model = "_TRAP_S"
		self.Notes = "Inline Trap"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "Discharge Criteria (0:F,1:L,2:P)"

		# Primary Parameters
		self.Ld_Value = "0.2"
		self.Ld_Notes = "Discharge Level[m]"

		# Primary Parameters
		self.Wd_Value = "100"
		self.Wd_Notes = "Discharge Capacity[kg/h]"

		# Primary Parameters
		self.rWd_Value = "0.5"
		self.rWd_Notes = "Margin for Discharge Capacity[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23TRAP02:
	def __init__(self):
		self.ID = 212
		self.Name = "23TRAP02"
		self.Model = "_TRAP_S"
		self.Notes = "Inline Trap"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "Discharge Criteria (0:F,1:L,2:P)"

		# Primary Parameters
		self.Ld_Value = "0.1"
		self.Ld_Notes = "Discharge Level[m]"

		# Primary Parameters
		self.Wd_Value = "1000"
		self.Wd_Notes = "Discharge Capacity[kg/h]"

		# Primary Parameters
		self.rWd_Value = "0.5"
		self.rWd_Notes = "Margin for Discharge Capacity[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23VOL01:
	def __init__(self):
		self.ID = 213
		self.Name = "23VOL01"
		self.Model = "PIPE_VOL"
		self.Notes = "Pipe with Volume"

		# Primary Parameters
		self.Vol_Value = "5"
		self.Vol_Notes = "Volume[m3]"

		# Primary Parameters
		self.P_Value = "101.325"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.T_Value = "30"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Gw_Value = "0"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.05, 0.01, 0.  , 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ])
		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23VOL02:
	def __init__(self):
		self.ID = 214
		self.Name = "23VOL02"
		self.Model = "PIPE_VOL"
		self.Notes = "Pipe with Volume"

		# Primary Parameters
		self.Vol_Value = "5"
		self.Vol_Notes = "Volume[m3]"

		# Primary Parameters
		self.P_Value = "101.325"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.T_Value = "30"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Gw_Value = "0"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.05, 0.01, 0.  , 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ])
		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23VOL03:
	def __init__(self):
		self.ID = 215
		self.Name = "23VOL03"
		self.Model = "PIPE_VOL"
		self.Notes = "Pipe with Volume"

		# Primary Parameters
		self.Vol_Value = "3"
		self.Vol_Notes = "Volume[m3]"

		# Primary Parameters
		self.P_Value = "101.325"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.T_Value = "30"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Gw_Value = "0"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.05, 0.01, 0.  , 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ])
		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23VOL04:
	def __init__(self):
		self.ID = 216
		self.Name = "23VOL04"
		self.Model = "PIPE_VOL"
		self.Notes = "Pipe with Volume"

		# Primary Parameters
		self.Vol_Value = "3"
		self.Vol_Notes = "Volume[m3]"

		# Primary Parameters
		self.P_Value = "101.325"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.T_Value = "30"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Gw_Value = "1000"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.05, 0.01, 0.  , 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ])
		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23VOL05:
	def __init__(self):
		self.ID = 217
		self.Name = "23VOL05"
		self.Model = "PIPE_VOL"
		self.Notes = "Pipe with Volume"

		# Primary Parameters
		self.Vol_Value = "3"
		self.Vol_Notes = "Volume[m3]"

		# Primary Parameters
		self.P_Value = "101.325"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.T_Value = "30"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Gw_Value = "0"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.05, 0.01, 0.  , 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ])
		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23VOL06:
	def __init__(self):
		self.ID = 218
		self.Name = "23VOL06"
		self.Model = "_TANK_LAC"
		self.Notes = "Pipe with Volume"

		# Primary Parameters
		self.V_Value = "1"
		self.V_Notes = "Maximum Capacity of Tank[m3]"

		# Primary Parameters
		self.Pmax_Value = "395.524"
		self.Pmax_Notes = "Pressure at Maximum Capacity[kPa]"

		# Primary Parameters
		self.Pmin_Value = "101.325"
		self.Pmin_Notes = "Pressure at Minimum Capacity[kPa]"

		# Primary Parameters
		self.T_Value = "30"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.P_Value = "297.458"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Liquid Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23VOL07:
	def __init__(self):
		self.ID = 219
		self.Name = "23VOL07"
		self.Model = "PIPE_VOL"
		self.Notes = "Pipe with Volume"

		# Primary Parameters
		self.Vol_Value = "3"
		self.Vol_Notes = "Volume[m3]"

		# Primary Parameters
		self.P_Value = "101.325"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.T_Value = "30"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Gw_Value = "0"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.05, 0.01, 0.  , 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ])
		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23VOL08:
	def __init__(self):
		self.ID = 220
		self.Name = "23VOL08"
		self.Model = "PIPE_VOL"
		self.Notes = "Pipe with Volume"

		# Primary Parameters
		self.Vol_Value = "10"
		self.Vol_Notes = "Volume[m3]"

		# Primary Parameters
		self.P_Value = "101.325"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.T_Value = "30"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])
		# Primary Parameters
		self.Gw_Value = "0"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.05, 0.01, 0.  , 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ])
		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.s1_Value = "5"
		self.s1_Notes = "System No."

class Block_23VOL09:
	def __init__(self):
		self.ID = 221
		self.Name = "23VOL09"
		self.Model = "PIPE_VOL"
		self.Notes = "Pipe with Volume"

		# Primary Parameters
		self.Vol_Value = "1"
		self.Vol_Notes = "Volume[m3]"

		# Primary Parameters
		self.P_Value = "101.325"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.T_Value = "30"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Gw_Value = "0"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.05, 0.01, 0.  , 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ])
		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23VOL10:
	def __init__(self):
		self.ID = 222
		self.Name = "23VOL10"
		self.Model = "PIPE_VOL"
		self.Notes = "Pipe with Volume"

		# Primary Parameters
		self.Vol_Value = "0.1"
		self.Vol_Notes = "Volume[m3]"

		# Primary Parameters
		self.P_Value = "101.325"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.T_Value = "30"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Gw_Value = "0"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.05, 0.01, 0.  , 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ])
		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23VOL11:
	def __init__(self):
		self.ID = 223
		self.Name = "23VOL11"
		self.Model = "_TANK_LAC"
		self.Notes = "Liquid Accumulator"

		# Primary Parameters
		self.V_Value = "0.5"
		self.V_Notes = "Maximum Capacity of Tank[m3]"

		# Primary Parameters
		self.Pmax_Value = "2300"
		self.Pmax_Notes = "Pressure at Maximum Capacity[kPa]"

		# Primary Parameters
		self.Pmin_Value = "100"
		self.Pmin_Notes = "Pressure at Minimum Capacity[kPa]"

		# Primary Parameters
		self.T_Value = "30"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.P_Value = "101.325"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Liquid Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23VOL12:
	def __init__(self):
		self.ID = 224
		self.Name = "23VOL12"
		self.Model = "PIPE_VOL"
		self.Notes = "Pipe with Volume"

		# Primary Parameters
		self.Vol_Value = "1"
		self.Vol_Notes = "Volume[m3]"

		# Primary Parameters
		self.P_Value = "101.325"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.T_Value = "30"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Gw_Value = "0"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.05, 0.01, 0.  , 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ])
		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23VOL13:
	def __init__(self):
		self.ID = 225
		self.Name = "23VOL13"
		self.Model = "PIPE_VOL"
		self.Notes = "Pipe with Volume"

		# Primary Parameters
		self.Vol_Value = "2"
		self.Vol_Notes = "Volume[m3]"

		# Primary Parameters
		self.P_Value = "101.325"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.T_Value = "30"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Gw_Value = "0"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.05, 0.01, 0.  , 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ])
		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23VOL14:
	def __init__(self):
		self.ID = 226
		self.Name = "23VOL14"
		self.Model = "PIPE_VOL"
		self.Notes = "Pipe with Volume"

		# Primary Parameters
		self.Vol_Value = "3"
		self.Vol_Notes = "Volume[m3]"

		# Primary Parameters
		self.P_Value = "101.325"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.T_Value = "30"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Gw_Value = "0"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.05, 0.01, 0.  , 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ])
		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23VOL15:
	def __init__(self):
		self.ID = 227
		self.Name = "23VOL15"
		self.Model = "PIPE_VOL"
		self.Notes = "Pipe with Volume"

		# Primary Parameters
		self.Vol_Value = "1"
		self.Vol_Notes = "Volume[m3]"

		# Primary Parameters
		self.P_Value = "101.325"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.T_Value = "30"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Gw_Value = "0"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.05, 0.01, 0.  , 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ])
		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_23WW:
	def __init__(self):
		self.ID = 228
		self.Name = "23WW"
		self.Model = "BL_P1"
		self.Notes = "Constant Pressure Product"

		# Primary Parameters
		self.P_Value = "101.325"
		self.P_Notes = "Pressure[kPa]"

class Block_AT2210:
	def __init__(self):
		self.ID = 229
		self.Name = "AT2210"
		self.Model = "TRANSQ"
		self.Notes = "Conc. Meter(for Streams)"

		# Primary Parameters
		self.Ql_Value = "0"
		self.Ql_Notes = "Lower Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.Qh_Value = "100"
		self.Qh_Notes = "Upper Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.ncomp_Value = "11"
		self.ncomp_Notes = "Measurement Component No.[-]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:-,2:%,3:ppm)"

		# Primary Parameters
		self.basis_Value = "1"
		self.basis_Notes = "Basis(1:Molar,2:Mass,3:Volume)"

		# Primary Parameters
		self.Qfail_Value = "0"
		self.Qfail_Notes = "Indicated Conc. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.QSt_Value = "0"
		self.QSt_Notes = "Indicated Conc. Start Value[%,ppm]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_AT2210B:
	def __init__(self):
		self.ID = 230
		self.Name = "AT2210B"
		self.Model = "TRANSQ"
		self.Notes = "Conc. Meter(for Streams)"

		# Primary Parameters
		self.Ql_Value = "0"
		self.Ql_Notes = "Lower Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.Qh_Value = "100"
		self.Qh_Notes = "Upper Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.ncomp_Value = "8"
		self.ncomp_Notes = "Measurement Component No.[-]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:-,2:%,3:ppm)"

		# Primary Parameters
		self.basis_Value = "3"
		self.basis_Notes = "Basis(1:Molar,2:Mass,3:Volume)"

		# Primary Parameters
		self.Qfail_Value = "0"
		self.Qfail_Notes = "Indicated Conc. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.QSt_Value = "0"
		self.QSt_Notes = "Indicated Conc. Start Value[%,ppm]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_AT2211:
	def __init__(self):
		self.ID = 231
		self.Name = "AT2211"
		self.Model = "TRANSQ"
		self.Notes = "Conc. Meter(for Streams)"

		# Primary Parameters
		self.Ql_Value = "0"
		self.Ql_Notes = "Lower Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.Qh_Value = "100"
		self.Qh_Notes = "Upper Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.ncomp_Value = "9"
		self.ncomp_Notes = "Measurement Component No.[-]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:-,2:%,3:ppm)"

		# Primary Parameters
		self.basis_Value = "3"
		self.basis_Notes = "Basis(1:Molar,2:Mass,3:Volume)"

		# Primary Parameters
		self.Qfail_Value = "0"
		self.Qfail_Notes = "Indicated Conc. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.QSt_Value = "0"
		self.QSt_Notes = "Indicated Conc. Start Value[%,ppm]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_AT2212A:
	def __init__(self):
		self.ID = 232
		self.Name = "AT2212A"
		self.Model = "TRANSQ"
		self.Notes = "Conc. Meter(for Streams)"

		# Primary Parameters
		self.Ql_Value = "0"
		self.Ql_Notes = "Lower Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.Qh_Value = "100"
		self.Qh_Notes = "Upper Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.ncomp_Value = "10"
		self.ncomp_Notes = "Measurement Component No.[-]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:-,2:%,3:ppm)"

		# Primary Parameters
		self.basis_Value = "3"
		self.basis_Notes = "Basis(1:Molar,2:Mass,3:Volume)"

		# Primary Parameters
		self.Qfail_Value = "0"
		self.Qfail_Notes = "Indicated Conc. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.QSt_Value = "0"
		self.QSt_Notes = "Indicated Conc. Start Value[%,ppm]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_AT2212B:
	def __init__(self):
		self.ID = 233
		self.Name = "AT2212B"
		self.Model = "TRANSQ"
		self.Notes = "Conc. Meter(for Streams)"

		# Primary Parameters
		self.Ql_Value = "0"
		self.Ql_Notes = "Lower Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.Qh_Value = "100"
		self.Qh_Notes = "Upper Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.ncomp_Value = "11"
		self.ncomp_Notes = "Measurement Component No.[-]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:-,2:%,3:ppm)"

		# Primary Parameters
		self.basis_Value = "3"
		self.basis_Notes = "Basis(1:Molar,2:Mass,3:Volume)"

		# Primary Parameters
		self.Qfail_Value = "0"
		self.Qfail_Notes = "Indicated Conc. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.QSt_Value = "0"
		self.QSt_Notes = "Indicated Conc. Start Value[%,ppm]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_AT2213:
	def __init__(self):
		self.ID = 234
		self.Name = "AT2213"
		self.Model = "TRANSQ"
		self.Notes = "Conc. Meter(for Streams)"

		# Primary Parameters
		self.Ql_Value = "0"
		self.Ql_Notes = "Lower Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.Qh_Value = "100"
		self.Qh_Notes = "Upper Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.ncomp_Value = "13"
		self.ncomp_Notes = "Measurement Component No.[-]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:-,2:%,3:ppm)"

		# Primary Parameters
		self.basis_Value = "3"
		self.basis_Notes = "Basis(1:Molar,2:Mass,3:Volume)"

		# Primary Parameters
		self.Qfail_Value = "0"
		self.Qfail_Notes = "Indicated Conc. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.QSt_Value = "0"
		self.QSt_Notes = "Indicated Conc. Start Value[%,ppm]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_AT2214:
	def __init__(self):
		self.ID = 235
		self.Name = "AT2214"
		self.Model = "TRANSQ"
		self.Notes = "Conc. Meter(for Streams)"

		# Primary Parameters
		self.Ql_Value = "0"
		self.Ql_Notes = "Lower Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.Qh_Value = "100"
		self.Qh_Notes = "Upper Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.ncomp_Value = "12"
		self.ncomp_Notes = "Measurement Component No.[-]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:-,2:%,3:ppm)"

		# Primary Parameters
		self.basis_Value = "3"
		self.basis_Notes = "Basis(1:Molar,2:Mass,3:Volume)"

		# Primary Parameters
		self.Qfail_Value = "0"
		self.Qfail_Notes = "Indicated Conc. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.QSt_Value = "0"
		self.QSt_Notes = "Indicated Conc. Start Value[%,ppm]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_AT2217:
	def __init__(self):
		self.ID = 236
		self.Name = "AT2217"
		self.Model = "TRANSQ"
		self.Notes = "Conc. Meter(for Streams)"

		# Primary Parameters
		self.Ql_Value = "0"
		self.Ql_Notes = "Lower Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.Qh_Value = "100"
		self.Qh_Notes = "Upper Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.ncomp_Value = "4"
		self.ncomp_Notes = "Measurement Component No.[-]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:-,2:%,3:ppm)"

		# Primary Parameters
		self.basis_Value = "3"
		self.basis_Notes = "Basis(1:Molar,2:Mass,3:Volume)"

		# Primary Parameters
		self.Qfail_Value = "0"
		self.Qfail_Notes = "Indicated Conc. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.QSt_Value = "0"
		self.QSt_Notes = "Indicated Conc. Start Value[%,ppm]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_AT2230:
	def __init__(self):
		self.ID = 237
		self.Name = "AT2230"
		self.Model = "TRANSQU"
		self.Notes = "Conc. Meter(for Units)"

		# Primary Parameters
		self.Ql_Value = "0"
		self.Ql_Notes = "Lower Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.Qh_Value = "100"
		self.Qh_Notes = "Upper Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.ncomp_Value = "11"
		self.ncomp_Notes = "Measurement Component No.[-]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:-,2:%,3:ppm)"

		# Primary Parameters
		self.basis_Value = "1"
		self.basis_Notes = "Basis(1:Molar,2:Mass)"

		# Primary Parameters
		self.Qfail_Value = "0"
		self.Qfail_Notes = "Indicated Conc. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.type_Value = "1"
		self.type_Notes = "Type"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_AT2230B:
	def __init__(self):
		self.ID = 238
		self.Name = "AT2230B"
		self.Model = "TRANSQ"
		self.Notes = "Conc. Meter(for Streams)"

		# Primary Parameters
		self.Ql_Value = "0"
		self.Ql_Notes = "Lower Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.Qh_Value = "100"
		self.Qh_Notes = "Upper Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.ncomp_Value = "8"
		self.ncomp_Notes = "Measurement Component No.[-]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:-,2:%,3:ppm)"

		# Primary Parameters
		self.basis_Value = "3"
		self.basis_Notes = "Basis(1:Molar,2:Mass,3:Volume)"

		# Primary Parameters
		self.Qfail_Value = "0"
		self.Qfail_Notes = "Indicated Conc. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.QSt_Value = "0"
		self.QSt_Notes = "Indicated Conc. Start Value[%,ppm]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_AT2231:
	def __init__(self):
		self.ID = 239
		self.Name = "AT2231"
		self.Model = "TRANSQ"
		self.Notes = "Conc. Meter(for Streams)"

		# Primary Parameters
		self.Ql_Value = "0"
		self.Ql_Notes = "Lower Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.Qh_Value = "100"
		self.Qh_Notes = "Upper Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.ncomp_Value = "9"
		self.ncomp_Notes = "Measurement Component No.[-]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:-,2:%,3:ppm)"

		# Primary Parameters
		self.basis_Value = "3"
		self.basis_Notes = "Basis(1:Molar,2:Mass,3:Volume)"

		# Primary Parameters
		self.Qfail_Value = "0"
		self.Qfail_Notes = "Indicated Conc. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.QSt_Value = "0"
		self.QSt_Notes = "Indicated Conc. Start Value[%,ppm]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_AT2232A:
	def __init__(self):
		self.ID = 240
		self.Name = "AT2232A"
		self.Model = "TRANSQ"
		self.Notes = "Conc. Meter(for Streams)"

		# Primary Parameters
		self.Ql_Value = "0"
		self.Ql_Notes = "Lower Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.Qh_Value = "100"
		self.Qh_Notes = "Upper Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.ncomp_Value = "11"
		self.ncomp_Notes = "Measurement Component No.[-]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:-,2:%,3:ppm)"

		# Primary Parameters
		self.basis_Value = "3"
		self.basis_Notes = "Basis(1:Molar,2:Mass,3:Volume)"

		# Primary Parameters
		self.Qfail_Value = "0"
		self.Qfail_Notes = "Indicated Conc. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.QSt_Value = "0"
		self.QSt_Notes = "Indicated Conc. Start Value[%,ppm]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_AT2232B:
	def __init__(self):
		self.ID = 241
		self.Name = "AT2232B"
		self.Model = "TRANSQ"
		self.Notes = "Conc. Meter(for Streams)"

		# Primary Parameters
		self.Ql_Value = "0"
		self.Ql_Notes = "Lower Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.Qh_Value = "100"
		self.Qh_Notes = "Upper Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.ncomp_Value = "11"
		self.ncomp_Notes = "Measurement Component No.[-]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:-,2:%,3:ppm)"

		# Primary Parameters
		self.basis_Value = "3"
		self.basis_Notes = "Basis(1:Molar,2:Mass,3:Volume)"

		# Primary Parameters
		self.Qfail_Value = "0"
		self.Qfail_Notes = "Indicated Conc. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.QSt_Value = "0"
		self.QSt_Notes = "Indicated Conc. Start Value[%,ppm]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_AT2233:
	def __init__(self):
		self.ID = 242
		self.Name = "AT2233"
		self.Model = "TRANSQ"
		self.Notes = "Conc. Meter(for Streams)"

		# Primary Parameters
		self.Ql_Value = "0"
		self.Ql_Notes = "Lower Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.Qh_Value = "100"
		self.Qh_Notes = "Upper Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.ncomp_Value = "13"
		self.ncomp_Notes = "Measurement Component No.[-]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:-,2:%,3:ppm)"

		# Primary Parameters
		self.basis_Value = "3"
		self.basis_Notes = "Basis(1:Molar,2:Mass,3:Volume)"

		# Primary Parameters
		self.Qfail_Value = "0"
		self.Qfail_Notes = "Indicated Conc. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.QSt_Value = "0"
		self.QSt_Notes = "Indicated Conc. Start Value[%,ppm]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_AT2234:
	def __init__(self):
		self.ID = 243
		self.Name = "AT2234"
		self.Model = "TRANSQ"
		self.Notes = "Conc. Meter(for Streams)"

		# Primary Parameters
		self.Ql_Value = "0"
		self.Ql_Notes = "Lower Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.Qh_Value = "100"
		self.Qh_Notes = "Upper Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.ncomp_Value = "12"
		self.ncomp_Notes = "Measurement Component No.[-]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:-,2:%,3:ppm)"

		# Primary Parameters
		self.basis_Value = "3"
		self.basis_Notes = "Basis(1:Molar,2:Mass,3:Volume)"

		# Primary Parameters
		self.Qfail_Value = "0"
		self.Qfail_Notes = "Indicated Conc. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.QSt_Value = "0"
		self.QSt_Notes = "Indicated Conc. Start Value[%,ppm]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_AT2237:
	def __init__(self):
		self.ID = 244
		self.Name = "AT2237"
		self.Model = "TRANSQ"
		self.Notes = "Conc. Meter(for Streams)"

		# Primary Parameters
		self.Ql_Value = "0"
		self.Ql_Notes = "Lower Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.Qh_Value = "100"
		self.Qh_Notes = "Upper Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.ncomp_Value = "4"
		self.ncomp_Notes = "Measurement Component No.[-]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:-,2:%,3:ppm)"

		# Primary Parameters
		self.basis_Value = "3"
		self.basis_Notes = "Basis(1:Molar,2:Mass,3:Volume)"

		# Primary Parameters
		self.Qfail_Value = "0"
		self.Qfail_Notes = "Indicated Conc. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.QSt_Value = "0"
		self.QSt_Notes = "Indicated Conc. Start Value[%,ppm]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_AT2280:
	def __init__(self):
		self.ID = 245
		self.Name = "AT2280"
		self.Model = "TRANSQ"
		self.Notes = "Conc. Meter(for Streams)"

		# Primary Parameters
		self.Ql_Value = "0"
		self.Ql_Notes = "Lower Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.Qh_Value = "100"
		self.Qh_Notes = "Upper Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.ncomp_Value = "11"
		self.ncomp_Notes = "Measurement Component No.[-]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:-,2:%,3:ppm)"

		# Primary Parameters
		self.basis_Value = "1"
		self.basis_Notes = "Basis(1:Molar,2:Mass,3:Volume)"

		# Primary Parameters
		self.Qfail_Value = "0"
		self.Qfail_Notes = "Indicated Conc. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.QSt_Value = "0"
		self.QSt_Notes = "Indicated Conc. Start Value[%,ppm]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_AT2281:
	def __init__(self):
		self.ID = 246
		self.Name = "AT2281"
		self.Model = "TRANSQ"
		self.Notes = "Conc. Meter(for Streams)"

		# Primary Parameters
		self.Ql_Value = "0"
		self.Ql_Notes = "Lower Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.Qh_Value = "100"
		self.Qh_Notes = "Upper Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.ncomp_Value = "11"
		self.ncomp_Notes = "Measurement Component No.[-]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:-,2:%,3:ppm)"

		# Primary Parameters
		self.basis_Value = "1"
		self.basis_Notes = "Basis(1:Molar,2:Mass,3:Volume)"

		# Primary Parameters
		self.Qfail_Value = "0"
		self.Qfail_Notes = "Indicated Conc. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.QSt_Value = "0"
		self.QSt_Notes = "Indicated Conc. Start Value[%,ppm]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_AT2290B:
	def __init__(self):
		self.ID = 247
		self.Name = "AT2290B"
		self.Model = "TRANSQ"
		self.Notes = "Conc. Meter(for Streams)"

		# Primary Parameters
		self.Ql_Value = "0"
		self.Ql_Notes = "Lower Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.Qh_Value = "100"
		self.Qh_Notes = "Upper Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.ncomp_Value = "8"
		self.ncomp_Notes = "Measurement Component No.[-]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:-,2:%,3:ppm)"

		# Primary Parameters
		self.basis_Value = "3"
		self.basis_Notes = "Basis(1:Molar,2:Mass,3:Volume)"

		# Primary Parameters
		self.Qfail_Value = "0"
		self.Qfail_Notes = "Indicated Conc. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.QSt_Value = "0"
		self.QSt_Notes = "Indicated Conc. Start Value[%,ppm]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_AT2291:
	def __init__(self):
		self.ID = 248
		self.Name = "AT2291"
		self.Model = "TRANSQ"
		self.Notes = "Conc. Meter(for Streams)"

		# Primary Parameters
		self.Ql_Value = "0"
		self.Ql_Notes = "Lower Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.Qh_Value = "100"
		self.Qh_Notes = "Upper Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.ncomp_Value = "9"
		self.ncomp_Notes = "Measurement Component No.[-]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:-,2:%,3:ppm)"

		# Primary Parameters
		self.basis_Value = "3"
		self.basis_Notes = "Basis(1:Molar,2:Mass,3:Volume)"

		# Primary Parameters
		self.Qfail_Value = "0"
		self.Qfail_Notes = "Indicated Conc. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.QSt_Value = "0"
		self.QSt_Notes = "Indicated Conc. Start Value[%,ppm]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_AT2292A:
	def __init__(self):
		self.ID = 249
		self.Name = "AT2292A"
		self.Model = "TRANSQ"
		self.Notes = "Conc. Meter(for Streams)"

		# Primary Parameters
		self.Ql_Value = "0"
		self.Ql_Notes = "Lower Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.Qh_Value = "100"
		self.Qh_Notes = "Upper Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.ncomp_Value = "11"
		self.ncomp_Notes = "Measurement Component No.[-]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:-,2:%,3:ppm)"

		# Primary Parameters
		self.basis_Value = "3"
		self.basis_Notes = "Basis(1:Molar,2:Mass,3:Volume)"

		# Primary Parameters
		self.Qfail_Value = "0"
		self.Qfail_Notes = "Indicated Conc. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.QSt_Value = "0"
		self.QSt_Notes = "Indicated Conc. Start Value[%,ppm]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_AT2292B:
	def __init__(self):
		self.ID = 250
		self.Name = "AT2292B"
		self.Model = "TRANSQ"
		self.Notes = "Conc. Meter(for Streams)"

		# Primary Parameters
		self.Ql_Value = "0"
		self.Ql_Notes = "Lower Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.Qh_Value = "100"
		self.Qh_Notes = "Upper Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.ncomp_Value = "11"
		self.ncomp_Notes = "Measurement Component No.[-]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:-,2:%,3:ppm)"

		# Primary Parameters
		self.basis_Value = "3"
		self.basis_Notes = "Basis(1:Molar,2:Mass,3:Volume)"

		# Primary Parameters
		self.Qfail_Value = "0"
		self.Qfail_Notes = "Indicated Conc. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.QSt_Value = "0"
		self.QSt_Notes = "Indicated Conc. Start Value[%,ppm]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_AT2293:
	def __init__(self):
		self.ID = 251
		self.Name = "AT2293"
		self.Model = "TRANSQ"
		self.Notes = "Conc. Meter(for Streams)"

		# Primary Parameters
		self.Ql_Value = "0"
		self.Ql_Notes = "Lower Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.Qh_Value = "100"
		self.Qh_Notes = "Upper Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.ncomp_Value = "13"
		self.ncomp_Notes = "Measurement Component No.[-]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:-,2:%,3:ppm)"

		# Primary Parameters
		self.basis_Value = "3"
		self.basis_Notes = "Basis(1:Molar,2:Mass,3:Volume)"

		# Primary Parameters
		self.Qfail_Value = "0"
		self.Qfail_Notes = "Indicated Conc. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.QSt_Value = "0"
		self.QSt_Notes = "Indicated Conc. Start Value[%,ppm]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_AT2294:
	def __init__(self):
		self.ID = 252
		self.Name = "AT2294"
		self.Model = "TRANSQ"
		self.Notes = "Conc. Meter(for Streams)"

		# Primary Parameters
		self.Ql_Value = "0"
		self.Ql_Notes = "Lower Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.Qh_Value = "100"
		self.Qh_Notes = "Upper Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.ncomp_Value = "12"
		self.ncomp_Notes = "Measurement Component No.[-]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:-,2:%,3:ppm)"

		# Primary Parameters
		self.basis_Value = "3"
		self.basis_Notes = "Basis(1:Molar,2:Mass,3:Volume)"

		# Primary Parameters
		self.Qfail_Value = "0"
		self.Qfail_Notes = "Indicated Conc. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.QSt_Value = "0"
		self.QSt_Notes = "Indicated Conc. Start Value[%,ppm]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_AT2297:
	def __init__(self):
		self.ID = 253
		self.Name = "AT2297"
		self.Model = "TRANSQ"
		self.Notes = "Conc. Meter(for Streams)"

		# Primary Parameters
		self.Ql_Value = "0"
		self.Ql_Notes = "Lower Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.Qh_Value = "100"
		self.Qh_Notes = "Upper Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.ncomp_Value = "4"
		self.ncomp_Notes = "Measurement Component No.[-]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:-,2:%,3:ppm)"

		# Primary Parameters
		self.basis_Value = "3"
		self.basis_Notes = "Basis(1:Molar,2:Mass,3:Volume)"

		# Primary Parameters
		self.Qfail_Value = "0"
		self.Qfail_Notes = "Indicated Conc. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.QSt_Value = "0"
		self.QSt_Notes = "Indicated Conc. Start Value[%,ppm]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_ATbrine:
	def __init__(self):
		self.ID = 254
		self.Name = "ATbrine"
		self.Model = "TRANSQ"
		self.Notes = "Conc. Meter(for Streams)"

		# Primary Parameters
		self.Ql_Value = "0"
		self.Ql_Notes = "Lower Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.Qh_Value = "100"
		self.Qh_Notes = "Upper Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.ncomp_Value = "3"
		self.ncomp_Notes = "Measurement Component No.[-]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:-,2:%,3:ppm)"

		# Primary Parameters
		self.basis_Value = "2"
		self.basis_Notes = "Basis(1:Molar,2:Mass,3:Volume)"

		# Primary Parameters
		self.Qfail_Value = "0"
		self.Qfail_Notes = "Indicated Conc. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.QSt_Value = "0"
		self.QSt_Notes = "Indicated Conc. Start Value[%,ppm]"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_C2001:
	def __init__(self):
		self.ID = 255
		self.Name = "C2001"
		self.Model = "PACKDRB11"
		self.Notes = "Reboiler Type(1-feed/1-cut)"

		# General Parameters
		self._NS_Value = "12"
		self._NS_Notes = "Num. of Stages"

		# General Parameters
		self._NSTOP_Value = "0"
		self._NSTOP_Notes = "Num. of Top Section Stages"

		# General Parameters
		self._NSBTM_Value = "0"
		self._NSBTM_Notes = "Num. of Bottom Section Stages"

		# General Parameters
		self._SRGBAF_Value = "0"
		self._SRGBAF_Notes = "Surge Baffle(1:Existing)"

		# General Parameters
		self._TYPE_Value = "0"
		self._TYPE_Notes = "Type of Balance Calculation"

		# General Parameters
		self._CUTTYPE_Value = "0"
		self._CUTTYPE_Notes = "Side-Cut Type(0:Simple, 1:Chimney Tray)"

		# General Parameters
		self._LLE_Value = "0"
		self._LLE_Notes = "LLE Calculation(1:Yes)"

		# General Parameters
		self._COND_Value = "0"
		self._COND_Notes = "Condenser(1:Existing)"

		# General Parameters
		self._NCSMAX_Value = "5"
		self._NCSMAX_Notes = "Max. Num. of Components for Spec."

		# Primary Parameters
		self.NFED_Value = "(1)"
		self.NFED_Notes = "Side-Feed Stage Number(s)."

		# Primary Parameters List Value
		self.NFED_List_Value = array([1.])
		# Primary Parameters
		self.NCUT_Value = "(1)"
		self.NCUT_Notes = "Side-Cut Stage Number(s)."

		# Primary Parameters List Value
		self.NCUT_List_Value = array([11.])
		# Primary Parameters
		self.vy_Value = "(12,31)"
		self.vy_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.vy_List_Value = array([[0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])
		# Primary Parameters
		self.zlj_Value = "(12,31)"
		self.zlj_Notes = "Liquid Phase Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zlj_List_Value = array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])
		# Primary Parameters
		self.Temp_Value = "(12)"
		self.Temp_Notes = "Temperature[C]"

		# Primary Parameters List Value
		self.Temp_List_Value = array([30., 30., 30., 30., 30., 30., 30., 30., 30., 30., 30., 30.])
		# Primary Parameters
		self.Pres1_Value = "101.325"
		self.Pres1_Notes = "Tower Top Pres.[kPa]"

		# Primary Parameters
		self.Pmin_Value = "10"
		self.Pmin_Notes = "Minimum Top Pressure[kPa]"

		# Primary Parameters
		self.Gw_Value = "9999"
		self.Gw_Notes = "Tower Effective Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Specific Heat of Structure[kJ/kgK]"

		# Primary Parameters
		self.fldes_Value = "10"
		self.fldes_Notes = "Design Liquid Vol. Flow Rate[m3/m2/h]"

		# Primary Parameters
		self.hsdes_Value = "0.025"
		self.hsdes_Notes = "Design Static Liquid Holdup[m3/m3]"

		# Primary Parameters
		self.hodes_Value = "0.05"
		self.hodes_Notes = "Design Dynamic Liquid Holdup[m3/m3]"

		# Primary Parameters
		self.aLeva_Value = "1e-006"
		self.aLeva_Notes = "Alpha in Leva Equation[Pah2/kg]"

		# Primary Parameters
		self.bLeva_Value = "0.005"
		self.bLeva_Notes = "Beta in Leva Equation[mh/kg]"

		# Primary Parameters
		self.HETP_Value = "0.7"
		self.HETP_Notes = "HETP[m]"

		# Primary Parameters
		self.eps_Value = "0.95"
		self.eps_Notes = "Void Fraction of Packing[m3/m3]"

		# Primary Parameters
		self.AD_Value = "0.785"
		self.AD_Notes = "Tray Area[m2]"

		# Primary Parameters
		self.calcVtot_Value = "1"
		self.calcVtot_Notes = "Vapor Volume Type(0:Const 1:Calc)"

		# Primary Parameters
		self.Hbtm_Value = "12"
		self.Hbtm_Notes = "Bottom Height[m]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Levminb_Value = "0"
		self.Levminb_Notes = "Bottom Minimum Liquid Level[m]"

		# Primary Parameters
		self.Lmax_Value = "0"
		self.Lmax_Notes = "Max. Liq. Flow Rate(0:no limit)[kmol/h]"

		# Primary Parameters
		self.rshell_Value = "0"
		self.rshell_Notes = "Ratio of Outer Wall to Structure[-]"

		# Primary Parameters
		self.tauw_Value = "180"
		self.tauw_Notes = "Time Constant for Heat Transfer[s]"

		# Primary Parameters
		self.Eftype_Value = "0"
		self.Eftype_Notes = "Eff. Model(0,1:Evaporation 2-4:Murphree)"

		# Primary Parameters
		self.Eft_Value = "1"
		self.Eft_Notes = "Common Efficiency for all Components"

		# Primary Parameters
		self.efc_Value = "(31)"
		self.efc_Notes = "Component Efficiencies"

		# Primary Parameters List Value
		self.efc_List_Value = array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
		# Primary Parameters
		self.efs_Value = "(12)"
		self.efs_Notes = "Stage Efficiencies"

		# Primary Parameters List Value
		self.efs_List_Value = array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
		# Primary Parameters
		self.efcs_Value = "(12,31)"
		self.efcs_Notes = "Stage per Stage Component Efficiencies"

		# Primary Parameters List Value
		self.efcs_List_Value = array([[1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]])
		# Primary Parameters
		self.OConnell_Value = "(2)"
		self.OConnell_Notes = "Coefficients of O'Connell Correlation"

		# Primary Parameters List Value
		self.OConnell_List_Value = array([ 0.492, -0.245])
		# Primary Parameters
		self.hBlow_Value = "0"
		self.hBlow_Notes = "Height of Bottom Vapor Feed Nozzle[m]"

		# Primary Parameters
		self.kEbtm_Value = "0"
		self.kEbtm_Notes = "1:Equilibrium at Pres. of Feed Nozzle"

		# Primary Parameters
		self.Rdis_Value = "0.01"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.Vsc_Value = "(1)"
		self.Vsc_Notes = "Side-Cut Liquid Reservoir Volume[m3]"

		# Primary Parameters List Value
		self.Vsc_List_Value = array([3.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

		# Primary Parameters
		self.uparm_Value = "(20)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([5.e-03, 1.e-01, 1.e+01, 0.e+00, 0.e+00, 0.e+00, 0.e+00, 0.e+00,
       0.e+00, 0.e+00, 0.e+00, 0.e+00, 0.e+00, 0.e+00, 0.e+00, 0.e+00,
       0.e+00, 0.e+00, 0.e+00, 0.e+00])
		# Primary Parameters
		self.sparm_Value = "(10)"
		self.sparm_Notes = "Parameters for Calculation(Steady State)"

		# Primary Parameters List Value
		self.sparm_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.PtopSt_Value = "101.325"
		self.PtopSt_Notes = "Top Pressure Start Value[kPa]"

		# Primary Parameters
		self.PbtmSt_Value = "101.325"
		self.PbtmSt_Notes = "Bottom Pressure Start Value[kPa]"

		# Primary Parameters
		self.TempSt_Value = "(12)"
		self.TempSt_Notes = "Stage Temperature Start Value[C]"

		# Primary Parameters List Value
		self.TempSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.LSt_Value = "(12)"
		self.LSt_Notes = "Liquid Flow Start Value[kmol/h]"

		# Primary Parameters List Value
		self.LSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.ytSt_Value = "(31)"
		self.ytSt_Notes = "Top Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ytSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xbSt_Value = "(31)"
		self.xbSt_Notes = "Bottom Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xbSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.x1St_Value = "(31)"
		self.x1St_Notes = "Side-Cut No.1 Liq. Comp. Start Value"

		# Primary Parameters List Value
		self.x1St_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.LevbSt_Value = "1"
		self.LevbSt_Notes = "Bottom Liquid Level Start Value[m]"

		# Primary Parameters
		self.nfheater_Value = "0"
		self.nfheater_Notes = "Feed Heater Nozzle Number"

		# Primary Parameters
		self.dPtot_Value = "30"
		self.dPtot_Notes = "Pressure Difference of the Tower[kPa]"

		# Primary Parameters
		self.Tctrl_Value = "100"
		self.Tctrl_Notes = "Stage Temperature Spec. Value[C]"

		# Primary Parameters
		self.jTctrl_Value = "12"
		self.jTctrl_Notes = "Stage Number for Temperature Spec."

		# Primary Parameters
		self.Xctrl_Value = "0.1"
		self.Xctrl_Notes = "Stage Composition Spec. Value[mol/mol]"

		# Primary Parameters
		self.jXctrl_Value = "12"
		self.jXctrl_Notes = "Stage Number for Composition Spec."

		# Primary Parameters
		self.icXctrl_Value = "(5)"
		self.icXctrl_Notes = "Component Number for Composition Spec."

		# Primary Parameters List Value
		self.icXctrl_List_Value = array([0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Lctrl_Value = "100"
		self.Lctrl_Notes = "Liquid Flow Spec. Value[kmol/h]"

		# Primary Parameters
		self.jLctrl_Value = "1"
		self.jLctrl_Notes = "Stage No. for Liquid Flow Spec."

		# Primary Parameters
		self.Ttop_Value = "100"
		self.Ttop_Notes = "Top Temperature Spec.[C]"

		# Primary Parameters
		self.Xtop_Value = "0.1"
		self.Xtop_Notes = "Top Composition Spec. Value[mol/mol]"

		# Primary Parameters
		self.icXtop_Value = "(5)"
		self.icXtop_Notes = "Component Number for Top Spec."

		# Primary Parameters List Value
		self.icXtop_List_Value = array([0., 0., 0., 0., 0.])
		# Primary Parameters
		self.dXtop_Value = "0"
		self.dXtop_Notes = "Wet or Dry Top Composition Spec.(1:dry)"

		# Primary Parameters
		self.Xbtm_Value = "0.1"
		self.Xbtm_Notes = "Bottom Composition Spec. Value[mol/mol]"

		# Primary Parameters
		self.icXbtm_Value = "(5)"
		self.icXbtm_Notes = "Component Number for Bottom Spec."

		# Primary Parameters List Value
		self.icXbtm_List_Value = array([0., 0., 0., 0., 0.])
		# Primary Parameters
		self.dXbtm_Value = "0"
		self.dXbtm_Notes = "Wet or Dry Bottom Spec.(1:dry)"

		# Primary Parameters
		self.Xprod1_Value = "0.1"
		self.Xprod1_Notes = "Side-Cut No.1 Comp. Spec. Value[mol/mol]"

		# Primary Parameters
		self.icXprod1_Value = "(5)"
		self.icXprod1_Notes = "Component Number for Side-Cut No.1 Spec."

		# Primary Parameters List Value
		self.icXprod1_List_Value = array([0., 0., 0., 0., 0.])
		# Primary Parameters
		self.dXprod1_Value = "0"
		self.dXprod1_Notes = "Wet or Dry Side-Cut No.1 Spec.(1:dry)"

		# Primary Parameters
		self.method_Value = "0"
		self.method_Notes = "Calc. Method(0:General,1:Non-ideal)"

		# Primary Parameters
		self.loopt_Value = "30"
		self.loopt_Notes = "Max. Iteration for Outer Loop"

		# Primary Parameters
		self.loopm_Value = "30"
		self.loopm_Notes = "Max. Iteration for Inner Loop"

		# Primary Parameters
		self.print_Value = "0"
		self.print_Notes = "Print Level(for Check)"

class Block_C2201:
	def __init__(self):
		self.ID = 256
		self.Name = "C2201"
		self.Model = "TRAYDS30"
		self.Notes = "Blow Type(3-feed)"

		# General Parameters
		self._NS_Value = "12"
		self._NS_Notes = "Num. of Stages"

		# General Parameters
		self._NSTOP_Value = "0"
		self._NSTOP_Notes = "Num. of Top Section Stages"

		# General Parameters
		self._NSBTM_Value = "0"
		self._NSBTM_Notes = "Num. of Bottom Section Stages"

		# General Parameters
		self._TYPE_Value = "0"
		self._TYPE_Notes = "Type of Balance Calculation"

		# General Parameters
		self._TRAYTYPE_Value = "0"
		self._TRAYTYPE_Notes = "Tray Type(0:Simple,1:Sieve,2:Valve,3;BC)"

		# General Parameters
		self._LLE_Value = "0"
		self._LLE_Notes = "LLE Calculation(1:Yes)"

		# General Parameters
		self._COND_Value = "0"
		self._COND_Notes = "Condenser(1:Existing)"

		# General Parameters
		self._NCSMAX_Value = "5"
		self._NCSMAX_Notes = "Max. Num. of Components for Spec."

		# Primary Parameters
		self.NFED_Value = "(3)"
		self.NFED_Notes = "Side-Feed Stage Number(s)."

		# Primary Parameters List Value
		self.NFED_List_Value = array([ 7.,  9., 12.])
		# Primary Parameters
		self.vy_Value = "(12,31)"
		self.vy_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.vy_List_Value = array([[0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])
		# Primary Parameters
		self.zlj_Value = "(12,31)"
		self.zlj_Notes = "Liquid Phase Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zlj_List_Value = array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])
		# Primary Parameters
		self.Temp_Value = "(12)"
		self.Temp_Notes = "Temperature[C]"

		# Primary Parameters List Value
		self.Temp_List_Value = array([30., 30., 30., 30., 30., 30., 30., 30., 30., 30., 30., 30.])
		# Primary Parameters
		self.Pres1_Value = "101.325"
		self.Pres1_Notes = "Tower Top Pres.[kPa]"

		# Primary Parameters
		self.Pmin_Value = "10"
		self.Pmin_Notes = "Minimum Top Pressure[kPa]"

		# Primary Parameters
		self.weirtype_Value = "0"
		self.weirtype_Notes = "Weir Type(0:Simple,1:Segmental,2:Circ.)"

		# Primary Parameters
		self.rdw_Value = "0.75"
		self.rdw_Notes = "Dc Diameter to Segmental A. Width R.[-]"

		# Primary Parameters
		self.Wtype_Value = "0"
		self.Wtype_Notes = "Weep Eq.(0:None,1:Bern.,2:L&B,3:H&M)"

		# Primary Parameters
		self.Wfac_Value = "0.25"
		self.Wfac_Notes = "Weep Balance Factor[-]"

		# Primary Parameters
		self.Gw_Value = "4100"
		self.Gw_Notes = "Tower Effective Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Specific Heat of Structure[kJ/kgK]"

		# Primary Parameters
		self.as_Value = "0.001"
		self.as_Notes = "Liquid Discharge Coef.[h^(2/3)/m]"

		# Primary Parameters
		self.ax_Value = "1e-006"
		self.ax_Notes = "Pres. Drop Coef.[h^2/m^5]"

		# Primary Parameters
		self.VD_Value = "0.36"
		self.VD_Notes = "Stage Volume[m3]"

		# Primary Parameters
		self.AD_Value = "0.63585"
		self.AD_Notes = "Tray Area[m2]"

		# Primary Parameters
		self.rAdci_Value = "0.12"
		self.rAdci_Notes = "Inlet Downcomer Area Ratio[-]"

		# Primary Parameters
		self.rAdco_Value = "0.12"
		self.rAdco_Notes = "Outlet Downcomer Area Ratio[-]"

		# Primary Parameters
		self.cldc_Value = "0.025"
		self.cldc_Notes = "Inlet Downcomer Clearance[m]"

		# Primary Parameters
		self.calcVtot_Value = "1"
		self.calcVtot_Notes = "Vapor Volume Type(0:Const 1:Calc)"

		# Primary Parameters
		self.Lev0_Value = "0.07"
		self.Lev0_Notes = "Overflow Weir Height[m]"

		# Primary Parameters
		self.Hbtm_Value = "9.95"
		self.Hbtm_Notes = "Bottom Height[m]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Levmin_Value = "0.01"
		self.Levmin_Notes = "Tray Minimum Liquid Level[m]"

		# Primary Parameters
		self.Levminb_Value = "0.05"
		self.Levminb_Notes = "Bottom Minimum Liquid Level[m]"

		# Primary Parameters
		self.phytype_Value = "1"
		self.phytype_Notes = "Rel. Froth D. Type(0:None,1:Calc,2:Set)"

		# Primary Parameters
		self.phydc_Value = "0.5"
		self.phydc_Notes = "Downcomer Relative Froth Density[-]"

		# Primary Parameters
		self.calcfld_Value = "0"
		self.calcfld_Notes = "Flooding Calculation(0:N,1:Y)"

		# Primary Parameters
		self.etrtype_Value = "0"
		self.etrtype_Notes = "Entrainment Calculation(0:None,1:Fair..)"

		# Primary Parameters
		self.SF_Value = "1"
		self.SF_Notes = "Derating Factor[-]"

		# Primary Parameters
		self.Uckfld_Value = "0"
		self.Uckfld_Notes = "Maximum Liquid Velocity(0:no limit)[m/s]"

		# Primary Parameters
		self.rshell_Value = "0"
		self.rshell_Notes = "Ratio of Outer Wall to Structure[-]"

		# Primary Parameters
		self.tauw_Value = "180"
		self.tauw_Notes = "Time Constant for Heat Transfer[s]"

		# Primary Parameters
		self.Eftype_Value = "0"
		self.Eftype_Notes = "Eff. Model(0,1:Evaporation 2-4:Murphree)"

		# Primary Parameters
		self.Eft_Value = "1"
		self.Eft_Notes = "Common Efficiency for all Components"

		# Primary Parameters
		self.efc_Value = "(31)"
		self.efc_Notes = "Component Efficiencies"

		# Primary Parameters List Value
		self.efc_List_Value = array([1. , 1. , 1. , 1. , 1. , 1. , 1. , 1. , 1. , 1. , 1. , 1. , 1.2,
       1. , 1. , 1. , 1. , 1. , 1. , 1. , 1. , 1. , 1. , 1. , 1. , 1. ,
       1. , 1. , 1. , 1. , 0. ])
		# Primary Parameters
		self.efs_Value = "(12)"
		self.efs_Notes = "Stage Efficiencies"

		# Primary Parameters List Value
		self.efs_List_Value = array([0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75,
       0.75])
		# Primary Parameters
		self.efcs_Value = "(12,31)"
		self.efcs_Notes = "Stage per Stage Component Efficiencies"

		# Primary Parameters List Value
		self.efcs_List_Value = array([[1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])
		# Primary Parameters
		self.OConnell_Value = "(2)"
		self.OConnell_Notes = "Coefficients of O'Connell Correlation"

		# Primary Parameters List Value
		self.OConnell_List_Value = array([ 0.492, -0.245])
		# Primary Parameters
		self.Blow_Value = "0"
		self.Blow_Notes = "Method for Blow(1:Blow into Liquid)"

		# Primary Parameters
		self.hBlow_Value = "0"
		self.hBlow_Notes = "Height of Bottom Vapor Feed Nozzle[m]"

		# Primary Parameters
		self.kEbtm_Value = "0"
		self.kEbtm_Notes = "1:Equilibrium at Pres. of Feed Nozzle"

		# Primary Parameters
		self.Rdis_Value = "0.01"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

		# Primary Parameters
		self.uparm_Value = "(20)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([5.e-03, 1.e-01, 1.e+01, 0.e+00, 0.e+00, 0.e+00, 0.e+00, 0.e+00,
       0.e+00, 0.e+00, 0.e+00, 0.e+00, 0.e+00, 0.e+00, 0.e+00, 0.e+00,
       0.e+00, 0.e+00, 0.e+00, 0.e+00])
		# Primary Parameters
		self.sparm_Value = "(10)"
		self.sparm_Notes = "Parameters for Calculation(Steady State)"

		# Primary Parameters List Value
		self.sparm_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.PtopSt_Value = "101.325"
		self.PtopSt_Notes = "Top Pressure Start Value[kPa]"

		# Primary Parameters
		self.PbtmSt_Value = "101.325"
		self.PbtmSt_Notes = "Bottom Pressure Start Value[kPa]"

		# Primary Parameters
		self.TempSt_Value = "(12)"
		self.TempSt_Notes = "Stage Temperature Start Value[C]"

		# Primary Parameters List Value
		self.TempSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.LSt_Value = "(12)"
		self.LSt_Notes = "Liquid Flow Start Value[kmol/h]"

		# Primary Parameters List Value
		self.LSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.ytSt_Value = "(31)"
		self.ytSt_Notes = "Top Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ytSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xbSt_Value = "(31)"
		self.xbSt_Notes = "Bottom Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xbSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.LevbSt_Value = "1"
		self.LevbSt_Notes = "Bottom Liquid Level Start Value[m]"

		# Primary Parameters
		self.nfheater_Value = "0"
		self.nfheater_Notes = "Feed Heater Nozzle Number"

		# Primary Parameters
		self.dPtot_Value = "30"
		self.dPtot_Notes = "Pressure Difference of the Tower[kPa]"

		# Primary Parameters
		self.Tctrl_Value = "100"
		self.Tctrl_Notes = "Stage Temperature Spec. Value[C]"

		# Primary Parameters
		self.jTctrl_Value = "12"
		self.jTctrl_Notes = "Stage Number for Temperature Spec."

		# Primary Parameters
		self.Xctrl_Value = "0.1"
		self.Xctrl_Notes = "Stage Composition Spec. Value[mol/mol]"

		# Primary Parameters
		self.jXctrl_Value = "12"
		self.jXctrl_Notes = "Stage Number for Composition Spec."

		# Primary Parameters
		self.icXctrl_Value = "(5)"
		self.icXctrl_Notes = "Component Number for Composition Spec."

		# Primary Parameters List Value
		self.icXctrl_List_Value = array([0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Lctrl_Value = "100"
		self.Lctrl_Notes = "Liquid Flow Spec. Value[kmol/h]"

		# Primary Parameters
		self.jLctrl_Value = "1"
		self.jLctrl_Notes = "Stage No. for Liquid Flow Spec."

		# Primary Parameters
		self.Ttop_Value = "100"
		self.Ttop_Notes = "Top Temperature Spec.[C]"

		# Primary Parameters
		self.Xtop_Value = "0.1"
		self.Xtop_Notes = "Top Composition Spec. Value[mol/mol]"

		# Primary Parameters
		self.icXtop_Value = "(5)"
		self.icXtop_Notes = "Component Number for Top Spec."

		# Primary Parameters List Value
		self.icXtop_List_Value = array([0., 0., 0., 0., 0.])
		# Primary Parameters
		self.dXtop_Value = "0"
		self.dXtop_Notes = "Wet or Dry Top Composition Spec.(1:dry)"

		# Primary Parameters
		self.Xbtm_Value = "0.1"
		self.Xbtm_Notes = "Bottom Composition Spec. Value[mol/mol]"

		# Primary Parameters
		self.icXbtm_Value = "(5)"
		self.icXbtm_Notes = "Component Number for Bottom Spec."

		# Primary Parameters List Value
		self.icXbtm_List_Value = array([0., 0., 0., 0., 0.])
		# Primary Parameters
		self.dXbtm_Value = "0"
		self.dXbtm_Notes = "Wet or Dry Bottom Spec.(1:dry)"

		# Primary Parameters
		self.method_Value = "0"
		self.method_Notes = "Calc. Method(0:General,1:Non-ideal)"

		# Primary Parameters
		self.loopt_Value = "30"
		self.loopt_Notes = "Max. Iteration for Outer Loop"

		# Primary Parameters
		self.loopm_Value = "30"
		self.loopm_Notes = "Max. Iteration for Inner Loop"

		# Primary Parameters
		self.print_Value = "0"
		self.print_Notes = "Print Level(for Check)"

class Block_D01:
	def __init__(self):
		self.ID = 257
		self.Name = "D01"
		self.Model = "TRANSD"
		self.Notes = "Density Meter(for Streams)"

		# Primary Parameters
		self.Dl_Value = "0"
		self.Dl_Notes = "L.Limit of Density Meas.(in ind. unit)"

		# Primary Parameters
		self.Dh_Value = "1000"
		self.Dh_Notes = "U.Limit of Density Meas.(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit(1:kmol/m3,2:kg/m3)"

		# Primary Parameters
		self.Dfail_Value = "0"
		self.Dfail_Notes = "Indicated Dens. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.phase_Value = "0"
		self.phase_Notes = "Phase to Measure(0:Str.Def,1:L,2:V,3:LV)"

		# Primary Parameters
		self.DSt_Value = "0"
		self.DSt_Notes = "Measured Dens. Start Value(in ind. unit)"

		# Primary Parameters
		self.Dcal_Value = "0"
		self.Dcal_Notes = "Calculated Density(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2001A:
	def __init__(self):
		self.ID = 258
		self.Name = "D2001A"
		self.Model = "STRAINS"
		self.Notes = "Flash Drum"

		# Primary Parameters
		self.Wd_Value = "5847"
		self.Wd_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters
		self.DP_Value = "10"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.dd_Value = "467"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.md_Value = "0"
		self.md_Notes = "Design Viscosity[Pas]"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2001AD:
	def __init__(self):
		self.ID = 259
		self.Name = "D2001AD"
		self.Model = "_FLASHE"
		self.Notes = "Flash Drum"

		# General Parameters
		self._NZLHGT_Value = "0"
		self._NZLHGT_Notes = "Specify Nozzle Heights(0:N,1:Y)"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.y_Value = "(31)"
		self.y_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.y_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Temperature[C]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "0.8"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "6.05"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Gw_Value = "12300"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Rdis_Value = "0.01"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.kQe1_Value = "0"
		self.kQe1_Notes = "External Heating Unit Connection(1:Yes)"

		# Primary Parameters
		self.kQe2_Value = "0"
		self.kQe2_Notes = "External Heating Unit Connection(1:Yes)"

		# Primary Parameters
		self.kQe3_Value = "0"
		self.kQe3_Notes = "External Heating Unit Connection(1:Yes)"

		# Primary Parameters
		self.kQe4_Value = "0"
		self.kQe4_Notes = "External Heating Unit Connection(1:Yes)"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.uparme_Value = "(10)"
		self.uparme_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparme_List_Value = array([0.05, 0.01, 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ])
		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2001B:
	def __init__(self):
		self.ID = 260
		self.Name = "D2001B"
		self.Model = "STRAINS"
		self.Notes = "Flash Drum"

		# Primary Parameters
		self.Wd_Value = "5847"
		self.Wd_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters
		self.DP_Value = "10"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.dd_Value = "467"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.md_Value = "0"
		self.md_Notes = "Design Viscosity[Pas]"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2001BD:
	def __init__(self):
		self.ID = 261
		self.Name = "D2001BD"
		self.Model = "_FLASHE"
		self.Notes = "Flash Drum"

		# General Parameters
		self._NZLHGT_Value = "0"
		self._NZLHGT_Notes = "Specify Nozzle Heights(0:N,1:Y)"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.y_Value = "(31)"
		self.y_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.y_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Temperature[C]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "0.8"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "6.05"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Gw_Value = "12300"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Rdis_Value = "0.01"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.kQe1_Value = "0"
		self.kQe1_Notes = "External Heating Unit Connection(1:Yes)"

		# Primary Parameters
		self.kQe2_Value = "0"
		self.kQe2_Notes = "External Heating Unit Connection(1:Yes)"

		# Primary Parameters
		self.kQe3_Value = "0"
		self.kQe3_Notes = "External Heating Unit Connection(1:Yes)"

		# Primary Parameters
		self.kQe4_Value = "0"
		self.kQe4_Notes = "External Heating Unit Connection(1:Yes)"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.uparme_Value = "(10)"
		self.uparme_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparme_List_Value = array([0.05, 0.01, 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ])
		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2002:
	def __init__(self):
		self.ID = 262
		self.Name = "D2002"
		self.Model = "STRAINS"
		self.Notes = "Flash Drum"

		# Primary Parameters
		self.Wd_Value = "5847"
		self.Wd_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters
		self.DP_Value = "10"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.dd_Value = "482"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.md_Value = "0"
		self.md_Notes = "Design Viscosity[Pas]"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2002D:
	def __init__(self):
		self.ID = 263
		self.Name = "D2002D"
		self.Model = "_FLASHE"
		self.Notes = "Flash Drum"

		# General Parameters
		self._NZLHGT_Value = "0"
		self._NZLHGT_Notes = "Specify Nozzle Heights(0:N,1:Y)"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.y_Value = "(31)"
		self.y_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.y_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Temperature[C]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "0.55"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "3.15"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Gw_Value = "3693"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Rdis_Value = "0.01"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.kQe1_Value = "0"
		self.kQe1_Notes = "External Heating Unit Connection(1:Yes)"

		# Primary Parameters
		self.kQe2_Value = "0"
		self.kQe2_Notes = "External Heating Unit Connection(1:Yes)"

		# Primary Parameters
		self.kQe3_Value = "0"
		self.kQe3_Notes = "External Heating Unit Connection(1:Yes)"

		# Primary Parameters
		self.kQe4_Value = "0"
		self.kQe4_Notes = "External Heating Unit Connection(1:Yes)"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.uparme_Value = "(10)"
		self.uparme_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparme_List_Value = array([0.05, 0.01, 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ])
		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2019:
	def __init__(self):
		self.ID = 264
		self.Name = "D2019"
		self.Model = "TANK_L1"
		self.Notes = "Liquid Tank (Cone Roof)"

		# Primary Parameters
		self.u_Value = "(31)"
		self.u_Notes = "Molar Holdup[kmol]"

		# Primary Parameters List Value
		self.u_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.T_Value = "30"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.A_Value = "0.475"
		self.A_Notes = "Cross Section Area[m2]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.Lover_Value = "2.4"
		self.Lover_Notes = "Overflow Height[m]"

		# Primary Parameters
		self.Fover_Value = "100"
		self.Fover_Notes = "Overflow Rate[kg/h]"

		# Primary Parameters
		self.calFover_Value = "0"
		self.calFover_Notes = "Overflow Type(0:Const 1:Calc)"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2019A:
	def __init__(self):
		self.ID = 265
		self.Name = "D2019A"
		self.Model = "STRAINS"
		self.Notes = "Flash Drum"

		# Primary Parameters
		self.Wd_Value = "5847"
		self.Wd_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters
		self.DP_Value = "20"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.dd_Value = "467"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.md_Value = "0"
		self.md_Notes = "Design Viscosity[Pas]"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2019A1:
	def __init__(self):
		self.ID = 266
		self.Name = "D2019A1"
		self.Model = "_CSEP_L"
		self.Notes = "Component Separator(Liquid Flow)"

		# Primary Parameters
		self.V_Value = "1.14"
		self.V_Notes = "Vessel Volume[m3]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Temperature[C]"

		# Primary Parameters
		self.rsep2_Value = "(31)"
		self.rsep2_Notes = "Removal Ratio[-]"

		# Primary Parameters List Value
		self.rsep2_List_Value = array([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Holdup Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Valp_Value = "0"
		self.Valp_Notes = "Volume Correction Factor[-]"

		# Primary Parameters
		self.Fullop_Value = "0"
		self.Fullop_Notes = "Operation(0:Filling,1:Filled)"

		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.x1St_Value = "(31)"
		self.x1St_Notes = "Composition Start Value Prod.1[mol/mol]"

		# Primary Parameters List Value
		self.x1St_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.x2St_Value = "(31)"
		self.x2St_Notes = "Composition Start Value Prod.2[mol/mol]"

		# Primary Parameters List Value
		self.x2St_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2019AD:
	def __init__(self):
		self.ID = 267
		self.Name = "D2019AD"
		self.Model = "_FLASHE"
		self.Notes = "Flash Drum"

		# General Parameters
		self._NZLHGT_Value = "0"
		self._NZLHGT_Notes = "Specify Nozzle Heights(0:N,1:Y)"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.y_Value = "(31)"
		self.y_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.y_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Temperature[C]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "0.55"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "2.45"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Gw_Value = "5000"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Rdis_Value = "0.01"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.kQe1_Value = "0"
		self.kQe1_Notes = "External Heating Unit Connection(1:Yes)"

		# Primary Parameters
		self.kQe2_Value = "0"
		self.kQe2_Notes = "External Heating Unit Connection(1:Yes)"

		# Primary Parameters
		self.kQe3_Value = "0"
		self.kQe3_Notes = "External Heating Unit Connection(1:Yes)"

		# Primary Parameters
		self.kQe4_Value = "0"
		self.kQe4_Notes = "External Heating Unit Connection(1:Yes)"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.uparme_Value = "(10)"
		self.uparme_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparme_List_Value = array([0.05, 0.01, 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ])
		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2019B:
	def __init__(self):
		self.ID = 268
		self.Name = "D2019B"
		self.Model = "STRAINS"
		self.Notes = "Flash Drum"

		# Primary Parameters
		self.Wd_Value = "5847"
		self.Wd_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters
		self.DP_Value = "20"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.dd_Value = "467"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.md_Value = "0"
		self.md_Notes = "Design Viscosity[Pas]"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2019B1:
	def __init__(self):
		self.ID = 269
		self.Name = "D2019B1"
		self.Model = "_CSEP_L"
		self.Notes = "Component Separator(Liquid Flow)"

		# Primary Parameters
		self.V_Value = "1.14"
		self.V_Notes = "Vessel Volume[m3]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Temperature[C]"

		# Primary Parameters
		self.rsep2_Value = "(31)"
		self.rsep2_Notes = "Removal Ratio[-]"

		# Primary Parameters List Value
		self.rsep2_List_Value = array([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Holdup Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Valp_Value = "0"
		self.Valp_Notes = "Volume Correction Factor[-]"

		# Primary Parameters
		self.Fullop_Value = "0"
		self.Fullop_Notes = "Operation(0:Filling,1:Filled)"

		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.x1St_Value = "(31)"
		self.x1St_Notes = "Composition Start Value Prod.1[mol/mol]"

		# Primary Parameters List Value
		self.x1St_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.x2St_Value = "(31)"
		self.x2St_Notes = "Composition Start Value Prod.2[mol/mol]"

		# Primary Parameters List Value
		self.x2St_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2019BD:
	def __init__(self):
		self.ID = 270
		self.Name = "D2019BD"
		self.Model = "_FLASHE"
		self.Notes = "Flash Drum"

		# General Parameters
		self._NZLHGT_Value = "0"
		self._NZLHGT_Notes = "Specify Nozzle Heights(0:N,1:Y)"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.y_Value = "(31)"
		self.y_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.y_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Temperature[C]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "0.55"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "2.45"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Gw_Value = "5000"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Rdis_Value = "0.05"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.kQe1_Value = "0"
		self.kQe1_Notes = "External Heating Unit Connection(1:Yes)"

		# Primary Parameters
		self.kQe2_Value = "0"
		self.kQe2_Notes = "External Heating Unit Connection(1:Yes)"

		# Primary Parameters
		self.kQe3_Value = "0"
		self.kQe3_Notes = "External Heating Unit Connection(1:Yes)"

		# Primary Parameters
		self.kQe4_Value = "0"
		self.kQe4_Notes = "External Heating Unit Connection(1:Yes)"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.uparme_Value = "(10)"
		self.uparme_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparme_List_Value = array([0.05, 0.01, 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ])
		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2101:
	def __init__(self):
		self.ID = 271
		self.Name = "D2101"
		self.Model = "_LLVSEPORS"
		self.Notes = "Flash Drum"

		# General Parameters
		self._NZLHGT_Value = "0"
		self._NZLHGT_Notes = "Specify Nozzle Heights(0:N,1:Y)"

		# Primary Parameters
		self.x1_Value = "(31)"
		self.x1_Notes = "Upper Phase Composition[mol/mol]"

		# Primary Parameters List Value
		self.x1_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.x2_Value = "(31)"
		self.x2_Notes = "Lower Phase Composition[mol/mol]"

		# Primary Parameters List Value
		self.x2_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.y_Value = "(31)"
		self.y_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.y_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Zl1_Value = "0"
		self.Zl1_Notes = "Upper Phase Holdup[kmol]"

		# Primary Parameters
		self.Zl2_Value = "0"
		self.Zl2_Notes = "Lower Phase Holdup[kmol]"

		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "1.3"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "1.83"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Height_Value = "0.1"
		self.Height_Notes = "Height of Discharge Outlet"

		# Primary Parameters
		self.Gw_Value = "4100"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Uv_Value = "80"
		self.Uv_Notes = "Vapor Phase Heat Transfer Coef.[W/m2K]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Vv0_Value = "5"
		self.Vv0_Notes = "Volume of Connected Pipe[m3]"

		# Primary Parameters
		self.et12_Value = "0"
		self.et12_Notes = "Entrainment Ratio(Upper->Lower)[-]"

		# Primary Parameters
		self.et21_Value = "0"
		self.et21_Notes = "Entrainment Ratio(Lower->Upper)[-]"

		# Primary Parameters
		self.Dsdes_Value = "600"
		self.Dsdes_Notes = "Density to Judge Separation[kg/m3]"

		# Primary Parameters
		self.Rdis_Value = "0.05"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.x1est_Value = "(31)"
		self.x1est_Notes = "Estimated Upper Liq. Comp.[mol/mol]"

		# Primary Parameters List Value
		self.x1est_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.kL_Value = "(31)"
		self.kL_Notes = "Mass Transfer Rate Coefficient[1/m2/h]"

		# Primary Parameters List Value
		self.kL_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.kG_Value = "0.1"
		self.kG_Notes = "Mass Transfer Rate Coef.[kmol/m2kPah]"

		# Primary Parameters
		self.Fcons_Value = "1"
		self.Fcons_Notes = "Flow Constraints(1:Yes,0:No)"

		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.LevelsSt_Value = "0.5"
		self.LevelsSt_Notes = "Interface Level Start Value[m]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.x1St_Value = "(31)"
		self.x1St_Notes = "Upper Phase Comp. Start Value[mol/mol]"

		# Primary Parameters List Value
		self.x1St_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.x2St_Value = "(31)"
		self.x2St_Notes = "Lower Phase Comp. Start Value[mol/mol]"

		# Primary Parameters List Value
		self.x2St_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.phiSt_Value = "0.5"
		self.phiSt_Notes = "Upper Phase Ratio Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2101J:
	def __init__(self):
		self.ID = 272
		self.Name = "D2101J"
		self.Model = "_JACKET"
		self.Notes = "Jacket"

		# Primary Parameters
		self.H_Value = "1.83"
		self.H_Notes = "Length of Cylindrical Frame[m]"

		# Primary Parameters
		self.Aj_Value = "7.47"
		self.Aj_Notes = "Jacket Area[m2]"

		# Primary Parameters
		self.Ujv_Value = "1700"
		self.Ujv_Notes = "Jacket Condensation H. T. Coef.[W/m2K]"

		# Primary Parameters
		self.Ujl_Value = "1500"
		self.Ujl_Notes = "Jkt L. Phase Design H. T. Coef.[W/m2K]"

		# Primary Parameters
		self.As1_Value = "0.212"
		self.As1_Notes = "Cross Section Area Cylindrical Frame[m2]"

		# Primary Parameters
		self.As2_Value = "1"
		self.As2_Notes = "Cross Section Area Bottom Head[m2]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.Hlow_Value = "0.05"
		self.Hlow_Notes = "Height of Jkt Undermirror Zone[m]"

		# Primary Parameters
		self.Ujlalp_Value = "0"
		self.Ujlalp_Notes = "Jkt L. Ph. H. T. Coef. Flow Factor[-]"

		# Primary Parameters
		self.Wdjl_Value = "10200"
		self.Wdjl_Notes = "Jacket Liquid Design Flow Rate[kg/h]"

		# Primary Parameters
		self.Dpdjl_Value = "10"
		self.Dpdjl_Notes = "Jacket Design Pressure Drop[kPa]"

		# Primary Parameters
		self.Ddjl_Value = "1000"
		self.Ddjl_Notes = "Jacket Design Liquid Density[kg/m3]"

		# Primary Parameters
		self.Tj_Value = "30"
		self.Tj_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.Pj_Value = "101.325"
		self.Pj_Notes = "Jacket Pressure[kPa]"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.cmodeSt_Value = "1"
		self.cmodeSt_Notes = "Operation Start Value(1-3)"

		# Primary Parameters
		self.dpj_Value = "10"
		self.dpj_Notes = "Jacket Pressure Drop[kPa]"

		# Primary Parameters
		self.LjSt_Value = "0.5"
		self.LjSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TjSt_Value = "25"
		self.TjSt_Notes = "Liquid Outlet Temperature Start Value[C]"

		# Primary Parameters
		self.PjSt_Value = "101.325"
		self.PjSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.xlSt_Value = "(31)"
		self.xlSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xlSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.freeLj_Value = "0"
		self.freeLj_Notes = "Set Hot Side Level Free(1:Free)"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_D2102:
	def __init__(self):
		self.ID = 273
		self.Name = "D2102"
		self.Model = "_LLVSEPORS"
		self.Notes = "Flash Drum"

		# General Parameters
		self._NZLHGT_Value = "0"
		self._NZLHGT_Notes = "Specify Nozzle Heights(0:N,1:Y)"

		# Primary Parameters
		self.x1_Value = "(31)"
		self.x1_Notes = "Upper Phase Composition[mol/mol]"

		# Primary Parameters List Value
		self.x1_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.x2_Value = "(31)"
		self.x2_Notes = "Lower Phase Composition[mol/mol]"

		# Primary Parameters List Value
		self.x2_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.y_Value = "(31)"
		self.y_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.y_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Zl1_Value = "0"
		self.Zl1_Notes = "Upper Phase Holdup[kmol]"

		# Primary Parameters
		self.Zl2_Value = "0"
		self.Zl2_Notes = "Lower Phase Holdup[kmol]"

		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "2"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "2.8"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Height_Value = "0.1"
		self.Height_Notes = "Height of Discharge Outlet"

		# Primary Parameters
		self.Gw_Value = "8750"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Uv_Value = "40"
		self.Uv_Notes = "Vapor Phase Heat Transfer Coef.[W/m2K]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Vv0_Value = "3"
		self.Vv0_Notes = "Volume of Connected Pipe[m3]"

		# Primary Parameters
		self.et12_Value = "0"
		self.et12_Notes = "Entrainment Ratio(Upper->Lower)[-]"

		# Primary Parameters
		self.et21_Value = "0"
		self.et21_Notes = "Entrainment Ratio(Lower->Upper)[-]"

		# Primary Parameters
		self.Dsdes_Value = "600"
		self.Dsdes_Notes = "Density to Judge Separation[kg/m3]"

		# Primary Parameters
		self.Rdis_Value = "0.05"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.x1est_Value = "(31)"
		self.x1est_Notes = "Estimated Upper Liq. Comp.[mol/mol]"

		# Primary Parameters List Value
		self.x1est_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.kL_Value = "(31)"
		self.kL_Notes = "Mass Transfer Rate Coefficient[1/m2/h]"

		# Primary Parameters List Value
		self.kL_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.kG_Value = "0.1"
		self.kG_Notes = "Mass Transfer Rate Coef.[kmol/m2kPah]"

		# Primary Parameters
		self.Fcons_Value = "1"
		self.Fcons_Notes = "Flow Constraints(1:Yes,0:No)"

		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.LevelsSt_Value = "0.5"
		self.LevelsSt_Notes = "Interface Level Start Value[m]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.x1St_Value = "(31)"
		self.x1St_Notes = "Upper Phase Comp. Start Value[mol/mol]"

		# Primary Parameters List Value
		self.x1St_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.x2St_Value = "(31)"
		self.x2St_Notes = "Lower Phase Comp. Start Value[mol/mol]"

		# Primary Parameters List Value
		self.x2St_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.phiSt_Value = "0.5"
		self.phiSt_Notes = "Upper Phase Ratio Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2103:
	def __init__(self):
		self.ID = 274
		self.Name = "D2103"
		self.Model = "_FLASHD"
		self.Notes = "Flash Drum"

		# General Parameters
		self._NZLHGT_Value = "0"
		self._NZLHGT_Notes = "Specify Nozzle Heights(0:N,1:Y)"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.y_Value = "(31)"
		self.y_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.y_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "0.45"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "0.6"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Gw_Value = "675"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Uv_Value = "40"
		self.Uv_Notes = "Vapor Phase Heat Transfer Coef.[W/m2K]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Vv0_Value = "2"
		self.Vv0_Notes = "Volume of Connected Pipe[m3]"

		# Primary Parameters
		self.Rdis_Value = "0.05"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.kG_Value = "0.1"
		self.kG_Notes = "Mass Transfer Rate Coef.[kmol/m2kPah]"

		# Primary Parameters
		self.Fcons_Value = "1"
		self.Fcons_Notes = "Flow Constraints(1:Yes,0:No)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.1, 0.1, 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ])
		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2104:
	def __init__(self):
		self.ID = 275
		self.Name = "D2104"
		self.Model = "_FLASHD"
		self.Notes = "Flash Drum"

		# General Parameters
		self._NZLHGT_Value = "0"
		self._NZLHGT_Notes = "Specify Nozzle Heights(0:N,1:Y)"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.y_Value = "(31)"
		self.y_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.y_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "1.9"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "2.9"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Gw_Value = "2100"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Uv_Value = "40"
		self.Uv_Notes = "Vapor Phase Heat Transfer Coef.[W/m2K]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Vv0_Value = "0"
		self.Vv0_Notes = "Volume of Connected Pipe[m3]"

		# Primary Parameters
		self.Rdis_Value = "0.05"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.kG_Value = "0.1"
		self.kG_Notes = "Mass Transfer Rate Coef.[kmol/m2kPah]"

		# Primary Parameters
		self.Fcons_Value = "1"
		self.Fcons_Notes = "Flow Constraints(1:Yes,0:No)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.1, 0.1, 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ])
		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2105:
	def __init__(self):
		self.ID = 276
		self.Name = "D2105"
		self.Model = "_FLASHD"
		self.Notes = "Flash Drum"

		# General Parameters
		self._NZLHGT_Value = "0"
		self._NZLHGT_Notes = "Specify Nozzle Heights(0:N,1:Y)"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.y_Value = "(31)"
		self.y_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.y_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "0.65"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "0.85"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Gw_Value = "200"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Uv_Value = "40"
		self.Uv_Notes = "Vapor Phase Heat Transfer Coef.[W/m2K]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Vv0_Value = "0.5"
		self.Vv0_Notes = "Volume of Connected Pipe[m3]"

		# Primary Parameters
		self.Rdis_Value = "0.05"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.kG_Value = "0.1"
		self.kG_Notes = "Mass Transfer Rate Coef.[kmol/m2kPah]"

		# Primary Parameters
		self.Fcons_Value = "1"
		self.Fcons_Notes = "Flow Constraints(1:Yes,0:No)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.1, 0.1, 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ])
		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2107:
	def __init__(self):
		self.ID = 277
		self.Name = "D2107"
		self.Model = "_FLASHD"
		self.Notes = "Flash Drum"

		# General Parameters
		self._NZLHGT_Value = "0"
		self._NZLHGT_Notes = "Specify Nozzle Heights(0:N,1:Y)"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.y_Value = "(31)"
		self.y_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.y_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "3"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "4.7"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Gw_Value = "7400"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Uv_Value = "40"
		self.Uv_Notes = "Vapor Phase Heat Transfer Coef.[W/m2K]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Vv0_Value = "0"
		self.Vv0_Notes = "Volume of Connected Pipe[m3]"

		# Primary Parameters
		self.Rdis_Value = "0.05"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.kG_Value = "0.1"
		self.kG_Notes = "Mass Transfer Rate Coef.[kmol/m2kPah]"

		# Primary Parameters
		self.Fcons_Value = "1"
		self.Fcons_Notes = "Flow Constraints(1:Yes,0:No)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.1, 0.1, 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ])
		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2108A:
	def __init__(self):
		self.ID = 278
		self.Name = "D2108A"
		self.Model = "FILTERS"
		self.Notes = "Strainer(Simple)"

		# Primary Parameters
		self.Wd_Value = "13000"
		self.Wd_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters
		self.DP_Value = "176.52"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.dd_Value = "650"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.md_Value = "0"
		self.md_Notes = "Design Viscosity[Pas]"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2108B:
	def __init__(self):
		self.ID = 279
		self.Name = "D2108B"
		self.Model = "FILTERS"
		self.Notes = "Strainer(Simple)"

		# Primary Parameters
		self.Wd_Value = "13000"
		self.Wd_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters
		self.DP_Value = "176.52"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.dd_Value = "650"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.md_Value = "0"
		self.md_Notes = "Design Viscosity[Pas]"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2109:
	def __init__(self):
		self.ID = 280
		self.Name = "D2109"
		self.Model = "_FLASHD"
		self.Notes = "Flash Drum"

		# General Parameters
		self._NZLHGT_Value = "0"
		self._NZLHGT_Notes = "Specify Nozzle Heights(0:N,1:Y)"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.y_Value = "(31)"
		self.y_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.y_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "3"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "4.7"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Gw_Value = "8100"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Uv_Value = "40"
		self.Uv_Notes = "Vapor Phase Heat Transfer Coef.[W/m2K]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Vv0_Value = "0"
		self.Vv0_Notes = "Volume of Connected Pipe[m3]"

		# Primary Parameters
		self.Rdis_Value = "0.05"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.kG_Value = "0.1"
		self.kG_Notes = "Mass Transfer Rate Coef.[kmol/m2kPah]"

		# Primary Parameters
		self.Fcons_Value = "1"
		self.Fcons_Notes = "Flow Constraints(1:Yes,0:No)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.1, 0.1, 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ])
		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2110:
	def __init__(self):
		self.ID = 281
		self.Name = "D2110"
		self.Model = "_LLVSEPORB"
		self.Notes = "Flash Drum"

		# General Parameters
		self._NZLHGT_Value = "0"
		self._NZLHGT_Notes = "Specify Nozzle Heights(0:N,1:Y)"

		# Primary Parameters
		self.x1_Value = "(31)"
		self.x1_Notes = "Upper Phase Composition[mol/mol]"

		# Primary Parameters List Value
		self.x1_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.x2_Value = "(31)"
		self.x2_Notes = "Lower Phase Composition[mol/mol]"

		# Primary Parameters List Value
		self.x2_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.y_Value = "(31)"
		self.y_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.y_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Zl1_Value = "0"
		self.Zl1_Notes = "Upper Phase Holdup[kmol]"

		# Primary Parameters
		self.Zl2_Value = "0"
		self.Zl2_Notes = "Lower Phase Holdup[kmol]"

		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vertical,2:Horizontal)"

		# Primary Parameters
		self.DD_Value = "2.2"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "3.2"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.BD_Value = "0.5"
		self.BD_Notes = "Diameter of Boot[m]"

		# Primary Parameters
		self.BH_Value = "1.56"
		self.BH_Notes = "Height of Boot[m]"

		# Primary Parameters
		self.Gw_Value = "7200"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Uv_Value = "40"
		self.Uv_Notes = "Vapor Phase Heat Transfer Coef.[W/m2K]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Vv0_Value = "0"
		self.Vv0_Notes = "Volume of Connected Pipe[m3]"

		# Primary Parameters
		self.et12_Value = "0"
		self.et12_Notes = "Entrainment Ratio(Upper->Lower)[-]"

		# Primary Parameters
		self.et21_Value = "0"
		self.et21_Notes = "Entrainment Ratio(Lower->Upper)[-]"

		# Primary Parameters
		self.Dsdes_Value = "0"
		self.Dsdes_Notes = "Density to Judge Separation[kg/m3]"

		# Primary Parameters
		self.Rdis_Value = "0.05"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.x1est_Value = "(31)"
		self.x1est_Notes = "Estimated Upper Liq. Comp.[mol/mol]"

		# Primary Parameters List Value
		self.x1est_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.kL_Value = "(31)"
		self.kL_Notes = "Mass Transfer Rate Coefficient[1/m2/h]"

		# Primary Parameters List Value
		self.kL_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.kG_Value = "0.1"
		self.kG_Notes = "Mass Transfer Rate Coef.[kmol/m2kPah]"

		# Primary Parameters
		self.Fcons_Value = "1"
		self.Fcons_Notes = "Flow Constraints(1:Yes,0:No)"

		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.LevelsSt_Value = "0.5"
		self.LevelsSt_Notes = "Interface Level Start Value[m]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.x1St_Value = "(31)"
		self.x1St_Notes = "Upper Phase Comp. Start Value[mol/mol]"

		# Primary Parameters List Value
		self.x1St_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.x2St_Value = "(31)"
		self.x2St_Notes = "Lower Phase Comp. Start Value[mol/mol]"

		# Primary Parameters List Value
		self.x2St_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.phiSt_Value = "0.5"
		self.phiSt_Notes = "Upper Phase Ratio Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2201:
	def __init__(self):
		self.ID = 282
		self.Name = "D2201"
		self.Model = "RFLASHD"
		self.Notes = "mix phase PP reactor(only C3H8)"

		# General Parameters
		self._NR_Value = "1"
		self._NR_Notes = "Number of Reactions"

		# General Parameters
		self._NSP_Value = "4"
		self._NSP_Notes = "Number of Reaction Components."

		# General Parameters
		self._USEHF_Value = "0"
		self._USEHF_Notes = "Heat of Reaction(0:Input,1:HOF)"

		# General Parameters
		self._Rtype_Value = "9"
		self._Rtype_Notes = "Reaction Type(1:Std.,9:User)"

		# Primary Parameters
		self.ID_Value = "(4)"
		self.ID_Notes = "Reaction Related Component ID No."

		# Primary Parameters List Value
		self.ID_List_Value = array([1.000e+00, 2.300e+01, 1.565e+03, 4.140e+02])
		# Primary Parameters
		self.St_Value = "(1,4)"
		self.St_Notes = "Stoichiometric Coef.(Reactants:Nega.)"

		# Primary Parameters List Value
		self.St_List_Value = array([[-3.4882e-03, -6.0000e+00, -9.5000e-05,  1.0000e+00]])
		# Primary Parameters
		self.Qr_Value = "(1)"
		self.Qr_Notes = "Heat of Reaction(Endo:Nega.)[kJ/mol]"

		# Primary Parameters List Value
		self.Qr_List_Value = array([528.])
		# Primary Parameters
		self.Ke1_Value = "(1)"
		self.Ke1_Notes = "Reaction Rate Coef.(Frequency Factor)[-]"

		# Primary Parameters List Value
		self.Ke1_List_Value = array([650000.])
		# Primary Parameters
		self.Ke2_Value = "(1)"
		self.Ke2_Notes = "Activation energy[kJ/mol]"

		# Primary Parameters List Value
		self.Ke2_List_Value = array([30.])
		# Primary Parameters
		self.Ke3_Value = "(1)"
		self.Ke3_Notes = "Reaction Rate Coefficient"

		# Primary Parameters List Value
		self.Ke3_List_Value = array([8.49])
		# Primary Parameters
		self.Xe_Value = "(1,4)"
		self.Xe_Notes = "Concentration Exponent"

		# Primary Parameters List Value
		self.Xe_List_Value = array([[0., 1., 1., 0.]])
		# Primary Parameters
		self.Te_Value = "(1)"
		self.Te_Notes = "Temperature Exponent"

		# Primary Parameters List Value
		self.Te_List_Value = array([0.])
		# Primary Parameters
		self.Pe_Value = "(1)"
		self.Pe_Notes = "Pressure Exponent"

		# Primary Parameters List Value
		self.Pe_List_Value = array([0.])
		# Primary Parameters
		self.Ka_Value = "(1,4)"
		self.Ka_Notes = "Component Coefficient a"

		# Primary Parameters List Value
		self.Ka_List_Value = array([[0., 0., 0., 0.]])
		# Primary Parameters
		self.Kb_Value = "(1,4)"
		self.Kb_Notes = "Component Coefficient b"

		# Primary Parameters List Value
		self.Kb_List_Value = array([[0., 0., 0., 0.]])
		# Primary Parameters
		self.Kc_Value = "(1,4)"
		self.Kc_Notes = "Component Coefficient c"

		# Primary Parameters List Value
		self.Kc_List_Value = array([[0., 0., 0., 0.]])
		# Primary Parameters
		self.Kd_Value = "(1,4)"
		self.Kd_Notes = "Component Coefficient d"

		# Primary Parameters List Value
		self.Kd_List_Value = array([[0., 0., 0., 0.]])
		# Primary Parameters
		self.De_Value = "(1)"
		self.De_Notes = "Denominator Exponent"

		# Primary Parameters List Value
		self.De_List_Value = array([0.])
		# Primary Parameters
		self.rfunc_Value = "(100)"
		self.rfunc_Notes = "Reaction Rate Equation"

		# Primary Parameters
		self.Xtype_Value = "(1)"
		self.Xtype_Notes = "Concentration Type(1:mol/mol,2:kmol/m3)"

		# Primary Parameters List Value
		self.Xtype_List_Value = array([1.])
		# Primary Parameters
		self.Rconv_Value = "0"
		self.Rconv_Notes = "Conversion[%]"

		# Primary Parameters
		self.incRconv_Value = "0"
		self.incRconv_Notes = "Component Number to Define Conversion"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.y_Value = "(31)"
		self.y_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.y_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "2.8"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "7.8"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Gw_Value = "10000"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Uv_Value = "40"
		self.Uv_Notes = "Vapor Phase Heat Transfer Coef.[W/m2K]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Vv0_Value = "0"
		self.Vv0_Notes = "Volume of Connected Pipe[m3]"

		# Primary Parameters
		self.Rdis_Value = "0.05"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.kG_Value = "0.3"
		self.kG_Notes = "Mass Transfer Rate Coef.[kmol/m2kPah]"

		# Primary Parameters
		self.Fcons_Value = "1"
		self.Fcons_Notes = "Flow Constraints(1:Yes,0:No)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.1, 0.1, 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ])
		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.excnt_Value = "4"
		self.excnt_Notes = ""

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2201A:
	def __init__(self):
		self.ID = 283
		self.Name = "D2201A"
		self.Model = "_CSEP_L"
		self.Notes = "Component Separator(Liquid Flow)"

		# Primary Parameters
		self.V_Value = "3"
		self.V_Notes = "Vessel Volume[m3]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Temperature[C]"

		# Primary Parameters
		self.rsep2_Value = "(31)"
		self.rsep2_Notes = "Removal Ratio[-]"

		# Primary Parameters List Value
		self.rsep2_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Holdup Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Valp_Value = "0"
		self.Valp_Notes = "Volume Correction Factor[-]"

		# Primary Parameters
		self.Fullop_Value = "0"
		self.Fullop_Notes = "Operation(0:Filling,1:Filled)"

		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.x1St_Value = "(31)"
		self.x1St_Notes = "Composition Start Value Prod.1[mol/mol]"

		# Primary Parameters List Value
		self.x1St_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.x2St_Value = "(31)"
		self.x2St_Notes = "Composition Start Value Prod.2[mol/mol]"

		# Primary Parameters List Value
		self.x2St_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2201BJ:
	def __init__(self):
		self.ID = 284
		self.Name = "D2201BJ"
		self.Model = "_JACKET"
		self.Notes = "Jacket"

		# Primary Parameters
		self.H_Value = "6.1"
		self.H_Notes = "Length of Cylindrical Frame[m]"

		# Primary Parameters
		self.Aj_Value = "69"
		self.Aj_Notes = "Jacket Area[m2]"

		# Primary Parameters
		self.Ujv_Value = "1200"
		self.Ujv_Notes = "Jacket Condensation H. T. Coef.[W/m2K]"

		# Primary Parameters
		self.Ujl_Value = "300"
		self.Ujl_Notes = "Jkt L. Phase Design H. T. Coef.[W/m2K]"

		# Primary Parameters
		self.As1_Value = "0.9106"
		self.As1_Notes = "Cross Section Area Cylindrical Frame[m2]"

		# Primary Parameters
		self.As2_Value = "3"
		self.As2_Notes = "Cross Section Area Bottom Head[m2]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.Hlow_Value = "0.1"
		self.Hlow_Notes = "Height of Jkt Undermirror Zone[m]"

		# Primary Parameters
		self.Ujlalp_Value = "0"
		self.Ujlalp_Notes = "Jkt L. Ph. H. T. Coef. Flow Factor[-]"

		# Primary Parameters
		self.Wdjl_Value = "83000"
		self.Wdjl_Notes = "Jacket Liquid Design Flow Rate[kg/h]"

		# Primary Parameters
		self.Dpdjl_Value = "10"
		self.Dpdjl_Notes = "Jacket Design Pressure Drop[kPa]"

		# Primary Parameters
		self.Ddjl_Value = "1000"
		self.Ddjl_Notes = "Jacket Design Liquid Density[kg/m3]"

		# Primary Parameters
		self.Tj_Value = "30"
		self.Tj_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.Pj_Value = "101.325"
		self.Pj_Notes = "Jacket Pressure[kPa]"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.cmodeSt_Value = "1"
		self.cmodeSt_Notes = "Operation Start Value(1-3)"

		# Primary Parameters
		self.dpj_Value = "10"
		self.dpj_Notes = "Jacket Pressure Drop[kPa]"

		# Primary Parameters
		self.LjSt_Value = "0.5"
		self.LjSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TjSt_Value = "25"
		self.TjSt_Notes = "Liquid Outlet Temperature Start Value[C]"

		# Primary Parameters
		self.PjSt_Value = "101.325"
		self.PjSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.xlSt_Value = "(31)"
		self.xlSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xlSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.freeLj_Value = "0"
		self.freeLj_Notes = "Set Hot Side Level Free(1:Free)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2201H:
	def __init__(self):
		self.ID = 285
		self.Name = "D2201H"
		self.Model = "_HEATXA"
		self.Notes = "Simplified Heater/Cooler"

		# Primary Parameters
		self.TYPE_Value = "1"
		self.TYPE_Notes = "Specification Type(0:T,1:R,2:Q)"

		# Primary Parameters
		self.T_Value = "30"
		self.T_Notes = "Outlet Temperature Set/Calc. Value[C]"

		# Primary Parameters
		self.RV_Value = "1"
		self.RV_Notes = "Outlet Vapor Ratio Set/Calc. Value[-]"

		# Primary Parameters
		self.Q_Value = "0"
		self.Q_Notes = "Heat Load Set/Calc. Value[MJ/h]"

		# Primary Parameters
		self.Wdes_Value = "35000"
		self.Wdes_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters
		self.Ddes_Value = "482"
		self.Ddes_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.Pddes_Value = "0"
		self.Pddes_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.tau_Value = "30"
		self.tau_Notes = "Response Delay Time[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Outlet Temperature Start Value[C]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System 1"

class Block_D2203:
	def __init__(self):
		self.ID = 286
		self.Name = "D2203"
		self.Model = "REACTFB"
		self.Notes = "mix phase PP reactor(only C3H8)"

		# General Parameters
		self._Ndiv_Value = "1"
		self._Ndiv_Notes = "Number of Segments(<=50)"

		# General Parameters
		self._NR_Value = "2"
		self._NR_Notes = "Number of Reactions(<=30)"

		# General Parameters
		self._NSP_Value = "5"
		self._NSP_Notes = "Max.Number of React Component(<=30)"

		# General Parameters
		self._kWdiv_Value = "1"
		self._kWdiv_Notes = "Segmentation of Wall(1:Yes, 0:No)"

		# General Parameters
		self._USEHF_Value = "0"
		self._USEHF_Notes = "Heat of Reaction(0:Input,1:Calc from Hf)"

		# General Parameters
		self._Rtype_Value = "9"
		self._Rtype_Notes = "R.Equation Type(1:Gen,2:Adsorp.,9:User)"

		# General Parameters
		self._Qtype_Value = "0"
		self._Qtype_Notes = "External Unit(0:No,1:Heating,2:Cooling)"

		# General Parameters
		self._NCSMAX_Value = "5"
		self._NCSMAX_Notes = "Max. Num. of Comp. for Comp. Spec."

		# Primary Parameters
		self.D_Value = "1"
		self.D_Notes = "Catalyst Bed Diameter[m]"

		# Primary Parameters
		self.L_Value = "9.19"
		self.L_Notes = "Catalyst Bed Length[m]"

		# Primary Parameters
		self.Ntube_Value = "1"
		self.Ntube_Notes = "Number of Catalyst Bed[-]"

		# Primary Parameters
		self.cc_Value = "1e-007"
		self.cc_Notes = "P. Drop Coef.(dp=cc*f*f)[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.Ww_Value = "6000"
		self.Ww_Notes = "Wall Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Specific Heat of Wall[kJ/kgK]"

		# Primary Parameters
		self.Vt_Value = "7.2"
		self.Vt_Notes = "Volume of Entire Reactor[m3]"

		# Primary Parameters
		self.Ec_Value = "0.9"
		self.Ec_Notes = "Void Ratio of Catalyst Bed[m3/m3]"

		# Primary Parameters
		self.Roc_Value = "500"
		self.Roc_Notes = "Bulk Density of Catalyst[kg/m3]"

		# Primary Parameters
		self.Cpc_Value = "0.84"
		self.Cpc_Notes = "Specific Heat of Catalyst[kJ/kgK]"

		# Primary Parameters
		self.Uw_Value = "600"
		self.Uw_Notes = "Catalyst-Wall Heat Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.Ua_Value = "6"
		self.Ua_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Aa_Value = "0"
		self.Aa_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.QTYPE_Value = "0"
		self.QTYPE_Notes = "External Unit(0:No,1:Heating,2:Cooling)"

		# Primary Parameters
		self.ID_Value = "(5)"
		self.ID_Notes = "Reaction Related Component ID No."

		# Primary Parameters List Value
		self.ID_List_Value = array([1.000e+00, 2.300e+01, 1.565e+03, 4.140e+02, 5.001e+03])
		# Primary Parameters
		self.St_Value = "(2,5)"
		self.St_Notes = "Stoichiometric Coef.(Reactants:Nega.)"

		# Primary Parameters List Value
		self.St_List_Value = array([[-4.47065e-03, -6.00000e+00, -9.50000e-05,  1.00000e+00,
         0.00000e+00],
       [-1.13205e-02, -4.45000e+00,  0.00000e+00, -1.00000e+00,
         1.74167e+00]])
		# Primary Parameters
		self.Qr_Value = "(2)"
		self.Qr_Notes = "Heat of Reaction(Endo:Nega.)[kJ/mol]"

		# Primary Parameters List Value
		self.Qr_List_Value = array([118., 528.])
		# Primary Parameters
		self.Ke1_Value = "(2)"
		self.Ke1_Notes = "Reaction Rate Coef.(Frequency Factor)[-]"

		# Primary Parameters List Value
		self.Ke1_List_Value = array([490000., 490000.])
		# Primary Parameters
		self.Ke2_Value = "(2)"
		self.Ke2_Notes = "Activation energy[kJ/mol]"

		# Primary Parameters List Value
		self.Ke2_List_Value = array([30., 30.])
		# Primary Parameters
		self.Ke3_Value = "(2)"
		self.Ke3_Notes = "Reaction Rate Coefficient"

		# Primary Parameters List Value
		self.Ke3_List_Value = array([19.8, 58.3])
		# Primary Parameters
		self.Xe_Value = "(2,5)"
		self.Xe_Notes = "Concentration Exponent"

		# Primary Parameters List Value
		self.Xe_List_Value = array([[0., 1., 1., 0., 0.],
       [0., 1., 0., 1., 0.]])
		# Primary Parameters
		self.Pe_Value = "(2)"
		self.Pe_Notes = "Pressure Exponent"

		# Primary Parameters List Value
		self.Pe_List_Value = array([0., 0.])
		# Primary Parameters
		self.Te_Value = "(2)"
		self.Te_Notes = "Temperature Exponent"

		# Primary Parameters List Value
		self.Te_List_Value = array([0., 0.])
		# Primary Parameters
		self.Ka_Value = "(2,5)"
		self.Ka_Notes = "Component Coefficient a"

		# Primary Parameters List Value
		self.Ka_List_Value = array([[0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.]])
		# Primary Parameters
		self.Kb_Value = "(2,5)"
		self.Kb_Notes = "Component Coefficient b"

		# Primary Parameters List Value
		self.Kb_List_Value = array([[0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.]])
		# Primary Parameters
		self.Kc_Value = "(2,5)"
		self.Kc_Notes = "Component Coefficient c"

		# Primary Parameters List Value
		self.Kc_List_Value = array([[0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.]])
		# Primary Parameters
		self.Kd_Value = "(2,5)"
		self.Kd_Notes = "Component Coefficient d"

		# Primary Parameters List Value
		self.Kd_List_Value = array([[0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.]])
		# Primary Parameters
		self.De_Value = "(2)"
		self.De_Notes = "Denominator Exponent"

		# Primary Parameters List Value
		self.De_List_Value = array([0., 0.])
		# Primary Parameters
		self.rfunc_Value = "(100)"
		self.rfunc_Notes = "Reaction Rate Equation"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Holdup Pressure[kPa]"

		# Primary Parameters
		self.Tu_Value = "30"
		self.Tu_Notes = "Holdup Temperature[C]"

		# Primary Parameters
		self.Ut_Value = "0.1"
		self.Ut_Notes = "Holdup Heat Loss Time Constant[h]"

		# Primary Parameters
		self.xu_Value = "(31)"
		self.xu_Notes = "Holdup Composition[mol/mol]"

		# Primary Parameters List Value
		self.xu_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.itp_Value = "1"
		self.itp_Notes = "Integration Method(1:Euler,2:Semi-Imp.)"

		# Primary Parameters
		self.idv_Value = "1"
		self.idv_Notes = "Number of Division for Integration"

		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Outlet Temperature Start Value[C]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Product Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Yout_Value = "0.1"
		self.Yout_Notes = "Product Composition Spec Value[mol/mol]"

		# Primary Parameters
		self.incYout_Value = "(5)"
		self.incYout_Notes = "Components for Product Composition Spec"

		# Primary Parameters List Value
		self.incYout_List_Value = array([0., 0., 0., 0., 0.])
		# Primary Parameters
		self.rConv_Value = "0"
		self.rConv_Notes = "Conversion Ratio[-]"

		# Primary Parameters
		self.baseID_Value = "0"
		self.baseID_Notes = "Comp. Number for Conversion Definition"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2203A:
	def __init__(self):
		self.ID = 287
		self.Name = "D2203A"
		self.Model = "_CSEP_L"
		self.Notes = "Component Separator(Liquid Flow)"

		# Primary Parameters
		self.V_Value = "1"
		self.V_Notes = "Vessel Volume[m3]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Temperature[C]"

		# Primary Parameters
		self.rsep2_Value = "(31)"
		self.rsep2_Notes = "Removal Ratio[-]"

		# Primary Parameters List Value
		self.rsep2_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Holdup Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Valp_Value = "0"
		self.Valp_Notes = "Volume Correction Factor[-]"

		# Primary Parameters
		self.Fullop_Value = "0"
		self.Fullop_Notes = "Operation(0:Filling,1:Filled)"

		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.x1St_Value = "(31)"
		self.x1St_Notes = "Composition Start Value Prod.1[mol/mol]"

		# Primary Parameters List Value
		self.x1St_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.x2St_Value = "(31)"
		self.x2St_Notes = "Composition Start Value Prod.2[mol/mol]"

		# Primary Parameters List Value
		self.x2St_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2203B:
	def __init__(self):
		self.ID = 288
		self.Name = "D2203B"
		self.Model = "_LLVSEPORS"
		self.Notes = "mix phase PP reactor(only C3H8)"

		# General Parameters
		self._NZLHGT_Value = "0"
		self._NZLHGT_Notes = "Specify Nozzle Heights(0:N,1:Y)"

		# Primary Parameters
		self.x1_Value = "(31)"
		self.x1_Notes = "Upper Phase Composition[mol/mol]"

		# Primary Parameters List Value
		self.x1_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.x2_Value = "(31)"
		self.x2_Notes = "Lower Phase Composition[mol/mol]"

		# Primary Parameters List Value
		self.x2_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.y_Value = "(31)"
		self.y_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.y_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Zl1_Value = "0"
		self.Zl1_Notes = "Upper Phase Holdup[kmol]"

		# Primary Parameters
		self.Zl2_Value = "0"
		self.Zl2_Notes = "Lower Phase Holdup[kmol]"

		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "2.55"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "9.19"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Height_Value = "0"
		self.Height_Notes = "Height of Discharge Outlet"

		# Primary Parameters
		self.Gw_Value = "10000"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Uv_Value = "400"
		self.Uv_Notes = "Vapor Phase Heat Transfer Coef.[W/m2K]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Vv0_Value = "10"
		self.Vv0_Notes = "Volume of Connected Pipe[m3]"

		# Primary Parameters
		self.et12_Value = "0"
		self.et12_Notes = "Entrainment Ratio(Upper->Lower)[-]"

		# Primary Parameters
		self.et21_Value = "0"
		self.et21_Notes = "Entrainment Ratio(Lower->Upper)[-]"

		# Primary Parameters
		self.Dsdes_Value = "1100"
		self.Dsdes_Notes = "Density to Judge Separation[kg/m3]"

		# Primary Parameters
		self.Rdis_Value = "0.05"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.x1est_Value = "(31)"
		self.x1est_Notes = "Estimated Upper Liq. Comp.[mol/mol]"

		# Primary Parameters List Value
		self.x1est_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.kL_Value = "(31)"
		self.kL_Notes = "Mass Transfer Rate Coefficient[1/m2/h]"

		# Primary Parameters List Value
		self.kL_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.kG_Value = "0.1"
		self.kG_Notes = "Mass Transfer Rate Coef.[kmol/m2kPah]"

		# Primary Parameters
		self.Fcons_Value = "1"
		self.Fcons_Notes = "Flow Constraints(1:Yes,0:No)"

		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.LevelsSt_Value = "0.5"
		self.LevelsSt_Notes = "Interface Level Start Value[m]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.x1St_Value = "(31)"
		self.x1St_Notes = "Upper Phase Comp. Start Value[mol/mol]"

		# Primary Parameters List Value
		self.x1St_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.x2St_Value = "(31)"
		self.x2St_Notes = "Lower Phase Comp. Start Value[mol/mol]"

		# Primary Parameters List Value
		self.x2St_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.phiSt_Value = "0.5"
		self.phiSt_Notes = "Upper Phase Ratio Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2203H:
	def __init__(self):
		self.ID = 289
		self.Name = "D2203H"
		self.Model = "_HEATXA"
		self.Notes = "Simplified Heater/Cooler"

		# Primary Parameters
		self.TYPE_Value = "1"
		self.TYPE_Notes = "Specification Type(0:T,1:R,2:Q)"

		# Primary Parameters
		self.T_Value = "80"
		self.T_Notes = "Outlet Temperature Set/Calc. Value[C]"

		# Primary Parameters
		self.RV_Value = "1"
		self.RV_Notes = "Outlet Vapor Ratio Set/Calc. Value[-]"

		# Primary Parameters
		self.Q_Value = "0"
		self.Q_Notes = "Heat Load Set/Calc. Value[MJ/h]"

		# Primary Parameters
		self.Wdes_Value = "2000"
		self.Wdes_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters
		self.Ddes_Value = "482"
		self.Ddes_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.Pddes_Value = "10"
		self.Pddes_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.tau_Value = "30"
		self.tau_Notes = "Response Delay Time[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Outlet Temperature Start Value[C]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System 1"

class Block_D2203H2:
	def __init__(self):
		self.ID = 290
		self.Name = "D2203H2"
		self.Model = "_HEATXA"
		self.Notes = "Stabilizing Pipe"

		# Primary Parameters
		self.TYPE_Value = "2"
		self.TYPE_Notes = "Specification Type(0:T,1:R,2:Q)"

		# Primary Parameters
		self.T_Value = "73"
		self.T_Notes = "Outlet Temperature Set/Calc. Value[C]"

		# Primary Parameters
		self.RV_Value = "1"
		self.RV_Notes = "Outlet Vapor Ratio Set/Calc. Value[-]"

		# Primary Parameters
		self.Q_Value = "0"
		self.Q_Notes = "Heat Load Set/Calc. Value[MJ/h]"

		# Primary Parameters
		self.Wdes_Value = "137568"
		self.Wdes_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters
		self.Ddes_Value = "480"
		self.Ddes_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.Pddes_Value = "0"
		self.Pddes_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.tau_Value = "30"
		self.tau_Notes = "Response Delay Time[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Outlet Temperature Start Value[C]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System 1"

class Block_D2203H3:
	def __init__(self):
		self.ID = 291
		self.Name = "D2203H3"
		self.Model = "_HEATXA"
		self.Notes = "Stabilizing Pipe"

		# Primary Parameters
		self.TYPE_Value = "0"
		self.TYPE_Notes = "Specification Type(0:T,1:R,2:Q)"

		# Primary Parameters
		self.T_Value = "30"
		self.T_Notes = "Outlet Temperature Set/Calc. Value[C]"

		# Primary Parameters
		self.RV_Value = "1"
		self.RV_Notes = "Outlet Vapor Ratio Set/Calc. Value[-]"

		# Primary Parameters
		self.Q_Value = "0"
		self.Q_Notes = "Heat Load Set/Calc. Value[MJ/h]"

		# Primary Parameters
		self.Wdes_Value = "137568"
		self.Wdes_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters
		self.Ddes_Value = "480"
		self.Ddes_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.Pddes_Value = "0"
		self.Pddes_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.tau_Value = "30"
		self.tau_Notes = "Response Delay Time[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Outlet Temperature Start Value[C]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System 1"

class Block_D2206:
	def __init__(self):
		self.ID = 292
		self.Name = "D2206"
		self.Model = "_FLASHD"
		self.Notes = "Flash Drum"

		# General Parameters
		self._NZLHGT_Value = "0"
		self._NZLHGT_Notes = "Specify Nozzle Heights(0:N,1:Y)"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.y_Value = "(31)"
		self.y_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.y_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "3.2"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "3.395"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Gw_Value = "6800"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Uv_Value = "40"
		self.Uv_Notes = "Vapor Phase Heat Transfer Coef.[W/m2K]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Vv0_Value = "5"
		self.Vv0_Notes = "Volume of Connected Pipe[m3]"

		# Primary Parameters
		self.Rdis_Value = "0.05"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.Lmin_Value = "0.05"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.kG_Value = "0.1"
		self.kG_Notes = "Mass Transfer Rate Coef.[kmol/m2kPah]"

		# Primary Parameters
		self.Fcons_Value = "1"
		self.Fcons_Notes = "Flow Constraints(1:Yes,0:No)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.1, 0.1, 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ])
		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2208:
	def __init__(self):
		self.ID = 293
		self.Name = "D2208"
		self.Model = "_FLASHD"
		self.Notes = "Flash Drum"

		# General Parameters
		self._NZLHGT_Value = "0"
		self._NZLHGT_Notes = "Specify Nozzle Heights(0:N,1:Y)"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.y_Value = "(31)"
		self.y_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.y_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "2.5"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "2.9"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Gw_Value = "9200"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Uv_Value = "40"
		self.Uv_Notes = "Vapor Phase Heat Transfer Coef.[W/m2K]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Vv0_Value = "1"
		self.Vv0_Notes = "Volume of Connected Pipe[m3]"

		# Primary Parameters
		self.Rdis_Value = "0.05"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.Lmin_Value = "0.05"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.kG_Value = "0.1"
		self.kG_Notes = "Mass Transfer Rate Coef.[kmol/m2kPah]"

		# Primary Parameters
		self.Fcons_Value = "1"
		self.Fcons_Notes = "Flow Constraints(1:Yes,0:No)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.1, 0.1, 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ])
		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2210:
	def __init__(self):
		self.ID = 294
		self.Name = "D2210"
		self.Model = "_FLASHE"
		self.Notes = "Flash Drum"

		# General Parameters
		self._NZLHGT_Value = "0"
		self._NZLHGT_Notes = "Specify Nozzle Heights(0:N,1:Y)"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.y_Value = "(31)"
		self.y_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.y_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Temperature[C]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "1.7"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "2.2"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Gw_Value = "5100"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Rdis_Value = "0.05"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.Lmin_Value = "0.05"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.kQe1_Value = "0"
		self.kQe1_Notes = "External Heating Unit Connection(1:Yes)"

		# Primary Parameters
		self.kQe2_Value = "0"
		self.kQe2_Notes = "External Heating Unit Connection(1:Yes)"

		# Primary Parameters
		self.kQe3_Value = "0"
		self.kQe3_Notes = "External Heating Unit Connection(1:Yes)"

		# Primary Parameters
		self.kQe4_Value = "0"
		self.kQe4_Notes = "External Heating Unit Connection(1:Yes)"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.uparme_Value = "(10)"
		self.uparme_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparme_List_Value = array([0.05, 0.01, 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ])
		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2210H:
	def __init__(self):
		self.ID = 295
		self.Name = "D2210H"
		self.Model = "_HXDRUML"
		self.Notes = "Heater for Flash Drum"

		# General Parameters
		self._WCALC_Value = "1"
		self._WCALC_Notes = "Calculation of Wall(1:Yes, 0:No)"

		# General Parameters
		self._QNO_Value = "1"
		self._QNO_Notes = "Connection Number"

		# Primary Parameters
		self.A_Value = "10"
		self.A_Notes = "Heat Transfer Area[m2]"

		# Primary Parameters
		self.Gw_Value = "1000"
		self.Gw_Notes = "Heat Transfer Wall Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "H.Trans. Wall Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.No_Value = "1"
		self.No_Notes = "Connection Number"

		# Primary Parameters
		self.Tw_Value = "30"
		self.Tw_Notes = "Heat Transfer Wall Temp.[C]"

		# Primary Parameters
		self.ULv_Value = "60"
		self.ULv_Notes = "H.T.Coef. at Cold Side Vapor[W/m2K]"

		# Primary Parameters
		self.UL_Value = "1200"
		self.UL_Notes = "H.T.Coef. at Cold Side Liquid[W/m2K]"

		# Primary Parameters
		self.LLhigh_Value = "1"
		self.LLhigh_Notes = "Cold Side 100% H.T.Area Holdup Height[m]"

		# Primary Parameters
		self.LLlow_Value = "0"
		self.LLlow_Notes = "Cold Side 0% H.T.Area Holdup Height[m]"

		# Primary Parameters
		self.QTYPE_Value = "0"
		self.QTYPE_Notes = "External Unit(0:No,1:Heating,2:Cooling)"

class Block_D2213:
	def __init__(self):
		self.ID = 296
		self.Name = "D2213"
		self.Model = "_FLASHD"
		self.Notes = "Flash Drum"

		# General Parameters
		self._NZLHGT_Value = "0"
		self._NZLHGT_Notes = "Specify Nozzle Heights(0:N,1:Y)"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.y_Value = "(31)"
		self.y_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.y_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Temp_Value = "35"
		self.Temp_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "0.2372"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "0.8512"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Gw_Value = "1000"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Uv_Value = "40"
		self.Uv_Notes = "Vapor Phase Heat Transfer Coef.[W/m2K]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Vv0_Value = "0"
		self.Vv0_Notes = "Volume of Connected Pipe[m3]"

		# Primary Parameters
		self.Rdis_Value = "0.05"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.kG_Value = "0.1"
		self.kG_Notes = "Mass Transfer Rate Coef.[kmol/m2kPah]"

		# Primary Parameters
		self.Fcons_Value = "1"
		self.Fcons_Notes = "Flow Constraints(1:Yes,0:No)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.1, 0.1, 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ])
		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2214:
	def __init__(self):
		self.ID = 297
		self.Name = "D2214"
		self.Model = "TANK_GS1"
		self.Notes = "Gas Tank(Pressurized)"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.P_Value = "101.325"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.T_Value = "30"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.V_Value = "1"
		self.V_Notes = "Volume[m3]"

		# Primary Parameters
		self.TYPE_Value = "1"
		self.TYPE_Notes = "Calculation Type(0:large 1:small)"

		# Primary Parameters
		self.Gw_Value = "175"
		self.Gw_Notes = "Weight of Tank Body[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Specific Heat of Tank Body[kJ/kgK]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.05, 0.01, 0.  , 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ])
		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2215:
	def __init__(self):
		self.ID = 298
		self.Name = "D2215"
		self.Model = "_FLASHD"
		self.Notes = "Flash Drum"

		# General Parameters
		self._NZLHGT_Value = "0"
		self._NZLHGT_Notes = "Specify Nozzle Heights(0:N,1:Y)"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.y_Value = "(31)"
		self.y_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.y_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "0.55"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "1.853"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Gw_Value = "1000"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Uv_Value = "40"
		self.Uv_Notes = "Vapor Phase Heat Transfer Coef.[W/m2K]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Vv0_Value = "2"
		self.Vv0_Notes = "Volume of Connected Pipe[m3]"

		# Primary Parameters
		self.Rdis_Value = "0.05"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.Lmin_Value = "0.05"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.kG_Value = "0.1"
		self.kG_Notes = "Mass Transfer Rate Coef.[kmol/m2kPah]"

		# Primary Parameters
		self.Fcons_Value = "1"
		self.Fcons_Notes = "Flow Constraints(1:Yes,0:No)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.1, 0.1, 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ])
		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2216:
	def __init__(self):
		self.ID = 299
		self.Name = "D2216"
		self.Model = "_FLASHD"
		self.Notes = "Flash Drum"

		# General Parameters
		self._NZLHGT_Value = "0"
		self._NZLHGT_Notes = "Specify Nozzle Heights(0:N,1:Y)"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.y_Value = "(31)"
		self.y_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.y_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "0.45"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "1.763"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Gw_Value = "1000"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Uv_Value = "40"
		self.Uv_Notes = "Vapor Phase Heat Transfer Coef.[W/m2K]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Vv0_Value = "2"
		self.Vv0_Notes = "Volume of Connected Pipe[m3]"

		# Primary Parameters
		self.Rdis_Value = "0.05"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.Lmin_Value = "0.05"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.kG_Value = "0.1"
		self.kG_Notes = "Mass Transfer Rate Coef.[kmol/m2kPah]"

		# Primary Parameters
		self.Fcons_Value = "1"
		self.Fcons_Notes = "Flow Constraints(1:Yes,0:No)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.1, 0.1, 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ])
		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2218:
	def __init__(self):
		self.ID = 300
		self.Name = "D2218"
		self.Model = "TANK_GS1"
		self.Notes = "Gas Tank(Pressurized)"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.P_Value = "101.325"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.T_Value = "30"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.V_Value = "1.35"
		self.V_Notes = "Volume[m3]"

		# Primary Parameters
		self.TYPE_Value = "1"
		self.TYPE_Notes = "Calculation Type(0:large 1:small)"

		# Primary Parameters
		self.Gw_Value = "210"
		self.Gw_Notes = "Weight of Tank Body[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Specific Heat of Tank Body[kJ/kgK]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.05, 0.01, 0.  , 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ])
		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2221:
	def __init__(self):
		self.ID = 301
		self.Name = "D2221"
		self.Model = "_FLASHD"
		self.Notes = "Flash Drum"

		# General Parameters
		self._NZLHGT_Value = "0"
		self._NZLHGT_Notes = "Specify Nozzle Heights(0:N,1:Y)"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.y_Value = "(31)"
		self.y_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.y_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "2"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "1"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Gw_Value = "6000"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Uv_Value = "400"
		self.Uv_Notes = "Vapor Phase Heat Transfer Coef.[W/m2K]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Vv0_Value = "3"
		self.Vv0_Notes = "Volume of Connected Pipe[m3]"

		# Primary Parameters
		self.Rdis_Value = "0.05"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.Lmin_Value = "0.01"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.kG_Value = "0.1"
		self.kG_Notes = "Mass Transfer Rate Coef.[kmol/m2kPah]"

		# Primary Parameters
		self.Fcons_Value = "1"
		self.Fcons_Notes = "Flow Constraints(1:Yes,0:No)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.1, 0.1, 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ])
		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2223:
	def __init__(self):
		self.ID = 302
		self.Name = "D2223"
		self.Model = "_FLASHD"
		self.Notes = "Flash Drum"

		# General Parameters
		self._NZLHGT_Value = "0"
		self._NZLHGT_Notes = "Specify Nozzle Heights(0:N,1:Y)"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.y_Value = "(31)"
		self.y_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.y_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "0.9"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "1.2"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Gw_Value = "1000"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Uv_Value = "40"
		self.Uv_Notes = "Vapor Phase Heat Transfer Coef.[W/m2K]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Vv0_Value = "0"
		self.Vv0_Notes = "Volume of Connected Pipe[m3]"

		# Primary Parameters
		self.Rdis_Value = "0.05"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.kG_Value = "0.1"
		self.kG_Notes = "Mass Transfer Rate Coef.[kmol/m2kPah]"

		# Primary Parameters
		self.Fcons_Value = "1"
		self.Fcons_Notes = "Flow Constraints(1:Yes,0:No)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.1, 0.1, 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ])
		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2501:
	def __init__(self):
		self.ID = 303
		self.Name = "D2501"
		self.Model = "TANK_L1"
		self.Notes = "Flash Drum"

		# Primary Parameters
		self.u_Value = "(31)"
		self.u_Notes = "Molar Holdup[kmol]"

		# Primary Parameters List Value
		self.u_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.T_Value = "30"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.A_Value = "2.1025"
		self.A_Notes = "Cross Section Area[m2]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.Lover_Value = "12"
		self.Lover_Notes = "Overflow Height[m]"

		# Primary Parameters
		self.Fover_Value = "10000"
		self.Fover_Notes = "Overflow Rate[kg/h]"

		# Primary Parameters
		self.calFover_Value = "1"
		self.calFover_Notes = "Overflow Type(0:Const 1:Calc)"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2502:
	def __init__(self):
		self.ID = 304
		self.Name = "D2502"
		self.Model = "TANK_L1"
		self.Notes = "Flash Drum"

		# Primary Parameters
		self.u_Value = "(31)"
		self.u_Notes = "Molar Holdup[kmol]"

		# Primary Parameters List Value
		self.u_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.T_Value = "30"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.A_Value = "3.7994"
		self.A_Notes = "Cross Section Area[m2]"

		# Primary Parameters
		self.Lmin_Value = "0.05"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.Lover_Value = "2.7"
		self.Lover_Notes = "Overflow Height[m]"

		# Primary Parameters
		self.Fover_Value = "10000"
		self.Fover_Notes = "Overflow Rate[kg/h]"

		# Primary Parameters
		self.calFover_Value = "1"
		self.calFover_Notes = "Overflow Type(0:Const 1:Calc)"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2503:
	def __init__(self):
		self.ID = 305
		self.Name = "D2503"
		self.Model = "_FLASHD"
		self.Notes = "Flash Drum"

		# General Parameters
		self._NZLHGT_Value = "0"
		self._NZLHGT_Notes = "Specify Nozzle Heights(0:N,1:Y)"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.y_Value = "(31)"
		self.y_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.y_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "0.8"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "1.45"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Gw_Value = "1100"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Uv_Value = "40"
		self.Uv_Notes = "Vapor Phase Heat Transfer Coef.[W/m2K]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Vv0_Value = "0"
		self.Vv0_Notes = "Volume of Connected Pipe[m3]"

		# Primary Parameters
		self.Rdis_Value = "0.05"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.kG_Value = "0.1"
		self.kG_Notes = "Mass Transfer Rate Coef.[kmol/m2kPah]"

		# Primary Parameters
		self.Fcons_Value = "1"
		self.Fcons_Notes = "Flow Constraints(1:Yes,0:No)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.1, 0.1, 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ])
		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2503J:
	def __init__(self):
		self.ID = 306
		self.Name = "D2503J"
		self.Model = "_JACKET"
		self.Notes = "Jacket"

		# Primary Parameters
		self.H_Value = "1.83"
		self.H_Notes = "Length of Cylindrical Frame[m]"

		# Primary Parameters
		self.Aj_Value = "7.47"
		self.Aj_Notes = "Jacket Area[m2]"

		# Primary Parameters
		self.Ujv_Value = "300"
		self.Ujv_Notes = "Jacket Condensation H. T. Coef.[W/m2K]"

		# Primary Parameters
		self.Ujl_Value = "136"
		self.Ujl_Notes = "Jkt L. Phase Design H. T. Coef.[W/m2K]"

		# Primary Parameters
		self.As1_Value = "0.212"
		self.As1_Notes = "Cross Section Area Cylindrical Frame[m2]"

		# Primary Parameters
		self.As2_Value = "1"
		self.As2_Notes = "Cross Section Area Bottom Head[m2]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.Hlow_Value = "0.05"
		self.Hlow_Notes = "Height of Jkt Undermirror Zone[m]"

		# Primary Parameters
		self.Ujlalp_Value = "0"
		self.Ujlalp_Notes = "Jkt L. Ph. H. T. Coef. Flow Factor[-]"

		# Primary Parameters
		self.Wdjl_Value = "10600"
		self.Wdjl_Notes = "Jacket Liquid Design Flow Rate[kg/h]"

		# Primary Parameters
		self.Dpdjl_Value = "10"
		self.Dpdjl_Notes = "Jacket Design Pressure Drop[kPa]"

		# Primary Parameters
		self.Ddjl_Value = "1000"
		self.Ddjl_Notes = "Jacket Design Liquid Density[kg/m3]"

		# Primary Parameters
		self.Tj_Value = "30"
		self.Tj_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.Pj_Value = "101.325"
		self.Pj_Notes = "Jacket Pressure[kPa]"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.cmodeSt_Value = "1"
		self.cmodeSt_Notes = "Operation Start Value(1-3)"

		# Primary Parameters
		self.dpj_Value = "10"
		self.dpj_Notes = "Jacket Pressure Drop[kPa]"

		# Primary Parameters
		self.LjSt_Value = "0.5"
		self.LjSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TjSt_Value = "25"
		self.TjSt_Notes = "Liquid Outlet Temperature Start Value[C]"

		# Primary Parameters
		self.PjSt_Value = "101.325"
		self.PjSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.xlSt_Value = "(31)"
		self.xlSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xlSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.freeLj_Value = "0"
		self.freeLj_Notes = "Set Hot Side Level Free(1:Free)"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_D2901A:
	def __init__(self):
		self.ID = 307
		self.Name = "D2901A"
		self.Model = "_FLASHD"
		self.Notes = "Flash Drum"

		# General Parameters
		self._NZLHGT_Value = "0"
		self._NZLHGT_Notes = "Specify Nozzle Heights(0:N,1:Y)"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.y_Value = "(31)"
		self.y_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.y_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "1.7"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "3.4"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Gw_Value = "3500"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Uv_Value = "40"
		self.Uv_Notes = "Vapor Phase Heat Transfer Coef.[W/m2K]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Vv0_Value = "5"
		self.Vv0_Notes = "Volume of Connected Pipe[m3]"

		# Primary Parameters
		self.Rdis_Value = "0.05"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.kG_Value = "0.1"
		self.kG_Notes = "Mass Transfer Rate Coef.[kmol/m2kPah]"

		# Primary Parameters
		self.Fcons_Value = "1"
		self.Fcons_Notes = "Flow Constraints(1:Yes,0:No)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.1, 0.1, 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ])
		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2901AH:
	def __init__(self):
		self.ID = 308
		self.Name = "D2901AH"
		self.Model = "HEATXBH"
		self.Notes = "General-Purpose Hot Side"

		# General Parameters
		self._NB_Value = "1"
		self._NB_Notes = "Number of Segments"

		# General Parameters
		self._WCALC_Value = "1"
		self._WCALC_Notes = "Calculation of Wall(1:Yes, 0:No)"

		# General Parameters
		self._kWdiv_Value = "1"
		self._kWdiv_Notes = "Segmentation of Wall(1:Yes, 0:No)"

		# Primary Parameters
		self.A_Value = "5"
		self.A_Notes = "Heat Transfer Area[m2]"

		# Primary Parameters
		self.Gw_Value = "200"
		self.Gw_Notes = "Heat Transfer Wall Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "H.Trans. Wall Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aair_Value = "0"
		self.Aair_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uair_Value = "6"
		self.Uair_Notes = "Heat Trans. Coef. for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Tw_Value = "(1)"
		self.Tw_Notes = "Heat Transfer Wall Temp.[C]"

		# Primary Parameters List Value
		self.Tw_List_Value = array([30.])
		# Primary Parameters
		self.UH_Value = "600"
		self.UH_Notes = "Hot Side Heat Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.UHalp_Value = "0"
		self.UHalp_Notes = "Flow Exponent for Hot Side H.T. Coef.[-]"

		# Primary Parameters
		self.tlagH_Value = "0"
		self.tlagH_Notes = "H. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WHdes_Value = "500"
		self.WHdes_Notes = "Hot Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DHdes_Value = "2.01"
		self.DHdes_Notes = "Hot Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdHdes_Value = "10"
		self.PdHdes_Notes = "Hot Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.THSt_Value = "25"
		self.THSt_Notes = "Hot Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.PdH_Value = "10"
		self.PdH_Notes = "Hot Side Pressure Drop[kPa]"

		# Primary Parameters
		self.Tmin_Value = "25"
		self.Tmin_Notes = "Min. Wall Temperature[C]"

		# Primary Parameters
		self.QTYPE_Value = "0"
		self.QTYPE_Notes = "External Unit(0:No,1:Heating,2:Cooling)"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No.: Hot Side"

class Block_D2901B:
	def __init__(self):
		self.ID = 309
		self.Name = "D2901B"
		self.Model = "_FLASHD"
		self.Notes = "Flash Drum"

		# General Parameters
		self._NZLHGT_Value = "0"
		self._NZLHGT_Notes = "Specify Nozzle Heights(0:N,1:Y)"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.y_Value = "(31)"
		self.y_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.y_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "1.2"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "2.4"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Gw_Value = "1341"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Uv_Value = "40"
		self.Uv_Notes = "Vapor Phase Heat Transfer Coef.[W/m2K]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Vv0_Value = "5"
		self.Vv0_Notes = "Volume of Connected Pipe[m3]"

		# Primary Parameters
		self.Rdis_Value = "0.05"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.kG_Value = "0.1"
		self.kG_Notes = "Mass Transfer Rate Coef.[kmol/m2kPah]"

		# Primary Parameters
		self.Fcons_Value = "1"
		self.Fcons_Notes = "Flow Constraints(1:Yes,0:No)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.1, 0.1, 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ])
		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2901BH:
	def __init__(self):
		self.ID = 310
		self.Name = "D2901BH"
		self.Model = "HEATXBH"
		self.Notes = "General-Purpose Hot Side"

		# General Parameters
		self._NB_Value = "1"
		self._NB_Notes = "Number of Segments"

		# General Parameters
		self._WCALC_Value = "1"
		self._WCALC_Notes = "Calculation of Wall(1:Yes, 0:No)"

		# General Parameters
		self._kWdiv_Value = "1"
		self._kWdiv_Notes = "Segmentation of Wall(1:Yes, 0:No)"

		# Primary Parameters
		self.A_Value = "5"
		self.A_Notes = "Heat Transfer Area[m2]"

		# Primary Parameters
		self.Gw_Value = "500"
		self.Gw_Notes = "Heat Transfer Wall Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "H.Trans. Wall Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aair_Value = "0"
		self.Aair_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uair_Value = "6"
		self.Uair_Notes = "Heat Trans. Coef. for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Tw_Value = "(1)"
		self.Tw_Notes = "Heat Transfer Wall Temp.[C]"

		# Primary Parameters List Value
		self.Tw_List_Value = array([30.])
		# Primary Parameters
		self.UH_Value = "600"
		self.UH_Notes = "Hot Side Heat Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.UHalp_Value = "0"
		self.UHalp_Notes = "Flow Exponent for Hot Side H.T. Coef.[-]"

		# Primary Parameters
		self.tlagH_Value = "0"
		self.tlagH_Notes = "H. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WHdes_Value = "200"
		self.WHdes_Notes = "Hot Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DHdes_Value = "2.01"
		self.DHdes_Notes = "Hot Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdHdes_Value = "10"
		self.PdHdes_Notes = "Hot Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.THSt_Value = "25"
		self.THSt_Notes = "Hot Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.PdH_Value = "10"
		self.PdH_Notes = "Hot Side Pressure Drop[kPa]"

		# Primary Parameters
		self.Tmin_Value = "25"
		self.Tmin_Notes = "Min. Wall Temperature[C]"

		# Primary Parameters
		self.QTYPE_Value = "0"
		self.QTYPE_Notes = "External Unit(0:No,1:Heating,2:Cooling)"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No.: Hot Side"

class Block_D2902:
	def __init__(self):
		self.ID = 311
		self.Name = "D2902"
		self.Model = "_FLASHD"
		self.Notes = "Flash Drum"

		# General Parameters
		self._NZLHGT_Value = "0"
		self._NZLHGT_Notes = "Specify Nozzle Heights(0:N,1:Y)"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.y_Value = "(31)"
		self.y_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.y_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "1.5"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "1.5"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Gw_Value = "960"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Uv_Value = "40"
		self.Uv_Notes = "Vapor Phase Heat Transfer Coef.[W/m2K]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Vv0_Value = "0"
		self.Vv0_Notes = "Volume of Connected Pipe[m3]"

		# Primary Parameters
		self.Rdis_Value = "0.05"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.kG_Value = "0.1"
		self.kG_Notes = "Mass Transfer Rate Coef.[kmol/m2kPah]"

		# Primary Parameters
		self.Fcons_Value = "1"
		self.Fcons_Notes = "Flow Constraints(1:Yes,0:No)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.1, 0.1, 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ])
		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2903:
	def __init__(self):
		self.ID = 312
		self.Name = "D2903"
		self.Model = "_FLASHD"
		self.Notes = "Flash Drum"

		# General Parameters
		self._NZLHGT_Value = "0"
		self._NZLHGT_Notes = "Specify Nozzle Heights(0:N,1:Y)"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.y_Value = "(31)"
		self.y_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.y_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "0.9"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "1.3"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Gw_Value = "570"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Uv_Value = "40"
		self.Uv_Notes = "Vapor Phase Heat Transfer Coef.[W/m2K]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Vv0_Value = "0"
		self.Vv0_Notes = "Volume of Connected Pipe[m3]"

		# Primary Parameters
		self.Rdis_Value = "0.05"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.Lmin_Value = "0.01"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.kG_Value = "0.1"
		self.kG_Notes = "Mass Transfer Rate Coef.[kmol/m2kPah]"

		# Primary Parameters
		self.Fcons_Value = "1"
		self.Fcons_Notes = "Flow Constraints(1:Yes,0:No)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.1, 0.1, 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ])
		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2911:
	def __init__(self):
		self.ID = 313
		self.Name = "D2911"
		self.Model = "_FLASHD"
		self.Notes = "Flash Drum"

		# General Parameters
		self._NZLHGT_Value = "0"
		self._NZLHGT_Notes = "Specify Nozzle Heights(0:N,1:Y)"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.y_Value = "(31)"
		self.y_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.y_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "1.6"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "2.5"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Gw_Value = "1600"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Uv_Value = "40"
		self.Uv_Notes = "Vapor Phase Heat Transfer Coef.[W/m2K]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Vv0_Value = "0"
		self.Vv0_Notes = "Volume of Connected Pipe[m3]"

		# Primary Parameters
		self.Rdis_Value = "0.05"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.kG_Value = "0.1"
		self.kG_Notes = "Mass Transfer Rate Coef.[kmol/m2kPah]"

		# Primary Parameters
		self.Fcons_Value = "1"
		self.Fcons_Notes = "Flow Constraints(1:Yes,0:No)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.1, 0.1, 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ])
		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_D2921:
	def __init__(self):
		self.ID = 314
		self.Name = "D2921"
		self.Model = "_FLASHD"
		self.Notes = "Flash Drum"

		# General Parameters
		self._NZLHGT_Value = "0"
		self._NZLHGT_Notes = "Specify Nozzle Heights(0:N,1:Y)"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.y_Value = "(31)"
		self.y_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.y_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "1.6"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "2.5"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Gw_Value = "1600"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Uv_Value = "40"
		self.Uv_Notes = "Vapor Phase Heat Transfer Coef.[W/m2K]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Vv0_Value = "3"
		self.Vv0_Notes = "Volume of Connected Pipe[m3]"

		# Primary Parameters
		self.Rdis_Value = "0.05"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.Lmin_Value = "0.05"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.kG_Value = "0.1"
		self.kG_Notes = "Mass Transfer Rate Coef.[kmol/m2kPah]"

		# Primary Parameters
		self.Fcons_Value = "1"
		self.Fcons_Notes = "Flow Constraints(1:Yes,0:No)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.1, 0.1, 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ])
		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2922:
	def __init__(self):
		self.ID = 315
		self.Name = "D2922"
		self.Model = "_FLASHD"
		self.Notes = "Flash Drum"

		# General Parameters
		self._NZLHGT_Value = "0"
		self._NZLHGT_Notes = "Specify Nozzle Heights(0:N,1:Y)"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.y_Value = "(31)"
		self.y_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.y_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "1.2"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "1.9"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Gw_Value = "3000"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Uv_Value = "40"
		self.Uv_Notes = "Vapor Phase Heat Transfer Coef.[W/m2K]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Vv0_Value = "3"
		self.Vv0_Notes = "Volume of Connected Pipe[m3]"

		# Primary Parameters
		self.Rdis_Value = "0.05"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.kG_Value = "0.1"
		self.kG_Notes = "Mass Transfer Rate Coef.[kmol/m2kPah]"

		# Primary Parameters
		self.Fcons_Value = "1"
		self.Fcons_Notes = "Flow Constraints(1:Yes,0:No)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.1, 0.1, 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ])
		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2923:
	def __init__(self):
		self.ID = 316
		self.Name = "D2923"
		self.Model = "_FLASHD"
		self.Notes = "Flash Drum"

		# General Parameters
		self._NZLHGT_Value = "0"
		self._NZLHGT_Notes = "Specify Nozzle Heights(0:N,1:Y)"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.y_Value = "(31)"
		self.y_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.y_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "1"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "1.9"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Gw_Value = "2700"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Uv_Value = "40"
		self.Uv_Notes = "Vapor Phase Heat Transfer Coef.[W/m2K]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Vv0_Value = "3"
		self.Vv0_Notes = "Volume of Connected Pipe[m3]"

		# Primary Parameters
		self.Rdis_Value = "0.05"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.kG_Value = "0.1"
		self.kG_Notes = "Mass Transfer Rate Coef.[kmol/m2kPah]"

		# Primary Parameters
		self.Fcons_Value = "1"
		self.Fcons_Notes = "Flow Constraints(1:Yes,0:No)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.1, 0.1, 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ])
		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2931:
	def __init__(self):
		self.ID = 317
		self.Name = "D2931"
		self.Model = "_FLASHD"
		self.Notes = "Flash Drum"

		# General Parameters
		self._NZLHGT_Value = "0"
		self._NZLHGT_Notes = "Specify Nozzle Heights(0:N,1:Y)"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.y_Value = "(31)"
		self.y_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.y_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "0.8"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "1.2"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Gw_Value = "1800"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Uv_Value = "40"
		self.Uv_Notes = "Vapor Phase Heat Transfer Coef.[W/m2K]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Vv0_Value = "0"
		self.Vv0_Notes = "Volume of Connected Pipe[m3]"

		# Primary Parameters
		self.Rdis_Value = "0.05"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.Lmin_Value = "0.05"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.kG_Value = "0.1"
		self.kG_Notes = "Mass Transfer Rate Coef.[kmol/m2kPah]"

		# Primary Parameters
		self.Fcons_Value = "1"
		self.Fcons_Notes = "Flow Constraints(1:Yes,0:No)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.1, 0.1, 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ])
		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2932:
	def __init__(self):
		self.ID = 318
		self.Name = "D2932"
		self.Model = "_FLASHD"
		self.Notes = "Flash Drum"

		# General Parameters
		self._NZLHGT_Value = "0"
		self._NZLHGT_Notes = "Specify Nozzle Heights(0:N,1:Y)"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.y_Value = "(31)"
		self.y_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.y_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "0.8"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "1.4"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Gw_Value = "1800"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Uv_Value = "40"
		self.Uv_Notes = "Vapor Phase Heat Transfer Coef.[W/m2K]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Vv0_Value = "1"
		self.Vv0_Notes = "Volume of Connected Pipe[m3]"

		# Primary Parameters
		self.Rdis_Value = "0.05"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.Lmin_Value = "0.05"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.kG_Value = "0.1"
		self.kG_Notes = "Mass Transfer Rate Coef.[kmol/m2kPah]"

		# Primary Parameters
		self.Fcons_Value = "1"
		self.Fcons_Notes = "Flow Constraints(1:Yes,0:No)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.1, 0.1, 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ])
		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2941:
	def __init__(self):
		self.ID = 319
		self.Name = "D2941"
		self.Model = "TANK_LS1"
		self.Notes = "Flash Drum"

		# General Parameters
		self._TYPE_Value = "0"
		self._TYPE_Notes = "Liq. Level Calc. Type(0:C.Sec.,1:Shape)"

		# Primary Parameters
		self.u_Value = "(31)"
		self.u_Notes = "Molar Holdup[kmol]"

		# Primary Parameters List Value
		self.u_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.T_Value = "30"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.A_Value = "0.3542"
		self.A_Notes = "Cross Section Area[m2]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_D2942:
	def __init__(self):
		self.ID = 320
		self.Name = "D2942"
		self.Model = "TANK_L1"
		self.Notes = "Flash Drum"

		# Primary Parameters
		self.u_Value = "(31)"
		self.u_Notes = "Molar Holdup[kmol]"

		# Primary Parameters List Value
		self.u_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.T_Value = "30"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.A_Value = "2.6962"
		self.A_Notes = "Cross Section Area[m2]"

		# Primary Parameters
		self.Lmin_Value = "0.05"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.Lover_Value = "2"
		self.Lover_Notes = "Overflow Height[m]"

		# Primary Parameters
		self.Fover_Value = "1000"
		self.Fover_Notes = "Overflow Rate[kg/h]"

		# Primary Parameters
		self.calFover_Value = "1"
		self.calFover_Notes = "Overflow Type(0:Const 1:Calc)"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_DM2101:
	def __init__(self):
		self.ID = 321
		self.Name = "DM2101"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_DM2102:
	def __init__(self):
		self.ID = 322
		self.Name = "DM2102"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_DM2103:
	def __init__(self):
		self.ID = 323
		self.Name = "DM2103"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_DM2201:
	def __init__(self):
		self.ID = 324
		self.Name = "DM2201"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_DM2203:
	def __init__(self):
		self.ID = 325
		self.Name = "DM2203"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_DT2201:
	def __init__(self):
		self.ID = 326
		self.Name = "DT2201"
		self.Model = "TRANSDU"
		self.Notes = "Density Meter(for Units)"

		# Primary Parameters
		self.Dl_Value = "0"
		self.Dl_Notes = "L.Limit of Density Meas.(in ind. unit)"

		# Primary Parameters
		self.Dh_Value = "1000"
		self.Dh_Notes = "U.Limit of Density Meas.(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit(1:kmol/m3,2:kg/m3)"

		# Primary Parameters
		self.Dfail_Value = "0"
		self.Dfail_Notes = "Indicated Dens. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.phase_Value = "1"
		self.phase_Notes = "Phase to Measure(1:Liquid,2:Vapor)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_DT2203:
	def __init__(self):
		self.ID = 327
		self.Name = "DT2203"
		self.Model = "TRANSDU"
		self.Notes = "Density Meter(for Units)"

		# Primary Parameters
		self.Dl_Value = "0"
		self.Dl_Notes = "L.Limit of Density Meas.(in ind. unit)"

		# Primary Parameters
		self.Dh_Value = "1000"
		self.Dh_Notes = "U.Limit of Density Meas.(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit(1:kmol/m3,2:kg/m3)"

		# Primary Parameters
		self.Dfail_Value = "0"
		self.Dfail_Notes = "Indicated Dens. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "0.67"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.phase_Value = "1"
		self.phase_Notes = "Phase to Measure(1:Liquid,2:Vapor)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_DT2301:
	def __init__(self):
		self.ID = 328
		self.Name = "DT2301"
		self.Model = "TRANSDU"
		self.Notes = "Density Meter(for Units)"

		# Primary Parameters
		self.Dl_Value = "0"
		self.Dl_Notes = "L.Limit of Density Meas.(in ind. unit)"

		# Primary Parameters
		self.Dh_Value = "1000"
		self.Dh_Notes = "U.Limit of Density Meas.(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit(1:kmol/m3,2:kg/m3)"

		# Primary Parameters
		self.Dfail_Value = "0"
		self.Dfail_Notes = "Indicated Dens. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "0.67"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.phase_Value = "1"
		self.phase_Notes = "Phase to Measure(1:Liquid,2:Vapor)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_DV2300201:
	def __init__(self):
		self.ID = 329
		self.Name = "DV2300201"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "200"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_DV2300202:
	def __init__(self):
		self.ID = 330
		self.Name = "DV2300202"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "200"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_E2003:
	def __init__(self):
		self.ID = 331
		self.Name = "E2003"
		self.Model = "HEATXB"
		self.Notes = "General-Purpose Heat Exchanger"

		# General Parameters
		self._NB_Value = "5"
		self._NB_Notes = "Number of segments"

		# Primary Parameters
		self.TYPE_Value = "1"
		self.TYPE_Notes = "0: Cocurrent 1:Countercurrent"

		# Primary Parameters
		self.A_Value = "19.3"
		self.A_Notes = "Heat Transfer Area[m2]"

		# Primary Parameters
		self.Gw_Value = "1275"
		self.Gw_Notes = "Heat Transfer Wall Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "H.Trans. Wall Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aair_Value = "0"
		self.Aair_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uair_Value = "6"
		self.Uair_Notes = "Heat Trans. Coef. for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Tw_Value = "(5)"
		self.Tw_Notes = "Heat Transfer Wall Temp.[C]"

		# Primary Parameters List Value
		self.Tw_List_Value = array([30., 30., 30., 30., 30.])
		# Primary Parameters
		self.UH_Value = "819.879"
		self.UH_Notes = "Hot Side Heat Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.UHalp_Value = "0"
		self.UHalp_Notes = "Flow Exponent for Hot Side H.T. Coef.[-]"

		# Primary Parameters
		self.tlagH_Value = "0"
		self.tlagH_Notes = "H. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WHdes_Value = "5847"
		self.WHdes_Notes = "Hot Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DHdes_Value = "460"
		self.DHdes_Notes = "Hot Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdHdes_Value = "5.88399"
		self.PdHdes_Notes = "Hot Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.UL_Value = "865.24"
		self.UL_Notes = "Cold Side H.Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.ULalp_Value = "0"
		self.ULalp_Notes = "Cold Side H.T.Coef. Flow Factor"

		# Primary Parameters
		self.tlagL_Value = "0"
		self.tlagL_Notes = "C. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WLdes_Value = "5853"
		self.WLdes_Notes = "Cold Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DLdes_Value = "496"
		self.DLdes_Notes = "Cold Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdLdes_Value = "0.980665"
		self.PdLdes_Notes = "Cold Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No.: Hot Side"

		# Primary Parameters
		self.s2_Value = "1"
		self.s2_Notes = "System No.: Cold Side"

		# Primary Parameters
		self.THSt_Value = "25"
		self.THSt_Notes = "Hot Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.TLSt_Value = "25"
		self.TLSt_Notes = "Cold Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.PdH_Value = "10"
		self.PdH_Notes = "Hot Side Pressure Drop[kPa]"

		# Primary Parameters
		self.PdL_Value = "10"
		self.PdL_Notes = "Cold Side Pressure Drop[kPa]"

class Block_E2004A:
	def __init__(self):
		self.ID = 332
		self.Name = "E2004A"
		self.Model = "HEATXB"
		self.Notes = "General-Purpose Heat Exchanger"

		# General Parameters
		self._NB_Value = "5"
		self._NB_Notes = "Number of segments"

		# Primary Parameters
		self.TYPE_Value = "1"
		self.TYPE_Notes = "0: Cocurrent 1:Countercurrent"

		# Primary Parameters
		self.A_Value = "4.5"
		self.A_Notes = "Heat Transfer Area[m2]"

		# Primary Parameters
		self.Gw_Value = "800"
		self.Gw_Notes = "Heat Transfer Wall Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "H.Trans. Wall Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aair_Value = "0"
		self.Aair_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uair_Value = "6"
		self.Uair_Notes = "Heat Trans. Coef. for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Tw_Value = "(5)"
		self.Tw_Notes = "Heat Transfer Wall Temp.[C]"

		# Primary Parameters List Value
		self.Tw_List_Value = array([30., 30., 30., 30., 30.])
		# Primary Parameters
		self.UH_Value = "600"
		self.UH_Notes = "Hot Side Heat Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.UHalp_Value = "0"
		self.UHalp_Notes = "Flow Exponent for Hot Side H.T. Coef.[-]"

		# Primary Parameters
		self.tlagH_Value = "0"
		self.tlagH_Notes = "H. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WHdes_Value = "300"
		self.WHdes_Notes = "Hot Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DHdes_Value = "2.01"
		self.DHdes_Notes = "Hot Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdHdes_Value = "0"
		self.PdHdes_Notes = "Hot Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.UL_Value = "600"
		self.UL_Notes = "Cold Side H.Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.ULalp_Value = "0"
		self.ULalp_Notes = "Cold Side H.T.Coef. Flow Factor"

		# Primary Parameters
		self.tlagL_Value = "0"
		self.tlagL_Notes = "C. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WLdes_Value = "11190"
		self.WLdes_Notes = "Cold Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DLdes_Value = "440"
		self.DLdes_Notes = "Cold Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdLdes_Value = "10"
		self.PdLdes_Notes = "Cold Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No.: Hot Side"

		# Primary Parameters
		self.s2_Value = "1"
		self.s2_Notes = "System No.: Cold Side"

		# Primary Parameters
		self.THSt_Value = "25"
		self.THSt_Notes = "Hot Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.TLSt_Value = "25"
		self.TLSt_Notes = "Cold Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.PdH_Value = "10"
		self.PdH_Notes = "Hot Side Pressure Drop[kPa]"

		# Primary Parameters
		self.PdL_Value = "10"
		self.PdL_Notes = "Cold Side Pressure Drop[kPa]"

class Block_E2005:
	def __init__(self):
		self.ID = 333
		self.Name = "E2005"
		self.Model = "HEATXC_V"
		self.Notes = "General-Purpose Heat Exchanger"

		# General Parameters
		self._NB_Value = "5"
		self._NB_Notes = "Number of Segments"

		# Primary Parameters
		self.TYPE_Value = "1"
		self.TYPE_Notes = "Flow Type(0:Cocurrent,1:Countercurrent)"

		# Primary Parameters
		self.A_Value = "8.1"
		self.A_Notes = "Heat Transfer Area[m2]"

		# Primary Parameters
		self.Gw_Value = "780"
		self.Gw_Notes = "Heat Transfer Wall Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "H.Trans. Wall Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aair_Value = "0"
		self.Aair_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uair_Value = "6"
		self.Uair_Notes = "Heat Trans. Coef. for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Tw_Value = "(5)"
		self.Tw_Notes = "Heat Transfer Wall Temp.[C]"

		# Primary Parameters List Value
		self.Tw_List_Value = array([30., 30., 30., 30., 30.])
		# Primary Parameters
		self.PH_Value = "101.325"
		self.PH_Notes = "Hot Side Internal Pressure[kPa]"

		# Primary Parameters
		self.VH_Value = "0.222"
		self.VH_Notes = "Hot Side Volume[m3]"

		# Primary Parameters
		self.UHv_Value = "120"
		self.UHv_Notes = "Hot Side Vap. H.T.Coef.[W/m2K]"

		# Primary Parameters
		self.UHc_Value = "1793"
		self.UHc_Notes = "H.T.Coef. of Condensation[W/m2K]"

		# Primary Parameters
		self.WHdes_Value = "878"
		self.WHdes_Notes = "Hot Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DHdes_Value = "54"
		self.DHdes_Notes = "Hot Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdHdes_Value = "9.80665"
		self.PdHdes_Notes = "Hot Side Design Pres.Drop[kPa]"

		# Primary Parameters
		self.LHhigh_Value = "1"
		self.LHhigh_Notes = "Hot Side H.T.Area Max. Level[m]"

		# Primary Parameters
		self.LHlow_Value = "0"
		self.LHlow_Notes = "Hot Side H.T.Area Min. Level[m]"

		# Primary Parameters
		self.yH0_Value = "(31)"
		self.yH0_Notes = "Hot Vapor Initial Composition[mol/mol]"

		# Primary Parameters List Value
		self.yH0_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.sep_lv_Value = "1"
		self.sep_lv_Notes = "Condensate Separation Flag(0:No,1:Yes)"

		# Primary Parameters
		self.Ce_Value = "10"
		self.Ce_Notes = "Evaporation Rate Parameter[1/h]"

		# Primary Parameters
		self.LHmin_Value = "0"
		self.LHmin_Notes = "Min. Condensate Level for Discharge[m]"

		# Primary Parameters
		self.uH_Value = "(31)"
		self.uH_Notes = "Condensate. Comp. Holdup[kmol]"

		# Primary Parameters List Value
		self.uH_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.UHl_Value = "120"
		self.UHl_Notes = "Subcool Heat Transfer Coef.[W/m2K]"

		# Primary Parameters
		self.AsH_Value = "0.073"
		self.AsH_Notes = "Hot Side Liquid Cross Sec.Area[m2]"

		# Primary Parameters
		self.UL_Value = "1489.8"
		self.UL_Notes = "Cold Side H.Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.WLdes_Value = "5700"
		self.WLdes_Notes = "Cold Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DLdes_Value = "1000"
		self.DLdes_Notes = "Cold Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdLdes_Value = "2.94199"
		self.PdLdes_Notes = "Cold Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.ULalp_Value = "0"
		self.ULalp_Notes = "Cold Side H.T.Coef. Flow Factor"

		# Primary Parameters
		self.tlagL_Value = "0"
		self.tlagL_Notes = "C. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No.: Hot Side"

		# Primary Parameters
		self.s2_Value = "1"
		self.s2_Notes = "System No.: Cold Side"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.LHSt_Value = "0.5"
		self.LHSt_Notes = "Condensate Level Start Value[m]"

		# Primary Parameters
		self.PHSt_Value = "101.325"
		self.PHSt_Notes = "Hot Side Pressure Start Value[kPa]"

		# Primary Parameters
		self.THSt_Value = "25"
		self.THSt_Notes = "Hot Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.TLSt_Value = "25"
		self.TLSt_Notes = "Cold Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Non-condensate Gas Comp. Start Value"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Condensate Composition Start Value"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.PdH_Value = "10"
		self.PdH_Notes = "Hot Side Pressure Drop[kPa]"

		# Primary Parameters
		self.PdL_Value = "10"
		self.PdL_Notes = "Cold Side Pressure Drop[kPa]"

		# Primary Parameters
		self.rRv_Value = "0.3"
		self.rRv_Notes = "Ratio of Non-condensate[-]"

		# Primary Parameters
		self.rInert_Value = "0"
		self.rInert_Notes = "Heat Transfer Decrease by Inert Gas[-]"

		# Primary Parameters
		self.yInert_Value = "(31)"
		self.yInert_Notes = "Composition of Inert Gas"

		# Primary Parameters List Value
		self.yInert_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.freeLH_Value = "0"
		self.freeLH_Notes = "Set Hot Side Level Free(1:Free)"

class Block_E2006:
	def __init__(self):
		self.ID = 334
		self.Name = "E2006"
		self.Model = "HEATXB"
		self.Notes = "General-Purpose Heat Exchanger"

		# General Parameters
		self._NB_Value = "5"
		self._NB_Notes = "Number of segments"

		# Primary Parameters
		self.TYPE_Value = "1"
		self.TYPE_Notes = "0: Cocurrent 1:Countercurrent"

		# Primary Parameters
		self.A_Value = "11.3"
		self.A_Notes = "Heat Transfer Area[m2]"

		# Primary Parameters
		self.Gw_Value = "930"
		self.Gw_Notes = "Heat Transfer Wall Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "H.Trans. Wall Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aair_Value = "0"
		self.Aair_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uair_Value = "6"
		self.Uair_Notes = "Heat Trans. Coef. for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Tw_Value = "(5)"
		self.Tw_Notes = "Heat Transfer Wall Temp.[C]"

		# Primary Parameters List Value
		self.Tw_List_Value = array([30., 30., 30., 30., 30.])
		# Primary Parameters
		self.UH_Value = "716.48"
		self.UH_Notes = "Hot Side Heat Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.UHalp_Value = "0"
		self.UHalp_Notes = "Flow Exponent for Hot Side H.T. Coef.[-]"

		# Primary Parameters
		self.tlagH_Value = "0"
		self.tlagH_Notes = "H. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WHdes_Value = "5847"
		self.WHdes_Notes = "Hot Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DHdes_Value = "472"
		self.DHdes_Notes = "Hot Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdHdes_Value = "7.84532"
		self.PdHdes_Notes = "Hot Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.UL_Value = "1464.32"
		self.UL_Notes = "Cold Side H.Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.ULalp_Value = "0"
		self.ULalp_Notes = "Cold Side H.T.Coef. Flow Factor"

		# Primary Parameters
		self.tlagL_Value = "0"
		self.tlagL_Notes = "C. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WLdes_Value = "12300"
		self.WLdes_Notes = "Cold Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DLdes_Value = "1000"
		self.DLdes_Notes = "Cold Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdLdes_Value = "2.94199"
		self.PdLdes_Notes = "Cold Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No.: Hot Side"

		# Primary Parameters
		self.s2_Value = "1"
		self.s2_Notes = "System No.: Cold Side"

		# Primary Parameters
		self.THSt_Value = "25"
		self.THSt_Notes = "Hot Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.TLSt_Value = "25"
		self.TLSt_Notes = "Cold Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.PdH_Value = "10"
		self.PdH_Notes = "Hot Side Pressure Drop[kPa]"

		# Primary Parameters
		self.PdL_Value = "10"
		self.PdL_Notes = "Cold Side Pressure Drop[kPa]"

class Block_E2110:
	def __init__(self):
		self.ID = 335
		self.Name = "E2110"
		self.Model = "HEATXB"
		self.Notes = "General-Purpose Heat Exchanger"

		# General Parameters
		self._NB_Value = "5"
		self._NB_Notes = "Number of segments"

		# Primary Parameters
		self.TYPE_Value = "1"
		self.TYPE_Notes = "0: Cocurrent 1:Countercurrent"

		# Primary Parameters
		self.A_Value = "9.1"
		self.A_Notes = "Heat Transfer Area[m2]"

		# Primary Parameters
		self.Gw_Value = "900"
		self.Gw_Notes = "Heat Transfer Wall Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "H.Trans. Wall Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aair_Value = "0"
		self.Aair_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uair_Value = "6"
		self.Uair_Notes = "Heat Trans. Coef. for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Tw_Value = "(5)"
		self.Tw_Notes = "Heat Transfer Wall Temp.[C]"

		# Primary Parameters List Value
		self.Tw_List_Value = array([30., 30., 30., 30., 30.])
		# Primary Parameters
		self.UH_Value = "600"
		self.UH_Notes = "Hot Side Heat Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.UHalp_Value = "0"
		self.UHalp_Notes = "Flow Exponent for Hot Side H.T. Coef.[-]"

		# Primary Parameters
		self.tlagH_Value = "0"
		self.tlagH_Notes = "H. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WHdes_Value = "50000"
		self.WHdes_Notes = "Hot Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DHdes_Value = "1000"
		self.DHdes_Notes = "Hot Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdHdes_Value = "9.80665"
		self.PdHdes_Notes = "Hot Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.UL_Value = "600"
		self.UL_Notes = "Cold Side H.Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.ULalp_Value = "0"
		self.ULalp_Notes = "Cold Side H.T.Coef. Flow Factor"

		# Primary Parameters
		self.tlagL_Value = "0"
		self.tlagL_Notes = "C. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WLdes_Value = "6250"
		self.WLdes_Notes = "Cold Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DLdes_Value = "1000"
		self.DLdes_Notes = "Cold Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdLdes_Value = "7.84532"
		self.PdLdes_Notes = "Cold Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No.: Hot Side"

		# Primary Parameters
		self.s2_Value = "1"
		self.s2_Notes = "System No.: Cold Side"

		# Primary Parameters
		self.THSt_Value = "25"
		self.THSt_Notes = "Hot Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.TLSt_Value = "25"
		self.TLSt_Notes = "Cold Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.PdH_Value = "10"
		self.PdH_Notes = "Hot Side Pressure Drop[kPa]"

		# Primary Parameters
		self.PdL_Value = "10"
		self.PdL_Notes = "Cold Side Pressure Drop[kPa]"

class Block_E2111:
	def __init__(self):
		self.ID = 336
		self.Name = "E2111"
		self.Model = "HEATXB"
		self.Notes = "General-Purpose Heat Exchanger"

		# General Parameters
		self._NB_Value = "5"
		self._NB_Notes = "Number of segments"

		# Primary Parameters
		self.TYPE_Value = "1"
		self.TYPE_Notes = "0: Cocurrent 1:Countercurrent"

		# Primary Parameters
		self.A_Value = "6.4"
		self.A_Notes = "Heat Transfer Area[m2]"

		# Primary Parameters
		self.Gw_Value = "610"
		self.Gw_Notes = "Heat Transfer Wall Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "H.Trans. Wall Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aair_Value = "0"
		self.Aair_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uair_Value = "6"
		self.Uair_Notes = "Heat Trans. Coef. for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Tw_Value = "(5)"
		self.Tw_Notes = "Heat Transfer Wall Temp.[C]"

		# Primary Parameters List Value
		self.Tw_List_Value = array([30., 30., 30., 30., 30.])
		# Primary Parameters
		self.UH_Value = "100"
		self.UH_Notes = "Hot Side Heat Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.UHalp_Value = "0.5"
		self.UHalp_Notes = "Flow Exponent for Hot Side H.T. Coef.[-]"

		# Primary Parameters
		self.tlagH_Value = "0"
		self.tlagH_Notes = "H. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WHdes_Value = "87.7"
		self.WHdes_Notes = "Hot Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DHdes_Value = "1.7"
		self.DHdes_Notes = "Hot Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdHdes_Value = "0.392266"
		self.PdHdes_Notes = "Hot Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.UL_Value = "100"
		self.UL_Notes = "Cold Side H.Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.ULalp_Value = "0"
		self.ULalp_Notes = "Cold Side H.T.Coef. Flow Factor"

		# Primary Parameters
		self.tlagL_Value = "0"
		self.tlagL_Notes = "C. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WLdes_Value = "551"
		self.WLdes_Notes = "Cold Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DLdes_Value = "1055"
		self.DLdes_Notes = "Cold Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdLdes_Value = "9.80665"
		self.PdLdes_Notes = "Cold Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No.: Hot Side"

		# Primary Parameters
		self.s2_Value = "4"
		self.s2_Notes = "System No.: Cold Side"

		# Primary Parameters
		self.THSt_Value = "25"
		self.THSt_Notes = "Hot Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.TLSt_Value = "25"
		self.TLSt_Notes = "Cold Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.PdH_Value = "10"
		self.PdH_Notes = "Hot Side Pressure Drop[kPa]"

		# Primary Parameters
		self.PdL_Value = "10"
		self.PdL_Notes = "Cold Side Pressure Drop[kPa]"

class Block_E2113:
	def __init__(self):
		self.ID = 337
		self.Name = "E2113"
		self.Model = "HEATXB"
		self.Notes = "General-Purpose Heat Exchanger"

		# General Parameters
		self._NB_Value = "5"
		self._NB_Notes = "Number of segments"

		# Primary Parameters
		self.TYPE_Value = "1"
		self.TYPE_Notes = "0: Cocurrent 1:Countercurrent"

		# Primary Parameters
		self.A_Value = "6.4"
		self.A_Notes = "Heat Transfer Area[m2]"

		# Primary Parameters
		self.Gw_Value = "610"
		self.Gw_Notes = "Heat Transfer Wall Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "H.Trans. Wall Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aair_Value = "0"
		self.Aair_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uair_Value = "6"
		self.Uair_Notes = "Heat Trans. Coef. for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Tw_Value = "(5)"
		self.Tw_Notes = "Heat Transfer Wall Temp.[C]"

		# Primary Parameters List Value
		self.Tw_List_Value = array([30., 30., 30., 30., 30.])
		# Primary Parameters
		self.UH_Value = "200"
		self.UH_Notes = "Hot Side Heat Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.UHalp_Value = "0"
		self.UHalp_Notes = "Flow Exponent for Hot Side H.T. Coef.[-]"

		# Primary Parameters
		self.tlagH_Value = "0"
		self.tlagH_Notes = "H. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WHdes_Value = "60"
		self.WHdes_Notes = "Hot Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DHdes_Value = "1.7"
		self.DHdes_Notes = "Hot Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdHdes_Value = "0.196133"
		self.PdHdes_Notes = "Hot Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.UL_Value = "200"
		self.UL_Notes = "Cold Side H.Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.ULalp_Value = "0"
		self.ULalp_Notes = "Cold Side H.T.Coef. Flow Factor"

		# Primary Parameters
		self.tlagL_Value = "0"
		self.tlagL_Notes = "C. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WLdes_Value = "476"
		self.WLdes_Notes = "Cold Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DLdes_Value = "1055"
		self.DLdes_Notes = "Cold Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdLdes_Value = "9.80665"
		self.PdLdes_Notes = "Cold Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No.: Hot Side"

		# Primary Parameters
		self.s2_Value = "4"
		self.s2_Notes = "System No.: Cold Side"

		# Primary Parameters
		self.THSt_Value = "25"
		self.THSt_Notes = "Hot Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.TLSt_Value = "25"
		self.TLSt_Notes = "Cold Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.PdH_Value = "10"
		self.PdH_Notes = "Hot Side Pressure Drop[kPa]"

		# Primary Parameters
		self.PdL_Value = "10"
		self.PdL_Notes = "Cold Side Pressure Drop[kPa]"

class Block_E2114:
	def __init__(self):
		self.ID = 338
		self.Name = "E2114"
		self.Model = "HEATXB"
		self.Notes = "General-Purpose Heat Exchanger"

		# General Parameters
		self._NB_Value = "5"
		self._NB_Notes = "Number of segments"

		# Primary Parameters
		self.TYPE_Value = "1"
		self.TYPE_Notes = "0: Cocurrent 1:Countercurrent"

		# Primary Parameters
		self.A_Value = "6.4"
		self.A_Notes = "Heat Transfer Area[m2]"

		# Primary Parameters
		self.Gw_Value = "610"
		self.Gw_Notes = "Heat Transfer Wall Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "H.Trans. Wall Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aair_Value = "0"
		self.Aair_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uair_Value = "6"
		self.Uair_Notes = "Heat Trans. Coef. for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Tw_Value = "(5)"
		self.Tw_Notes = "Heat Transfer Wall Temp.[C]"

		# Primary Parameters List Value
		self.Tw_List_Value = array([30., 30., 30., 30., 30.])
		# Primary Parameters
		self.UH_Value = "600"
		self.UH_Notes = "Hot Side Heat Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.UHalp_Value = "0"
		self.UHalp_Notes = "Flow Exponent for Hot Side H.T. Coef.[-]"

		# Primary Parameters
		self.tlagH_Value = "0"
		self.tlagH_Notes = "H. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WHdes_Value = "36.3"
		self.WHdes_Notes = "Hot Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DHdes_Value = "3"
		self.DHdes_Notes = "Hot Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdHdes_Value = "0.0980665"
		self.PdHdes_Notes = "Hot Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.UL_Value = "600"
		self.UL_Notes = "Cold Side H.Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.ULalp_Value = "0"
		self.ULalp_Notes = "Cold Side H.T.Coef. Flow Factor"

		# Primary Parameters
		self.tlagL_Value = "0"
		self.tlagL_Notes = "C. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WLdes_Value = "342"
		self.WLdes_Notes = "Cold Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DLdes_Value = "1055"
		self.DLdes_Notes = "Cold Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdLdes_Value = "9.80665"
		self.PdLdes_Notes = "Cold Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No.: Hot Side"

		# Primary Parameters
		self.s2_Value = "4"
		self.s2_Notes = "System No.: Cold Side"

		# Primary Parameters
		self.THSt_Value = "25"
		self.THSt_Notes = "Hot Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.TLSt_Value = "25"
		self.TLSt_Notes = "Cold Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.PdH_Value = "10"
		self.PdH_Notes = "Hot Side Pressure Drop[kPa]"

		# Primary Parameters
		self.PdL_Value = "10"
		self.PdL_Notes = "Cold Side Pressure Drop[kPa]"

class Block_E2115:
	def __init__(self):
		self.ID = 339
		self.Name = "E2115"
		self.Model = "HEATXB"
		self.Notes = "General-Purpose Heat Exchanger"

		# General Parameters
		self._NB_Value = "5"
		self._NB_Notes = "Number of segments"

		# Primary Parameters
		self.TYPE_Value = "1"
		self.TYPE_Notes = "0: Cocurrent 1:Countercurrent"

		# Primary Parameters
		self.A_Value = "6.4"
		self.A_Notes = "Heat Transfer Area[m2]"

		# Primary Parameters
		self.Gw_Value = "610"
		self.Gw_Notes = "Heat Transfer Wall Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "H.Trans. Wall Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aair_Value = "0"
		self.Aair_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uair_Value = "6"
		self.Uair_Notes = "Heat Trans. Coef. for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Tw_Value = "(5)"
		self.Tw_Notes = "Heat Transfer Wall Temp.[C]"

		# Primary Parameters List Value
		self.Tw_List_Value = array([30., 30., 30., 30., 30.])
		# Primary Parameters
		self.UH_Value = "600"
		self.UH_Notes = "Hot Side Heat Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.UHalp_Value = "0"
		self.UHalp_Notes = "Flow Exponent for Hot Side H.T. Coef.[-]"

		# Primary Parameters
		self.tlagH_Value = "0"
		self.tlagH_Notes = "H. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WHdes_Value = "105"
		self.WHdes_Notes = "Hot Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DHdes_Value = "1.7"
		self.DHdes_Notes = "Hot Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdHdes_Value = "0.588399"
		self.PdHdes_Notes = "Hot Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.UL_Value = "600"
		self.UL_Notes = "Cold Side H.Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.ULalp_Value = "0"
		self.ULalp_Notes = "Cold Side H.T.Coef. Flow Factor"

		# Primary Parameters
		self.tlagL_Value = "0"
		self.tlagL_Notes = "C. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WLdes_Value = "820"
		self.WLdes_Notes = "Cold Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DLdes_Value = "1055"
		self.DLdes_Notes = "Cold Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdLdes_Value = "9.80665"
		self.PdLdes_Notes = "Cold Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No.: Hot Side"

		# Primary Parameters
		self.s2_Value = "4"
		self.s2_Notes = "System No.: Cold Side"

		# Primary Parameters
		self.THSt_Value = "25"
		self.THSt_Notes = "Hot Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.TLSt_Value = "25"
		self.TLSt_Notes = "Cold Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.PdH_Value = "10"
		self.PdH_Notes = "Hot Side Pressure Drop[kPa]"

		# Primary Parameters
		self.PdL_Value = "10"
		self.PdL_Notes = "Cold Side Pressure Drop[kPa]"

class Block_E2201:
	def __init__(self):
		self.ID = 340
		self.Name = "E2201"
		self.Model = "HEATXC_V"
		self.Notes = "General-Purpose Heat Exchanger"

		# General Parameters
		self._NB_Value = "5"
		self._NB_Notes = "Number of Segments"

		# Primary Parameters
		self.TYPE_Value = "1"
		self.TYPE_Notes = "Flow Type(0:Cocurrent,1:Countercurrent)"

		# Primary Parameters
		self.A_Value = "340"
		self.A_Notes = "Heat Transfer Area[m2]"

		# Primary Parameters
		self.Gw_Value = "5450"
		self.Gw_Notes = "Heat Transfer Wall Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "H.Trans. Wall Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aair_Value = "0"
		self.Aair_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uair_Value = "6"
		self.Uair_Notes = "Heat Trans. Coef. for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Tw_Value = "(5)"
		self.Tw_Notes = "Heat Transfer Wall Temp.[C]"

		# Primary Parameters List Value
		self.Tw_List_Value = array([30., 30., 30., 30., 30.])
		# Primary Parameters
		self.PH_Value = "101.325"
		self.PH_Notes = "Hot Side Internal Pressure[kPa]"

		# Primary Parameters
		self.VH_Value = "30"
		self.VH_Notes = "Hot Side Volume[m3]"

		# Primary Parameters
		self.UHv_Value = "200"
		self.UHv_Notes = "Hot Side Vap. H.T.Coef.[W/m2K]"

		# Primary Parameters
		self.UHc_Value = "2000"
		self.UHc_Notes = "H.T.Coef. of Condensation[W/m2K]"

		# Primary Parameters
		self.WHdes_Value = "20338.5"
		self.WHdes_Notes = "Hot Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DHdes_Value = "441"
		self.DHdes_Notes = "Hot Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdHdes_Value = "4.90332"
		self.PdHdes_Notes = "Hot Side Design Pres.Drop[kPa]"

		# Primary Parameters
		self.LHhigh_Value = "2"
		self.LHhigh_Notes = "Hot Side H.T.Area Max. Level[m]"

		# Primary Parameters
		self.LHlow_Value = "0"
		self.LHlow_Notes = "Hot Side H.T.Area Min. Level[m]"

		# Primary Parameters
		self.yH0_Value = "(31)"
		self.yH0_Notes = "Hot Vapor Initial Composition[mol/mol]"

		# Primary Parameters List Value
		self.yH0_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.sep_lv_Value = "1"
		self.sep_lv_Notes = "Condensate Separation Flag(0:No,1:Yes)"

		# Primary Parameters
		self.Ce_Value = "10"
		self.Ce_Notes = "Evaporation Rate Parameter[1/h]"

		# Primary Parameters
		self.LHmin_Value = "0"
		self.LHmin_Notes = "Min. Condensate Level for Discharge[m]"

		# Primary Parameters
		self.uH_Value = "(31)"
		self.uH_Notes = "Condensate. Comp. Holdup[kmol]"

		# Primary Parameters List Value
		self.uH_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.UHl_Value = "120"
		self.UHl_Notes = "Subcool Heat Transfer Coef.[W/m2K]"

		# Primary Parameters
		self.AsH_Value = "3"
		self.AsH_Notes = "Hot Side Liquid Cross Sec.Area[m2]"

		# Primary Parameters
		self.UL_Value = "654.27"
		self.UL_Notes = "Cold Side H.Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.WLdes_Value = "229000"
		self.WLdes_Notes = "Cold Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DLdes_Value = "1000"
		self.DLdes_Notes = "Cold Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdLdes_Value = "22.5553"
		self.PdLdes_Notes = "Cold Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.ULalp_Value = "0"
		self.ULalp_Notes = "Cold Side H.T.Coef. Flow Factor"

		# Primary Parameters
		self.tlagL_Value = "0"
		self.tlagL_Notes = "C. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No.: Hot Side"

		# Primary Parameters
		self.s2_Value = "1"
		self.s2_Notes = "System No.: Cold Side"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.LHSt_Value = "0.5"
		self.LHSt_Notes = "Condensate Level Start Value[m]"

		# Primary Parameters
		self.PHSt_Value = "101.325"
		self.PHSt_Notes = "Hot Side Pressure Start Value[kPa]"

		# Primary Parameters
		self.THSt_Value = "25"
		self.THSt_Notes = "Hot Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.TLSt_Value = "25"
		self.TLSt_Notes = "Cold Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Non-condensate Gas Comp. Start Value"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Condensate Composition Start Value"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.PdH_Value = "10"
		self.PdH_Notes = "Hot Side Pressure Drop[kPa]"

		# Primary Parameters
		self.PdL_Value = "10"
		self.PdL_Notes = "Cold Side Pressure Drop[kPa]"

		# Primary Parameters
		self.rRv_Value = "0.3"
		self.rRv_Notes = "Ratio of Non-condensate[-]"

		# Primary Parameters
		self.rInert_Value = "0"
		self.rInert_Notes = "Heat Transfer Decrease by Inert Gas[-]"

		# Primary Parameters
		self.yInert_Value = "(31)"
		self.yInert_Notes = "Composition of Inert Gas"

		# Primary Parameters List Value
		self.yInert_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.freeLH_Value = "0"
		self.freeLH_Notes = "Set Hot Side Level Free(1:Free)"

class Block_E2203:
	def __init__(self):
		self.ID = 341
		self.Name = "E2203"
		self.Model = "HEATXB"
		self.Notes = "General-Purpose Heat Exchanger"

		# General Parameters
		self._NB_Value = "5"
		self._NB_Notes = "Number of segments"

		# Primary Parameters
		self.TYPE_Value = "1"
		self.TYPE_Notes = "0: Cocurrent 1:Countercurrent"

		# Primary Parameters
		self.A_Value = "93.4"
		self.A_Notes = "Heat Transfer Area[m2]"

		# Primary Parameters
		self.Gw_Value = "4090"
		self.Gw_Notes = "Heat Transfer Wall Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "H.Trans. Wall Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aair_Value = "0"
		self.Aair_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uair_Value = "6"
		self.Uair_Notes = "Heat Trans. Coef. for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Tw_Value = "(5)"
		self.Tw_Notes = "Heat Transfer Wall Temp.[C]"

		# Primary Parameters List Value
		self.Tw_List_Value = array([30., 30., 30., 30., 30.])
		# Primary Parameters
		self.UH_Value = "1730.36"
		self.UH_Notes = "Hot Side Heat Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.UHalp_Value = "0.5"
		self.UHalp_Notes = "Flow Exponent for Hot Side H.T. Coef.[-]"

		# Primary Parameters
		self.tlagH_Value = "0"
		self.tlagH_Notes = "H. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WHdes_Value = "131240"
		self.WHdes_Notes = "Hot Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DHdes_Value = "32.1"
		self.DHdes_Notes = "Hot Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdHdes_Value = "5.88399"
		self.PdHdes_Notes = "Hot Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.UL_Value = "4584.55"
		self.UL_Notes = "Cold Side H.Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.ULalp_Value = "0"
		self.ULalp_Notes = "Cold Side H.T.Coef. Flow Factor"

		# Primary Parameters
		self.tlagL_Value = "0"
		self.tlagL_Notes = "C. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WLdes_Value = "88209"
		self.WLdes_Notes = "Cold Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DLdes_Value = "1000"
		self.DLdes_Notes = "Cold Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdLdes_Value = "15.6906"
		self.PdLdes_Notes = "Cold Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No.: Hot Side"

		# Primary Parameters
		self.s2_Value = "1"
		self.s2_Notes = "System No.: Cold Side"

		# Primary Parameters
		self.THSt_Value = "25"
		self.THSt_Notes = "Hot Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.TLSt_Value = "25"
		self.TLSt_Notes = "Cold Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.PdH_Value = "10"
		self.PdH_Notes = "Hot Side Pressure Drop[kPa]"

		# Primary Parameters
		self.PdL_Value = "10"
		self.PdL_Notes = "Cold Side Pressure Drop[kPa]"

class Block_E2206:
	def __init__(self):
		self.ID = 342
		self.Name = "E2206"
		self.Model = "HEATXB"
		self.Notes = "General-Purpose Heat Exchanger"

		# General Parameters
		self._NB_Value = "5"
		self._NB_Notes = "Number of segments"

		# Primary Parameters
		self.TYPE_Value = "1"
		self.TYPE_Notes = "0: Cocurrent 1:Countercurrent"

		# Primary Parameters
		self.A_Value = "5.3"
		self.A_Notes = "Heat Transfer Area[m2]"

		# Primary Parameters
		self.Gw_Value = "620"
		self.Gw_Notes = "Heat Transfer Wall Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "H.Trans. Wall Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aair_Value = "0"
		self.Aair_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uair_Value = "6"
		self.Uair_Notes = "Heat Trans. Coef. for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Tw_Value = "(5)"
		self.Tw_Notes = "Heat Transfer Wall Temp.[C]"

		# Primary Parameters List Value
		self.Tw_List_Value = array([30., 30., 30., 30., 30.])
		# Primary Parameters
		self.UH_Value = "209.34"
		self.UH_Notes = "Hot Side Heat Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.UHalp_Value = "0"
		self.UHalp_Notes = "Flow Exponent for Hot Side H.T. Coef.[-]"

		# Primary Parameters
		self.tlagH_Value = "0"
		self.tlagH_Notes = "H. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WHdes_Value = "1063"
		self.WHdes_Notes = "Hot Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DHdes_Value = "39.73"
		self.DHdes_Notes = "Hot Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdHdes_Value = "1.37293"
		self.PdHdes_Notes = "Hot Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.UL_Value = "1787.53"
		self.UL_Notes = "Cold Side H.Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.ULalp_Value = "0"
		self.ULalp_Notes = "Cold Side H.T.Coef. Flow Factor"

		# Primary Parameters
		self.tlagL_Value = "0"
		self.tlagL_Notes = "C. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WLdes_Value = "2542"
		self.WLdes_Notes = "Cold Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DLdes_Value = "1000"
		self.DLdes_Notes = "Cold Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdLdes_Value = "4.90332"
		self.PdLdes_Notes = "Cold Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No.: Hot Side"

		# Primary Parameters
		self.s2_Value = "1"
		self.s2_Notes = "System No.: Cold Side"

		# Primary Parameters
		self.THSt_Value = "25"
		self.THSt_Notes = "Hot Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.TLSt_Value = "25"
		self.TLSt_Notes = "Cold Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.PdH_Value = "10"
		self.PdH_Notes = "Hot Side Pressure Drop[kPa]"

		# Primary Parameters
		self.PdL_Value = "10"
		self.PdL_Notes = "Cold Side Pressure Drop[kPa]"

class Block_E2208:
	def __init__(self):
		self.ID = 343
		self.Name = "E2208"
		self.Model = "HEATXB"
		self.Notes = "General-Purpose Heat Exchanger"

		# General Parameters
		self._NB_Value = "5"
		self._NB_Notes = "Number of segments"

		# Primary Parameters
		self.TYPE_Value = "1"
		self.TYPE_Notes = "0: Cocurrent 1:Countercurrent"

		# Primary Parameters
		self.A_Value = "327"
		self.A_Notes = "Heat Transfer Area[m2]"

		# Primary Parameters
		self.Gw_Value = "14580"
		self.Gw_Notes = "Heat Transfer Wall Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "H.Trans. Wall Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aair_Value = "0"
		self.Aair_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uair_Value = "6"
		self.Uair_Notes = "Heat Trans. Coef. for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Tw_Value = "(5)"
		self.Tw_Notes = "Heat Transfer Wall Temp.[C]"

		# Primary Parameters List Value
		self.Tw_List_Value = array([30., 30., 30., 30., 30.])
		# Primary Parameters
		self.UH_Value = "1156.02"
		self.UH_Notes = "Hot Side Heat Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.UHalp_Value = "0"
		self.UHalp_Notes = "Flow Exponent for Hot Side H.T. Coef.[-]"

		# Primary Parameters
		self.tlagH_Value = "0"
		self.tlagH_Notes = "H. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WHdes_Value = "12305"
		self.WHdes_Notes = "Hot Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DHdes_Value = "34.4"
		self.DHdes_Notes = "Hot Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdHdes_Value = "0.980665"
		self.PdHdes_Notes = "Hot Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.UL_Value = "4311.24"
		self.UL_Notes = "Cold Side H.Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.ULalp_Value = "0"
		self.ULalp_Notes = "Cold Side H.T.Coef. Flow Factor"

		# Primary Parameters
		self.tlagL_Value = "0"
		self.tlagL_Notes = "C. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WLdes_Value = "162812"
		self.WLdes_Notes = "Cold Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DLdes_Value = "1000"
		self.DLdes_Notes = "Cold Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdLdes_Value = "31.3813"
		self.PdLdes_Notes = "Cold Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No.: Hot Side"

		# Primary Parameters
		self.s2_Value = "1"
		self.s2_Notes = "System No.: Cold Side"

		# Primary Parameters
		self.THSt_Value = "25"
		self.THSt_Notes = "Hot Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.TLSt_Value = "25"
		self.TLSt_Notes = "Cold Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.PdH_Value = "10"
		self.PdH_Notes = "Hot Side Pressure Drop[kPa]"

		# Primary Parameters
		self.PdL_Value = "10"
		self.PdL_Notes = "Cold Side Pressure Drop[kPa]"

class Block_E2209:
	def __init__(self):
		self.ID = 344
		self.Name = "E2209"
		self.Model = "HEATXB"
		self.Notes = "General-Purpose Heat Exchanger"

		# General Parameters
		self._NB_Value = "5"
		self._NB_Notes = "Number of segments"

		# Primary Parameters
		self.TYPE_Value = "1"
		self.TYPE_Notes = "0: Cocurrent 1:Countercurrent"

		# Primary Parameters
		self.A_Value = "7.4"
		self.A_Notes = "Heat Transfer Area[m2]"

		# Primary Parameters
		self.Gw_Value = "700"
		self.Gw_Notes = "Heat Transfer Wall Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "H.Trans. Wall Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aair_Value = "0"
		self.Aair_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uair_Value = "6"
		self.Uair_Notes = "Heat Trans. Coef. for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Tw_Value = "(5)"
		self.Tw_Notes = "Heat Transfer Wall Temp.[C]"

		# Primary Parameters List Value
		self.Tw_List_Value = array([30., 30., 30., 30., 30.])
		# Primary Parameters
		self.UH_Value = "2049.21"
		self.UH_Notes = "Hot Side Heat Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.UHalp_Value = "0"
		self.UHalp_Notes = "Flow Exponent for Hot Side H.T. Coef.[-]"

		# Primary Parameters
		self.tlagH_Value = "0"
		self.tlagH_Notes = "H. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WHdes_Value = "9600"
		self.WHdes_Notes = "Hot Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DHdes_Value = "476"
		self.DHdes_Notes = "Hot Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdHdes_Value = "9.80665"
		self.PdHdes_Notes = "Hot Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.UL_Value = "1606.1"
		self.UL_Notes = "Cold Side H.Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.ULalp_Value = "0"
		self.ULalp_Notes = "Cold Side H.T.Coef. Flow Factor"

		# Primary Parameters
		self.tlagL_Value = "0"
		self.tlagL_Notes = "C. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WLdes_Value = "2699"
		self.WLdes_Notes = "Cold Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DLdes_Value = "1000"
		self.DLdes_Notes = "Cold Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdLdes_Value = "5.88399"
		self.PdLdes_Notes = "Cold Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No.: Hot Side"

		# Primary Parameters
		self.s2_Value = "1"
		self.s2_Notes = "System No.: Cold Side"

		# Primary Parameters
		self.THSt_Value = "25"
		self.THSt_Notes = "Hot Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.TLSt_Value = "25"
		self.TLSt_Notes = "Cold Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.PdH_Value = "10"
		self.PdH_Notes = "Hot Side Pressure Drop[kPa]"

		# Primary Parameters
		self.PdL_Value = "10"
		self.PdL_Notes = "Cold Side Pressure Drop[kPa]"

class Block_E2210:
	def __init__(self):
		self.ID = 345
		self.Name = "E2210"
		self.Model = "_HFLOWBH"
		self.Notes = "General-Purpose Heat Exchanger"

		# General Parameters
		self._NB_Value = "5"
		self._NB_Notes = "Number of Segments"

		# Primary Parameters
		self.UH_Value = "5815"
		self.UH_Notes = "Hot Side Heat Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.UHalp_Value = "0"
		self.UHalp_Notes = "Flow Exponent for Hot Side H.T. Coef.[-]"

		# Primary Parameters
		self.tlagH_Value = "0"
		self.tlagH_Notes = "H. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WHdes_Value = "157"
		self.WHdes_Notes = "Hot Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DHdes_Value = "2.1"
		self.DHdes_Notes = "Hot Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdHdes_Value = "10"
		self.PdHdes_Notes = "Hot Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No.: Hot Side"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.THSt_Value = "25"
		self.THSt_Notes = "Hot Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.PdH_Value = "10"
		self.PdH_Notes = "Hot Side Pressure Drop[kPa]"

		# Primary Parameters
		self.Tmin_Value = "25"
		self.Tmin_Notes = "Min. Wall Temperature[C]"

class Block_E2211:
	def __init__(self):
		self.ID = 346
		self.Name = "E2211"
		self.Model = "HEATXB"
		self.Notes = "General-Purpose Heat Exchanger"

		# General Parameters
		self._NB_Value = "5"
		self._NB_Notes = "Number of segments"

		# Primary Parameters
		self.TYPE_Value = "1"
		self.TYPE_Notes = "0: Cocurrent 1:Countercurrent"

		# Primary Parameters
		self.A_Value = "5.7"
		self.A_Notes = "Heat Transfer Area[m2]"

		# Primary Parameters
		self.Gw_Value = "750"
		self.Gw_Notes = "Heat Transfer Wall Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "H.Trans. Wall Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aair_Value = "0"
		self.Aair_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uair_Value = "6"
		self.Uair_Notes = "Heat Trans. Coef. for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Tw_Value = "(5)"
		self.Tw_Notes = "Heat Transfer Wall Temp.[C]"

		# Primary Parameters List Value
		self.Tw_List_Value = array([30., 30., 30., 30., 30.])
		# Primary Parameters
		self.UH_Value = "3733.23"
		self.UH_Notes = "Hot Side Heat Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.UHalp_Value = "0"
		self.UHalp_Notes = "Flow Exponent for Hot Side H.T. Coef.[-]"

		# Primary Parameters
		self.tlagH_Value = "0"
		self.tlagH_Notes = "H. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WHdes_Value = "6810"
		self.WHdes_Notes = "Hot Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DHdes_Value = "442"
		self.DHdes_Notes = "Hot Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdHdes_Value = "66.6852"
		self.PdHdes_Notes = "Hot Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.UL_Value = "4974.15"
		self.UL_Notes = "Cold Side H.Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.ULalp_Value = "0"
		self.ULalp_Notes = "Cold Side H.T.Coef. Flow Factor"

		# Primary Parameters
		self.tlagL_Value = "0"
		self.tlagL_Notes = "C. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WLdes_Value = "5833"
		self.WLdes_Notes = "Cold Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DLdes_Value = "1000"
		self.DLdes_Notes = "Cold Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdLdes_Value = "49.0333"
		self.PdLdes_Notes = "Cold Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No.: Hot Side"

		# Primary Parameters
		self.s2_Value = "1"
		self.s2_Notes = "System No.: Cold Side"

		# Primary Parameters
		self.THSt_Value = "25"
		self.THSt_Notes = "Hot Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.TLSt_Value = "25"
		self.TLSt_Notes = "Cold Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.PdH_Value = "10"
		self.PdH_Notes = "Hot Side Pressure Drop[kPa]"

		# Primary Parameters
		self.PdL_Value = "10"
		self.PdL_Notes = "Cold Side Pressure Drop[kPa]"

class Block_E2214:
	def __init__(self):
		self.ID = 347
		self.Name = "E2214"
		self.Model = "HEATXB"
		self.Notes = "General-Purpose Heat Exchanger"

		# General Parameters
		self._NB_Value = "5"
		self._NB_Notes = "Number of segments"

		# Primary Parameters
		self.TYPE_Value = "1"
		self.TYPE_Notes = "0: Cocurrent 1:Countercurrent"

		# Primary Parameters
		self.A_Value = "2.8"
		self.A_Notes = "Heat Transfer Area[m2]"

		# Primary Parameters
		self.Gw_Value = "430"
		self.Gw_Notes = "Heat Transfer Wall Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "H.Trans. Wall Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aair_Value = "0"
		self.Aair_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uair_Value = "6"
		self.Uair_Notes = "Heat Trans. Coef. for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Tw_Value = "(5)"
		self.Tw_Notes = "Heat Transfer Wall Temp.[C]"

		# Primary Parameters List Value
		self.Tw_List_Value = array([30., 30., 30., 30., 30.])
		# Primary Parameters
		self.UH_Value = "239.578"
		self.UH_Notes = "Hot Side Heat Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.UHalp_Value = "0"
		self.UHalp_Notes = "Flow Exponent for Hot Side H.T. Coef.[-]"

		# Primary Parameters
		self.tlagH_Value = "0"
		self.tlagH_Notes = "H. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WHdes_Value = "331"
		self.WHdes_Notes = "Hot Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DHdes_Value = "15.1"
		self.DHdes_Notes = "Hot Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdHdes_Value = "0.980665"
		self.PdHdes_Notes = "Hot Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.UL_Value = "1083.92"
		self.UL_Notes = "Cold Side H.Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.ULalp_Value = "0"
		self.ULalp_Notes = "Cold Side H.T.Coef. Flow Factor"

		# Primary Parameters
		self.tlagL_Value = "0"
		self.tlagL_Notes = "C. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WLdes_Value = "1038"
		self.WLdes_Notes = "Cold Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DLdes_Value = "1000"
		self.DLdes_Notes = "Cold Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdLdes_Value = "4.90332"
		self.PdLdes_Notes = "Cold Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No.: Hot Side"

		# Primary Parameters
		self.s2_Value = "1"
		self.s2_Notes = "System No.: Cold Side"

		# Primary Parameters
		self.THSt_Value = "25"
		self.THSt_Notes = "Hot Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.TLSt_Value = "25"
		self.TLSt_Notes = "Cold Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.PdH_Value = "10"
		self.PdH_Notes = "Hot Side Pressure Drop[kPa]"

		# Primary Parameters
		self.PdL_Value = "10"
		self.PdL_Notes = "Cold Side Pressure Drop[kPa]"

class Block_E2215:
	def __init__(self):
		self.ID = 348
		self.Name = "E2215"
		self.Model = "HEATXB"
		self.Notes = "General-Purpose Heat Exchanger"

		# General Parameters
		self._NB_Value = "5"
		self._NB_Notes = "Number of segments"

		# Primary Parameters
		self.TYPE_Value = "1"
		self.TYPE_Notes = "0: Cocurrent 1:Countercurrent"

		# Primary Parameters
		self.A_Value = "14.3"
		self.A_Notes = "Heat Transfer Area[m2]"

		# Primary Parameters
		self.Gw_Value = "990"
		self.Gw_Notes = "Heat Transfer Wall Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "H.Trans. Wall Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aair_Value = "0"
		self.Aair_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uair_Value = "6"
		self.Uair_Notes = "Heat Trans. Coef. for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Tw_Value = "(5)"
		self.Tw_Notes = "Heat Transfer Wall Temp.[C]"

		# Primary Parameters List Value
		self.Tw_List_Value = array([30., 30., 30., 30., 30.])
		# Primary Parameters
		self.UH_Value = "123.278"
		self.UH_Notes = "Hot Side Heat Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.UHalp_Value = "0"
		self.UHalp_Notes = "Flow Exponent for Hot Side H.T. Coef.[-]"

		# Primary Parameters
		self.tlagH_Value = "0"
		self.tlagH_Notes = "H. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WHdes_Value = "2143"
		self.WHdes_Notes = "Hot Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DHdes_Value = "8.4"
		self.DHdes_Notes = "Hot Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdHdes_Value = "1.90332"
		self.PdHdes_Notes = "Hot Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.UL_Value = "1509.57"
		self.UL_Notes = "Cold Side H.Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.ULalp_Value = "0"
		self.ULalp_Notes = "Cold Side H.T.Coef. Flow Factor"

		# Primary Parameters
		self.tlagL_Value = "0"
		self.tlagL_Notes = "C. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WLdes_Value = "2919"
		self.WLdes_Notes = "Cold Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DLdes_Value = "1000"
		self.DLdes_Notes = "Cold Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdLdes_Value = "1.96133"
		self.PdLdes_Notes = "Cold Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No.: Hot Side"

		# Primary Parameters
		self.s2_Value = "1"
		self.s2_Notes = "System No.: Cold Side"

		# Primary Parameters
		self.THSt_Value = "25"
		self.THSt_Notes = "Hot Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.TLSt_Value = "25"
		self.TLSt_Notes = "Cold Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.PdH_Value = "10"
		self.PdH_Notes = "Hot Side Pressure Drop[kPa]"

		# Primary Parameters
		self.PdL_Value = "10"
		self.PdL_Notes = "Cold Side Pressure Drop[kPa]"

class Block_E2216:
	def __init__(self):
		self.ID = 349
		self.Name = "E2216"
		self.Model = "HEATXB"
		self.Notes = "General-Purpose Heat Exchanger"

		# General Parameters
		self._NB_Value = "5"
		self._NB_Notes = "Number of segments"

		# Primary Parameters
		self.TYPE_Value = "1"
		self.TYPE_Notes = "0: Cocurrent 1:Countercurrent"

		# Primary Parameters
		self.A_Value = "14.3"
		self.A_Notes = "Heat Transfer Area[m2]"

		# Primary Parameters
		self.Gw_Value = "1745"
		self.Gw_Notes = "Heat Transfer Wall Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "H.Trans. Wall Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aair_Value = "0"
		self.Aair_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uair_Value = "6"
		self.Uair_Notes = "Heat Trans. Coef. for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Tw_Value = "(5)"
		self.Tw_Notes = "Heat Transfer Wall Temp.[C]"

		# Primary Parameters List Value
		self.Tw_List_Value = array([25., 25., 25., 25., 25.])
		# Primary Parameters
		self.UH_Value = "600"
		self.UH_Notes = "Hot Side Heat Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.UHalp_Value = "0"
		self.UHalp_Notes = "Flow Exponent for Hot Side H.T. Coef.[-]"

		# Primary Parameters
		self.tlagH_Value = "0"
		self.tlagH_Notes = "H. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WHdes_Value = "1143"
		self.WHdes_Notes = "Hot Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DHdes_Value = "20"
		self.DHdes_Notes = "Hot Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdHdes_Value = "10"
		self.PdHdes_Notes = "Hot Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.UL_Value = "1500"
		self.UL_Notes = "Cold Side H.Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.ULalp_Value = "0"
		self.ULalp_Notes = "Cold Side H.T.Coef. Flow Factor"

		# Primary Parameters
		self.tlagL_Value = "0"
		self.tlagL_Notes = "C. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WLdes_Value = "3000"
		self.WLdes_Notes = "Cold Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DLdes_Value = "1000"
		self.DLdes_Notes = "Cold Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdLdes_Value = "10"
		self.PdLdes_Notes = "Cold Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No.: Hot Side"

		# Primary Parameters
		self.s2_Value = "1"
		self.s2_Notes = "System No.: Cold Side"

		# Primary Parameters
		self.THSt_Value = "25"
		self.THSt_Notes = "Hot Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.TLSt_Value = "25"
		self.TLSt_Notes = "Cold Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.PdH_Value = "10"
		self.PdH_Notes = "Hot Side Pressure Drop[kPa]"

		# Primary Parameters
		self.PdL_Value = "10"
		self.PdL_Notes = "Cold Side Pressure Drop[kPa]"

class Block_E2218:
	def __init__(self):
		self.ID = 350
		self.Name = "E2218"
		self.Model = "HEATXB"
		self.Notes = "General-Purpose Heat Exchanger"

		# General Parameters
		self._NB_Value = "5"
		self._NB_Notes = "Number of segments"

		# Primary Parameters
		self.TYPE_Value = "1"
		self.TYPE_Notes = "0: Cocurrent 1:Countercurrent"

		# Primary Parameters
		self.A_Value = "27"
		self.A_Notes = "Heat Transfer Area[m2]"

		# Primary Parameters
		self.Gw_Value = "1450"
		self.Gw_Notes = "Heat Transfer Wall Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "H.Trans. Wall Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aair_Value = "0"
		self.Aair_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uair_Value = "6"
		self.Uair_Notes = "Heat Trans. Coef. for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Tw_Value = "(5)"
		self.Tw_Notes = "Heat Transfer Wall Temp.[C]"

		# Primary Parameters List Value
		self.Tw_List_Value = array([30., 30., 30., 30., 30.])
		# Primary Parameters
		self.UH_Value = "297.728"
		self.UH_Notes = "Hot Side Heat Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.UHalp_Value = "0"
		self.UHalp_Notes = "Flow Exponent for Hot Side H.T. Coef.[-]"

		# Primary Parameters
		self.tlagH_Value = "0"
		self.tlagH_Notes = "H. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WHdes_Value = "850"
		self.WHdes_Notes = "Hot Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DHdes_Value = "25.7"
		self.DHdes_Notes = "Hot Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdHdes_Value = "9.80665"
		self.PdHdes_Notes = "Hot Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.UL_Value = "631.69"
		self.UL_Notes = "Cold Side H.Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.ULalp_Value = "0"
		self.ULalp_Notes = "Cold Side H.T.Coef. Flow Factor"

		# Primary Parameters
		self.tlagL_Value = "0"
		self.tlagL_Notes = "C. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WLdes_Value = "9737"
		self.WLdes_Notes = "Cold Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DLdes_Value = "1021"
		self.DLdes_Notes = "Cold Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdLdes_Value = "7.84532"
		self.PdLdes_Notes = "Cold Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No.: Hot Side"

		# Primary Parameters
		self.s2_Value = "4"
		self.s2_Notes = "System No.: Cold Side"

		# Primary Parameters
		self.THSt_Value = "25"
		self.THSt_Notes = "Hot Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.TLSt_Value = "25"
		self.TLSt_Notes = "Cold Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.PdH_Value = "10"
		self.PdH_Notes = "Hot Side Pressure Drop[kPa]"

		# Primary Parameters
		self.PdL_Value = "10"
		self.PdL_Notes = "Cold Side Pressure Drop[kPa]"

class Block_E2219:
	def __init__(self):
		self.ID = 351
		self.Name = "E2219"
		self.Model = "HEATXB"
		self.Notes = "General-Purpose Heat Exchanger"

		# General Parameters
		self._NB_Value = "5"
		self._NB_Notes = "Number of segments"

		# Primary Parameters
		self.TYPE_Value = "1"
		self.TYPE_Notes = "0: Cocurrent 1:Countercurrent"

		# Primary Parameters
		self.A_Value = "10.5"
		self.A_Notes = "Heat Transfer Area[m2]"

		# Primary Parameters
		self.Gw_Value = "970"
		self.Gw_Notes = "Heat Transfer Wall Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "H.Trans. Wall Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aair_Value = "0"
		self.Aair_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uair_Value = "6"
		self.Uair_Notes = "Heat Trans. Coef. for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Tw_Value = "(5)"
		self.Tw_Notes = "Heat Transfer Wall Temp.[C]"

		# Primary Parameters List Value
		self.Tw_List_Value = array([30., 30., 30., 30., 30.])
		# Primary Parameters
		self.UH_Value = "623.368"
		self.UH_Notes = "Hot Side Heat Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.UHalp_Value = "0.2"
		self.UHalp_Notes = "Flow Exponent for Hot Side H.T. Coef.[-]"

		# Primary Parameters
		self.tlagH_Value = "0"
		self.tlagH_Notes = "H. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WHdes_Value = "2066"
		self.WHdes_Notes = "Hot Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DHdes_Value = "505"
		self.DHdes_Notes = "Hot Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdHdes_Value = "0.980665"
		self.PdHdes_Notes = "Hot Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.UL_Value = "1372.34"
		self.UL_Notes = "Cold Side H.Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.ULalp_Value = "0"
		self.ULalp_Notes = "Cold Side H.T.Coef. Flow Factor"

		# Primary Parameters
		self.tlagL_Value = "0"
		self.tlagL_Notes = "C. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WLdes_Value = "5500"
		self.WLdes_Notes = "Cold Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DLdes_Value = "1021"
		self.DLdes_Notes = "Cold Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdLdes_Value = "5.88399"
		self.PdLdes_Notes = "Cold Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No.: Hot Side"

		# Primary Parameters
		self.s2_Value = "4"
		self.s2_Notes = "System No.: Cold Side"

		# Primary Parameters
		self.THSt_Value = "25"
		self.THSt_Notes = "Hot Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.TLSt_Value = "25"
		self.TLSt_Notes = "Cold Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.PdH_Value = "10"
		self.PdH_Notes = "Hot Side Pressure Drop[kPa]"

		# Primary Parameters
		self.PdL_Value = "10"
		self.PdL_Notes = "Cold Side Pressure Drop[kPa]"

class Block_E2301:
	def __init__(self):
		self.ID = 352
		self.Name = "E2301"
		self.Model = "TRANSI"
		self.Notes = "Ammeter(Power Conversion)"

		# Primary Parameters
		self.E_Value = "24"
		self.E_Notes = "Voltage[V]"

		# Primary Parameters
		self.eta_Value = "1"
		self.eta_Notes = "Overall Efficiency(0-1)[-]"

		# Primary Parameters
		self.Imax_Value = "100"
		self.Imax_Notes = "Maximum Current[A]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:mA,2:A,3:kA,4:%)"

		# Primary Parameters
		self.Ifail_Value = "0"
		self.Ifail_Notes = "Current on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.ph_Value = "0"
		self.ph_Notes = "Phase(0:Single phase,1:3-phase)"

class Block_E2303:
	def __init__(self):
		self.ID = 353
		self.Name = "E2303"
		self.Model = "HEATXB"
		self.Notes = "General-Purpose Heat Exchanger"

		# General Parameters
		self._NB_Value = "5"
		self._NB_Notes = "Number of segments"

		# Primary Parameters
		self.TYPE_Value = "1"
		self.TYPE_Notes = "0: Cocurrent 1:Countercurrent"

		# Primary Parameters
		self.A_Value = "2.6"
		self.A_Notes = "Heat Transfer Area[m2]"

		# Primary Parameters
		self.Gw_Value = "450"
		self.Gw_Notes = "Heat Transfer Wall Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "H.Trans. Wall Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aair_Value = "0"
		self.Aair_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uair_Value = "6"
		self.Uair_Notes = "Heat Trans. Coef. for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Tw_Value = "(5)"
		self.Tw_Notes = "Heat Transfer Wall Temp.[C]"

		# Primary Parameters List Value
		self.Tw_List_Value = array([30., 30., 30., 30., 30.])
		# Primary Parameters
		self.UH_Value = "46.52"
		self.UH_Notes = "Hot Side Heat Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.UHalp_Value = "0"
		self.UHalp_Notes = "Flow Exponent for Hot Side H.T. Coef.[-]"

		# Primary Parameters
		self.tlagH_Value = "0"
		self.tlagH_Notes = "H. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WHdes_Value = "9"
		self.WHdes_Notes = "Hot Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DHdes_Value = "2.1"
		self.DHdes_Notes = "Hot Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdHdes_Value = "19.6133"
		self.PdHdes_Notes = "Hot Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.UL_Value = "5815"
		self.UL_Notes = "Cold Side H.Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.ULalp_Value = "0"
		self.ULalp_Notes = "Cold Side H.T.Coef. Flow Factor"

		# Primary Parameters
		self.tlagL_Value = "0"
		self.tlagL_Notes = "C. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WLdes_Value = "250"
		self.WLdes_Notes = "Cold Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DLdes_Value = "6.76"
		self.DLdes_Notes = "Cold Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdLdes_Value = "9.80665"
		self.PdLdes_Notes = "Cold Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No.: Hot Side"

		# Primary Parameters
		self.s2_Value = "1"
		self.s2_Notes = "System No.: Cold Side"

		# Primary Parameters
		self.THSt_Value = "25"
		self.THSt_Notes = "Hot Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.TLSt_Value = "25"
		self.TLSt_Notes = "Cold Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.PdH_Value = "10"
		self.PdH_Notes = "Hot Side Pressure Drop[kPa]"

		# Primary Parameters
		self.PdL_Value = "10"
		self.PdL_Notes = "Cold Side Pressure Drop[kPa]"

class Block_E2501:
	def __init__(self):
		self.ID = 354
		self.Name = "E2501"
		self.Model = "HEATXB"
		self.Notes = "General-Purpose Heat Exchanger"

		# General Parameters
		self._NB_Value = "5"
		self._NB_Notes = "Number of segments"

		# Primary Parameters
		self.TYPE_Value = "1"
		self.TYPE_Notes = "0: Cocurrent 1:Countercurrent"

		# Primary Parameters
		self.A_Value = "10"
		self.A_Notes = "Heat Transfer Area[m2]"

		# Primary Parameters
		self.Gw_Value = "1000"
		self.Gw_Notes = "Heat Transfer Wall Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "H.Trans. Wall Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aair_Value = "0"
		self.Aair_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uair_Value = "6"
		self.Uair_Notes = "Heat Trans. Coef. for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Tw_Value = "(5)"
		self.Tw_Notes = "Heat Transfer Wall Temp.[C]"

		# Primary Parameters List Value
		self.Tw_List_Value = array([30., 30., 30., 30., 30.])
		# Primary Parameters
		self.UH_Value = "600"
		self.UH_Notes = "Hot Side Heat Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.UHalp_Value = "0"
		self.UHalp_Notes = "Flow Exponent for Hot Side H.T. Coef.[-]"

		# Primary Parameters
		self.tlagH_Value = "0"
		self.tlagH_Notes = "H. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WHdes_Value = "6000"
		self.WHdes_Notes = "Hot Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DHdes_Value = "1000"
		self.DHdes_Notes = "Hot Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdHdes_Value = "10"
		self.PdHdes_Notes = "Hot Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.UL_Value = "600"
		self.UL_Notes = "Cold Side H.Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.ULalp_Value = "0"
		self.ULalp_Notes = "Cold Side H.T.Coef. Flow Factor"

		# Primary Parameters
		self.tlagL_Value = "0"
		self.tlagL_Notes = "C. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WLdes_Value = "6000"
		self.WLdes_Notes = "Cold Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DLdes_Value = "1000"
		self.DLdes_Notes = "Cold Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdLdes_Value = "10"
		self.PdLdes_Notes = "Cold Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No.: Hot Side"

		# Primary Parameters
		self.s2_Value = "1"
		self.s2_Notes = "System No.: Cold Side"

		# Primary Parameters
		self.THSt_Value = "25"
		self.THSt_Notes = "Hot Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.TLSt_Value = "25"
		self.TLSt_Notes = "Cold Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.PdH_Value = "10"
		self.PdH_Notes = "Hot Side Pressure Drop[kPa]"

		# Primary Parameters
		self.PdL_Value = "10"
		self.PdL_Notes = "Cold Side Pressure Drop[kPa]"

class Block_E2502:
	def __init__(self):
		self.ID = 355
		self.Name = "E2502"
		self.Model = "HEATXB"
		self.Notes = "General-Purpose Heat Exchanger"

		# General Parameters
		self._NB_Value = "5"
		self._NB_Notes = "Number of segments"

		# Primary Parameters
		self.TYPE_Value = "1"
		self.TYPE_Notes = "0: Cocurrent 1:Countercurrent"

		# Primary Parameters
		self.A_Value = "20"
		self.A_Notes = "Heat Transfer Area[m2]"

		# Primary Parameters
		self.Gw_Value = "1400"
		self.Gw_Notes = "Heat Transfer Wall Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "H.Trans. Wall Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aair_Value = "0"
		self.Aair_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uair_Value = "6"
		self.Uair_Notes = "Heat Trans. Coef. for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Tw_Value = "(5)"
		self.Tw_Notes = "Heat Transfer Wall Temp.[C]"

		# Primary Parameters List Value
		self.Tw_List_Value = array([30., 30., 30., 30., 30.])
		# Primary Parameters
		self.UH_Value = "600"
		self.UH_Notes = "Hot Side Heat Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.UHalp_Value = "0"
		self.UHalp_Notes = "Flow Exponent for Hot Side H.T. Coef.[-]"

		# Primary Parameters
		self.tlagH_Value = "0"
		self.tlagH_Notes = "H. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WHdes_Value = "3500"
		self.WHdes_Notes = "Hot Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DHdes_Value = "1.11"
		self.DHdes_Notes = "Hot Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdHdes_Value = "10"
		self.PdHdes_Notes = "Hot Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.UL_Value = "600"
		self.UL_Notes = "Cold Side H.Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.ULalp_Value = "0"
		self.ULalp_Notes = "Cold Side H.T.Coef. Flow Factor"

		# Primary Parameters
		self.tlagL_Value = "0"
		self.tlagL_Notes = "C. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WLdes_Value = "11000"
		self.WLdes_Notes = "Cold Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DLdes_Value = "1000"
		self.DLdes_Notes = "Cold Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdLdes_Value = "10"
		self.PdLdes_Notes = "Cold Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No.: Hot Side"

		# Primary Parameters
		self.s2_Value = "1"
		self.s2_Notes = "System No.: Cold Side"

		# Primary Parameters
		self.THSt_Value = "25"
		self.THSt_Notes = "Hot Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.TLSt_Value = "25"
		self.TLSt_Notes = "Cold Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.PdH_Value = "10"
		self.PdH_Notes = "Hot Side Pressure Drop[kPa]"

		# Primary Parameters
		self.PdL_Value = "10"
		self.PdL_Notes = "Cold Side Pressure Drop[kPa]"

class Block_E2504:
	def __init__(self):
		self.ID = 356
		self.Name = "E2504"
		self.Model = "HEATXB"
		self.Notes = "General-Purpose Heat Exchanger"

		# General Parameters
		self._NB_Value = "5"
		self._NB_Notes = "Number of segments"

		# Primary Parameters
		self.TYPE_Value = "1"
		self.TYPE_Notes = "0: Cocurrent 1:Countercurrent"

		# Primary Parameters
		self.A_Value = "30"
		self.A_Notes = "Heat Transfer Area[m2]"

		# Primary Parameters
		self.Gw_Value = "1700"
		self.Gw_Notes = "Heat Transfer Wall Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "H.Trans. Wall Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aair_Value = "0"
		self.Aair_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uair_Value = "6"
		self.Uair_Notes = "Heat Trans. Coef. for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Tw_Value = "(5)"
		self.Tw_Notes = "Heat Transfer Wall Temp.[C]"

		# Primary Parameters List Value
		self.Tw_List_Value = array([30., 30., 30., 30., 30.])
		# Primary Parameters
		self.UH_Value = "1200"
		self.UH_Notes = "Hot Side Heat Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.UHalp_Value = "0"
		self.UHalp_Notes = "Flow Exponent for Hot Side H.T. Coef.[-]"

		# Primary Parameters
		self.tlagH_Value = "0"
		self.tlagH_Notes = "H. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WHdes_Value = "125000"
		self.WHdes_Notes = "Hot Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DHdes_Value = "1000"
		self.DHdes_Notes = "Hot Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdHdes_Value = "8.598"
		self.PdHdes_Notes = "Hot Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.UL_Value = "1200"
		self.UL_Notes = "Cold Side H.Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.ULalp_Value = "0"
		self.ULalp_Notes = "Cold Side H.T.Coef. Flow Factor"

		# Primary Parameters
		self.tlagL_Value = "0"
		self.tlagL_Notes = "C. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WLdes_Value = "89300"
		self.WLdes_Notes = "Cold Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DLdes_Value = "1000"
		self.DLdes_Notes = "Cold Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdLdes_Value = "8.0665"
		self.PdLdes_Notes = "Cold Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No.: Hot Side"

		# Primary Parameters
		self.s2_Value = "1"
		self.s2_Notes = "System No.: Cold Side"

		# Primary Parameters
		self.THSt_Value = "25"
		self.THSt_Notes = "Hot Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.TLSt_Value = "25"
		self.TLSt_Notes = "Cold Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.PdH_Value = "10"
		self.PdH_Notes = "Hot Side Pressure Drop[kPa]"

		# Primary Parameters
		self.PdL_Value = "10"
		self.PdL_Notes = "Cold Side Pressure Drop[kPa]"

class Block_E2901:
	def __init__(self):
		self.ID = 357
		self.Name = "E2901"
		self.Model = "HEATXB"
		self.Notes = "General-Purpose Heat Exchanger"

		# General Parameters
		self._NB_Value = "5"
		self._NB_Notes = "Number of segments"

		# Primary Parameters
		self.TYPE_Value = "1"
		self.TYPE_Notes = "0: Cocurrent 1:Countercurrent"

		# Primary Parameters
		self.A_Value = "4.1"
		self.A_Notes = "Heat Transfer Area[m2]"

		# Primary Parameters
		self.Gw_Value = "510"
		self.Gw_Notes = "Heat Transfer Wall Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "H.Trans. Wall Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aair_Value = "0"
		self.Aair_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uair_Value = "6"
		self.Uair_Notes = "Heat Trans. Coef. for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Tw_Value = "(5)"
		self.Tw_Notes = "Heat Transfer Wall Temp.[C]"

		# Primary Parameters List Value
		self.Tw_List_Value = array([30., 30., 30., 30., 30.])
		# Primary Parameters
		self.UH_Value = "100.018"
		self.UH_Notes = "Hot Side Heat Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.UHalp_Value = "0"
		self.UHalp_Notes = "Flow Exponent for Hot Side H.T. Coef.[-]"

		# Primary Parameters
		self.tlagH_Value = "0"
		self.tlagH_Notes = "H. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WHdes_Value = "408"
		self.WHdes_Notes = "Hot Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DHdes_Value = "1.68"
		self.DHdes_Notes = "Hot Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdHdes_Value = "3.92266"
		self.PdHdes_Notes = "Hot Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.UL_Value = "1798"
		self.UL_Notes = "Cold Side H.Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.ULalp_Value = "0"
		self.ULalp_Notes = "Cold Side H.T.Coef. Flow Factor"

		# Primary Parameters
		self.tlagL_Value = "0"
		self.tlagL_Notes = "C. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WLdes_Value = "1713"
		self.WLdes_Notes = "Cold Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DLdes_Value = "1000"
		self.DLdes_Notes = "Cold Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdLdes_Value = "1.96133"
		self.PdLdes_Notes = "Cold Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No.: Hot Side"

		# Primary Parameters
		self.s2_Value = "1"
		self.s2_Notes = "System No.: Cold Side"

		# Primary Parameters
		self.THSt_Value = "25"
		self.THSt_Notes = "Hot Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.TLSt_Value = "25"
		self.TLSt_Notes = "Cold Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.PdH_Value = "10"
		self.PdH_Notes = "Hot Side Pressure Drop[kPa]"

		# Primary Parameters
		self.PdL_Value = "10"
		self.PdL_Notes = "Cold Side Pressure Drop[kPa]"

class Block_E2921:
	def __init__(self):
		self.ID = 358
		self.Name = "E2921"
		self.Model = "HEATXB"
		self.Notes = "General-Purpose Heat Exchanger"

		# General Parameters
		self._NB_Value = "5"
		self._NB_Notes = "Number of segments"

		# Primary Parameters
		self.TYPE_Value = "1"
		self.TYPE_Notes = "0: Cocurrent 1:Countercurrent"

		# Primary Parameters
		self.A_Value = "15.8"
		self.A_Notes = "Heat Transfer Area[m2]"

		# Primary Parameters
		self.Gw_Value = "1020"
		self.Gw_Notes = "Heat Transfer Wall Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "H.Trans. Wall Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aair_Value = "0"
		self.Aair_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uair_Value = "6"
		self.Uair_Notes = "Heat Trans. Coef. for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Tw_Value = "(5)"
		self.Tw_Notes = "Heat Transfer Wall Temp.[C]"

		# Primary Parameters List Value
		self.Tw_List_Value = array([30., 30., 30., 30., 30.])
		# Primary Parameters
		self.UH_Value = "218.644"
		self.UH_Notes = "Hot Side Heat Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.UHalp_Value = "0"
		self.UHalp_Notes = "Flow Exponent for Hot Side H.T. Coef.[-]"

		# Primary Parameters
		self.tlagH_Value = "0"
		self.tlagH_Notes = "H. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WHdes_Value = "4200"
		self.WHdes_Notes = "Hot Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DHdes_Value = "835"
		self.DHdes_Notes = "Hot Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdHdes_Value = "2.94199"
		self.PdHdes_Notes = "Hot Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.UL_Value = "1159.51"
		self.UL_Notes = "Cold Side H.Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.ULalp_Value = "0"
		self.ULalp_Notes = "Cold Side H.T.Coef. Flow Factor"

		# Primary Parameters
		self.tlagL_Value = "0"
		self.tlagL_Notes = "C. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WLdes_Value = "3200"
		self.WLdes_Notes = "Cold Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DLdes_Value = "1000"
		self.DLdes_Notes = "Cold Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdLdes_Value = "2.94199"
		self.PdLdes_Notes = "Cold Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No.: Hot Side"

		# Primary Parameters
		self.s2_Value = "1"
		self.s2_Notes = "System No.: Cold Side"

		# Primary Parameters
		self.THSt_Value = "25"
		self.THSt_Notes = "Hot Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.TLSt_Value = "25"
		self.TLSt_Notes = "Cold Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.PdH_Value = "10"
		self.PdH_Notes = "Hot Side Pressure Drop[kPa]"

		# Primary Parameters
		self.PdL_Value = "10"
		self.PdL_Notes = "Cold Side Pressure Drop[kPa]"

class Block_E2922:
	def __init__(self):
		self.ID = 359
		self.Name = "E2922"
		self.Model = "HEATXB"
		self.Notes = "General-Purpose Heat Exchanger"

		# General Parameters
		self._NB_Value = "5"
		self._NB_Notes = "Number of segments"

		# Primary Parameters
		self.TYPE_Value = "1"
		self.TYPE_Notes = "0: Cocurrent 1:Countercurrent"

		# Primary Parameters
		self.A_Value = "25.1"
		self.A_Notes = "Heat Transfer Area[m2]"

		# Primary Parameters
		self.Gw_Value = "1630"
		self.Gw_Notes = "Heat Transfer Wall Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "H.Trans. Wall Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aair_Value = "0"
		self.Aair_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uair_Value = "6"
		self.Uair_Notes = "Heat Trans. Coef. for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Tw_Value = "(5)"
		self.Tw_Notes = "Heat Transfer Wall Temp.[C]"

		# Primary Parameters List Value
		self.Tw_List_Value = array([30., 30., 30., 30., 30.])
		# Primary Parameters
		self.UH_Value = "234.926"
		self.UH_Notes = "Hot Side Heat Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.UHalp_Value = "0"
		self.UHalp_Notes = "Flow Exponent for Hot Side H.T. Coef.[-]"

		# Primary Parameters
		self.tlagH_Value = "0"
		self.tlagH_Notes = "H. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WHdes_Value = "7961"
		self.WHdes_Notes = "Hot Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DHdes_Value = "835"
		self.DHdes_Notes = "Hot Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdHdes_Value = "4.90332"
		self.PdHdes_Notes = "Hot Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.UL_Value = "1418.86"
		self.UL_Notes = "Cold Side H.Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.ULalp_Value = "0"
		self.ULalp_Notes = "Cold Side H.T.Coef. Flow Factor"

		# Primary Parameters
		self.tlagL_Value = "0"
		self.tlagL_Notes = "C. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WLdes_Value = "6100"
		self.WLdes_Notes = "Cold Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DLdes_Value = "1000"
		self.DLdes_Notes = "Cold Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdLdes_Value = "2.94199"
		self.PdLdes_Notes = "Cold Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No.: Hot Side"

		# Primary Parameters
		self.s2_Value = "1"
		self.s2_Notes = "System No.: Cold Side"

		# Primary Parameters
		self.THSt_Value = "25"
		self.THSt_Notes = "Hot Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.TLSt_Value = "25"
		self.TLSt_Notes = "Cold Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.PdH_Value = "10"
		self.PdH_Notes = "Hot Side Pressure Drop[kPa]"

		# Primary Parameters
		self.PdL_Value = "10"
		self.PdL_Notes = "Cold Side Pressure Drop[kPa]"

class Block_E2923:
	def __init__(self):
		self.ID = 360
		self.Name = "E2923"
		self.Model = "HEATXB"
		self.Notes = "General-Purpose Heat Exchanger"

		# General Parameters
		self._NB_Value = "5"
		self._NB_Notes = "Number of segments"

		# Primary Parameters
		self.TYPE_Value = "1"
		self.TYPE_Notes = "0: Cocurrent 1:Countercurrent"

		# Primary Parameters
		self.A_Value = "17.1"
		self.A_Notes = "Heat Transfer Area[m2]"

		# Primary Parameters
		self.Gw_Value = "1590"
		self.Gw_Notes = "Heat Transfer Wall Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "H.Trans. Wall Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aair_Value = "0"
		self.Aair_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uair_Value = "6"
		self.Uair_Notes = "Heat Trans. Coef. for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Tw_Value = "(5)"
		self.Tw_Notes = "Heat Transfer Wall Temp.[C]"

		# Primary Parameters List Value
		self.Tw_List_Value = array([25., 25., 25., 25., 25.])
		# Primary Parameters
		self.UH_Value = "277.957"
		self.UH_Notes = "Hot Side Heat Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.UHalp_Value = "0"
		self.UHalp_Notes = "Flow Exponent for Hot Side H.T. Coef.[-]"

		# Primary Parameters
		self.tlagH_Value = "0"
		self.tlagH_Notes = "H. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WHdes_Value = "4809"
		self.WHdes_Notes = "Hot Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DHdes_Value = "835"
		self.DHdes_Notes = "Hot Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdHdes_Value = "6.86466"
		self.PdHdes_Notes = "Hot Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.UL_Value = "1244.41"
		self.UL_Notes = "Cold Side H.Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.ULalp_Value = "0"
		self.ULalp_Notes = "Cold Side H.T.Coef. Flow Factor"

		# Primary Parameters
		self.tlagL_Value = "0"
		self.tlagL_Notes = "C. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WLdes_Value = "3700"
		self.WLdes_Notes = "Cold Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DLdes_Value = "1000"
		self.DLdes_Notes = "Cold Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdLdes_Value = "2.94199"
		self.PdLdes_Notes = "Cold Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No.: Hot Side"

		# Primary Parameters
		self.s2_Value = "1"
		self.s2_Notes = "System No.: Cold Side"

		# Primary Parameters
		self.THSt_Value = "25"
		self.THSt_Notes = "Hot Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.TLSt_Value = "25"
		self.TLSt_Notes = "Cold Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.PdH_Value = "10"
		self.PdH_Notes = "Hot Side Pressure Drop[kPa]"

		# Primary Parameters
		self.PdL_Value = "10"
		self.PdL_Notes = "Cold Side Pressure Drop[kPa]"

class Block_E2931A:
	def __init__(self):
		self.ID = 361
		self.Name = "E2931A"
		self.Model = "HEATXB"
		self.Notes = "General-Purpose Heat Exchanger"

		# General Parameters
		self._NB_Value = "5"
		self._NB_Notes = "Number of segments"

		# Primary Parameters
		self.TYPE_Value = "1"
		self.TYPE_Notes = "0: Cocurrent 1:Countercurrent"

		# Primary Parameters
		self.A_Value = "3.7"
		self.A_Notes = "Heat Transfer Area[m2]"

		# Primary Parameters
		self.Gw_Value = "560"
		self.Gw_Notes = "Heat Transfer Wall Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "H.Trans. Wall Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aair_Value = "0"
		self.Aair_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uair_Value = "6"
		self.Uair_Notes = "Heat Trans. Coef. for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Tw_Value = "(5)"
		self.Tw_Notes = "Heat Transfer Wall Temp.[C]"

		# Primary Parameters List Value
		self.Tw_List_Value = array([25., 25., 25., 25., 25.])
		# Primary Parameters
		self.UH_Value = "1893"
		self.UH_Notes = "Hot Side Heat Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.UHalp_Value = "0"
		self.UHalp_Notes = "Flow Exponent for Hot Side H.T. Coef.[-]"

		# Primary Parameters
		self.tlagH_Value = "0"
		self.tlagH_Notes = "H. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WHdes_Value = "75"
		self.WHdes_Notes = "Hot Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DHdes_Value = "2"
		self.DHdes_Notes = "Hot Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdHdes_Value = "9.8"
		self.PdHdes_Notes = "Hot Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.UL_Value = "1893.36"
		self.UL_Notes = "Cold Side H.Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.ULalp_Value = "0"
		self.ULalp_Notes = "Cold Side H.T.Coef. Flow Factor"

		# Primary Parameters
		self.tlagL_Value = "0"
		self.tlagL_Notes = "C. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WLdes_Value = "5095"
		self.WLdes_Notes = "Cold Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DLdes_Value = "1000"
		self.DLdes_Notes = "Cold Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdLdes_Value = "0.980665"
		self.PdLdes_Notes = "Cold Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No.: Hot Side"

		# Primary Parameters
		self.s2_Value = "1"
		self.s2_Notes = "System No.: Cold Side"

		# Primary Parameters
		self.THSt_Value = "25"
		self.THSt_Notes = "Hot Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.TLSt_Value = "25"
		self.TLSt_Notes = "Cold Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.PdH_Value = "10"
		self.PdH_Notes = "Hot Side Pressure Drop[kPa]"

		# Primary Parameters
		self.PdL_Value = "10"
		self.PdL_Notes = "Cold Side Pressure Drop[kPa]"

class Block_E2941:
	def __init__(self):
		self.ID = 362
		self.Name = "E2941"
		self.Model = "HEATXB"
		self.Notes = "General-Purpose Heat Exchanger"

		# General Parameters
		self._NB_Value = "5"
		self._NB_Notes = "Number of segments"

		# Primary Parameters
		self.TYPE_Value = "1"
		self.TYPE_Notes = "0: Cocurrent 1:Countercurrent"

		# Primary Parameters
		self.A_Value = "100"
		self.A_Notes = "Heat Transfer Area[m2]"

		# Primary Parameters
		self.Gw_Value = "1690"
		self.Gw_Notes = "Heat Transfer Wall Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "H.Trans. Wall Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aair_Value = "0"
		self.Aair_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uair_Value = "6"
		self.Uair_Notes = "Heat Trans. Coef. for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Tw_Value = "(5)"
		self.Tw_Notes = "Heat Transfer Wall Temp.[C]"

		# Primary Parameters List Value
		self.Tw_List_Value = array([30., 30., 30., 30., 30.])
		# Primary Parameters
		self.UH_Value = "600"
		self.UH_Notes = "Hot Side Heat Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.UHalp_Value = "0"
		self.UHalp_Notes = "Flow Exponent for Hot Side H.T. Coef.[-]"

		# Primary Parameters
		self.tlagH_Value = "0"
		self.tlagH_Notes = "H. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WHdes_Value = "110000"
		self.WHdes_Notes = "Hot Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DHdes_Value = "1000"
		self.DHdes_Notes = "Hot Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdHdes_Value = "10"
		self.PdHdes_Notes = "Hot Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.UL_Value = "600"
		self.UL_Notes = "Cold Side H.Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.ULalp_Value = "0"
		self.ULalp_Notes = "Cold Side H.T.Coef. Flow Factor"

		# Primary Parameters
		self.tlagL_Value = "0"
		self.tlagL_Notes = "C. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WLdes_Value = "90000"
		self.WLdes_Notes = "Cold Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DLdes_Value = "1000"
		self.DLdes_Notes = "Cold Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdLdes_Value = "10"
		self.PdLdes_Notes = "Cold Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No.: Hot Side"

		# Primary Parameters
		self.s2_Value = "1"
		self.s2_Notes = "System No.: Cold Side"

		# Primary Parameters
		self.THSt_Value = "25"
		self.THSt_Notes = "Hot Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.TLSt_Value = "25"
		self.TLSt_Notes = "Cold Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.PdH_Value = "10"
		self.PdH_Notes = "Hot Side Pressure Drop[kPa]"

		# Primary Parameters
		self.PdL_Value = "10"
		self.PdL_Notes = "Cold Side Pressure Drop[kPa]"

class Block_E2951:
	def __init__(self):
		self.ID = 363
		self.Name = "E2951"
		self.Model = "HEATXB"
		self.Notes = "General-Purpose Heat Exchanger"

		# General Parameters
		self._NB_Value = "5"
		self._NB_Notes = "Number of segments"

		# Primary Parameters
		self.TYPE_Value = "1"
		self.TYPE_Notes = "0: Cocurrent 1:Countercurrent"

		# Primary Parameters
		self.A_Value = "7.3"
		self.A_Notes = "Heat Transfer Area[m2]"

		# Primary Parameters
		self.Gw_Value = "950"
		self.Gw_Notes = "Heat Transfer Wall Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "H.Trans. Wall Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aair_Value = "0"
		self.Aair_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uair_Value = "6"
		self.Uair_Notes = "Heat Trans. Coef. for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Tw_Value = "(5)"
		self.Tw_Notes = "Heat Transfer Wall Temp.[C]"

		# Primary Parameters List Value
		self.Tw_List_Value = array([30., 30., 30., 30., 30.])
		# Primary Parameters
		self.UH_Value = "7759.54"
		self.UH_Notes = "Hot Side Heat Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.UHalp_Value = "0"
		self.UHalp_Notes = "Flow Exponent for Hot Side H.T. Coef.[-]"

		# Primary Parameters
		self.tlagH_Value = "0"
		self.tlagH_Notes = "H. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WHdes_Value = "62"
		self.WHdes_Notes = "Hot Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DHdes_Value = "18.6"
		self.DHdes_Notes = "Hot Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdHdes_Value = "9.80665"
		self.PdHdes_Notes = "Hot Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.UL_Value = "68.617"
		self.UL_Notes = "Cold Side H.Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.ULalp_Value = "0"
		self.ULalp_Notes = "Cold Side H.T.Coef. Flow Factor"

		# Primary Parameters
		self.tlagL_Value = "0"
		self.tlagL_Notes = "C. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WLdes_Value = "500"
		self.WLdes_Notes = "Cold Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DLdes_Value = "1.4"
		self.DLdes_Notes = "Cold Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdLdes_Value = "1.96133"
		self.PdLdes_Notes = "Cold Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No.: Hot Side"

		# Primary Parameters
		self.s2_Value = "1"
		self.s2_Notes = "System No.: Cold Side"

		# Primary Parameters
		self.THSt_Value = "25"
		self.THSt_Notes = "Hot Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.TLSt_Value = "25"
		self.TLSt_Notes = "Cold Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.PdH_Value = "10"
		self.PdH_Notes = "Hot Side Pressure Drop[kPa]"

		# Primary Parameters
		self.PdL_Value = "10"
		self.PdL_Notes = "Cold Side Pressure Drop[kPa]"

class Block_E2952:
	def __init__(self):
		self.ID = 364
		self.Name = "E2952"
		self.Model = "HEATXC_V"
		self.Notes = "General-Purpose Heat Exchanger"

		# General Parameters
		self._NB_Value = "5"
		self._NB_Notes = "Number of Segments"

		# Primary Parameters
		self.TYPE_Value = "1"
		self.TYPE_Notes = "Flow Type(0:Cocurrent,1:Countercurrent)"

		# Primary Parameters
		self.A_Value = "9.2"
		self.A_Notes = "Heat Transfer Area[m2]"

		# Primary Parameters
		self.Gw_Value = "900"
		self.Gw_Notes = "Heat Transfer Wall Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "H.Trans. Wall Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aair_Value = "0"
		self.Aair_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uair_Value = "6"
		self.Uair_Notes = "Heat Trans. Coef. for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Tw_Value = "(5)"
		self.Tw_Notes = "Heat Transfer Wall Temp.[C]"

		# Primary Parameters List Value
		self.Tw_List_Value = array([30., 30., 30., 30., 30.])
		# Primary Parameters
		self.PH_Value = "101.325"
		self.PH_Notes = "Hot Side Internal Pressure[kPa]"

		# Primary Parameters
		self.VH_Value = "3"
		self.VH_Notes = "Hot Side Volume[m3]"

		# Primary Parameters
		self.UHv_Value = "120"
		self.UHv_Notes = "Hot Side Vap. H.T.Coef.[W/m2K]"

		# Primary Parameters
		self.UHc_Value = "1200"
		self.UHc_Notes = "H.T.Coef. of Condensation[W/m2K]"

		# Primary Parameters
		self.WHdes_Value = "500"
		self.WHdes_Notes = "Hot Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DHdes_Value = "1.35"
		self.DHdes_Notes = "Hot Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdHdes_Value = "17.652"
		self.PdHdes_Notes = "Hot Side Design Pres.Drop[kPa]"

		# Primary Parameters
		self.LHhigh_Value = "1"
		self.LHhigh_Notes = "Hot Side H.T.Area Max. Level[m]"

		# Primary Parameters
		self.LHlow_Value = "0"
		self.LHlow_Notes = "Hot Side H.T.Area Min. Level[m]"

		# Primary Parameters
		self.yH0_Value = "(31)"
		self.yH0_Notes = "Hot Vapor Initial Composition[mol/mol]"

		# Primary Parameters List Value
		self.yH0_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.sep_lv_Value = "1"
		self.sep_lv_Notes = "Condensate Separation Flag(0:No,1:Yes)"

		# Primary Parameters
		self.Ce_Value = "10"
		self.Ce_Notes = "Evaporation Rate Parameter[1/h]"

		# Primary Parameters
		self.LHmin_Value = "0"
		self.LHmin_Notes = "Min. Condensate Level for Discharge[m]"

		# Primary Parameters
		self.uH_Value = "(31)"
		self.uH_Notes = "Condensate. Comp. Holdup[kmol]"

		# Primary Parameters List Value
		self.uH_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.UHl_Value = "120"
		self.UHl_Notes = "Subcool Heat Transfer Coef.[W/m2K]"

		# Primary Parameters
		self.AsH_Value = "1"
		self.AsH_Notes = "Hot Side Liquid Cross Sec.Area[m2]"

		# Primary Parameters
		self.UL_Value = "2415.55"
		self.UL_Notes = "Cold Side H.Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.WLdes_Value = "4750"
		self.WLdes_Notes = "Cold Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DLdes_Value = "1000"
		self.DLdes_Notes = "Cold Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdLdes_Value = "6.86466"
		self.PdLdes_Notes = "Cold Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.ULalp_Value = "0"
		self.ULalp_Notes = "Cold Side H.T.Coef. Flow Factor"

		# Primary Parameters
		self.tlagL_Value = "0"
		self.tlagL_Notes = "C. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No.: Hot Side"

		# Primary Parameters
		self.s2_Value = "1"
		self.s2_Notes = "System No.: Cold Side"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.LHSt_Value = "0.5"
		self.LHSt_Notes = "Condensate Level Start Value[m]"

		# Primary Parameters
		self.PHSt_Value = "101.325"
		self.PHSt_Notes = "Hot Side Pressure Start Value[kPa]"

		# Primary Parameters
		self.THSt_Value = "25"
		self.THSt_Notes = "Hot Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.TLSt_Value = "25"
		self.TLSt_Notes = "Cold Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Non-condensate Gas Comp. Start Value"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Condensate Composition Start Value"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.PdH_Value = "10"
		self.PdH_Notes = "Hot Side Pressure Drop[kPa]"

		# Primary Parameters
		self.PdL_Value = "10"
		self.PdL_Notes = "Cold Side Pressure Drop[kPa]"

		# Primary Parameters
		self.rRv_Value = "0.3"
		self.rRv_Notes = "Ratio of Non-condensate[-]"

		# Primary Parameters
		self.rInert_Value = "0"
		self.rInert_Notes = "Heat Transfer Decrease by Inert Gas[-]"

		# Primary Parameters
		self.yInert_Value = "(31)"
		self.yInert_Notes = "Composition of Inert Gas"

		# Primary Parameters List Value
		self.yInert_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.freeLH_Value = "0"
		self.freeLH_Notes = "Set Hot Side Level Free(1:Free)"

class Block_ET2211:
	def __init__(self):
		self.ID = 365
		self.Name = "ET2211"
		self.Model = "TRANSI"
		self.Notes = "Ammeter(Power Conversion)"

		# Primary Parameters
		self.E_Value = "24"
		self.E_Notes = "Voltage[V]"

		# Primary Parameters
		self.eta_Value = "1"
		self.eta_Notes = "Overall Efficiency(0-1)[-]"

		# Primary Parameters
		self.Imax_Value = "400"
		self.Imax_Notes = "Maximum Current[A]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:mA,2:A,3:kA,4:%)"

		# Primary Parameters
		self.Ifail_Value = "0"
		self.Ifail_Notes = "Current on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.ph_Value = "0"
		self.ph_Notes = "Phase(0:Single phase,1:3-phase)"

class Block_ET2212A:
	def __init__(self):
		self.ID = 366
		self.Name = "ET2212A"
		self.Model = "TRANSI"
		self.Notes = "Ammeter(Power Conversion)"

		# Primary Parameters
		self.E_Value = "24"
		self.E_Notes = "Voltage[V]"

		# Primary Parameters
		self.eta_Value = "1"
		self.eta_Notes = "Overall Efficiency(0-1)[-]"

		# Primary Parameters
		self.Imax_Value = "100"
		self.Imax_Notes = "Maximum Current[A]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:mA,2:A,3:kA,4:%)"

		# Primary Parameters
		self.Ifail_Value = "0"
		self.Ifail_Notes = "Current on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.ph_Value = "0"
		self.ph_Notes = "Phase(0:Single phase,1:3-phase)"

class Block_ET2212B:
	def __init__(self):
		self.ID = 367
		self.Name = "ET2212B"
		self.Model = "TRANSI"
		self.Notes = "Ammeter(Power Conversion)"

		# Primary Parameters
		self.E_Value = "24"
		self.E_Notes = "Voltage[V]"

		# Primary Parameters
		self.eta_Value = "1"
		self.eta_Notes = "Overall Efficiency(0-1)[-]"

		# Primary Parameters
		self.Imax_Value = "100"
		self.Imax_Notes = "Maximum Current[A]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:mA,2:A,3:kA,4:%)"

		# Primary Parameters
		self.Ifail_Value = "0"
		self.Ifail_Notes = "Current on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.ph_Value = "0"
		self.ph_Notes = "Phase(0:Single phase,1:3-phase)"

class Block_ET2231:
	def __init__(self):
		self.ID = 368
		self.Name = "ET2231"
		self.Model = "TRANSI"
		self.Notes = "Ammeter(Power Conversion)"

		# Primary Parameters
		self.E_Value = "24"
		self.E_Notes = "Voltage[V]"

		# Primary Parameters
		self.eta_Value = "1"
		self.eta_Notes = "Overall Efficiency(0-1)[-]"

		# Primary Parameters
		self.Imax_Value = "100"
		self.Imax_Notes = "Maximum Current[A]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:mA,2:A,3:kA,4:%)"

		# Primary Parameters
		self.Ifail_Value = "0"
		self.Ifail_Notes = "Current on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.ph_Value = "0"
		self.ph_Notes = "Phase(0:Single phase,1:3-phase)"

class Block_ET2232:
	def __init__(self):
		self.ID = 369
		self.Name = "ET2232"
		self.Model = "TRANSI"
		self.Notes = "Ammeter(Power Conversion)"

		# Primary Parameters
		self.E_Value = "24"
		self.E_Notes = "Voltage[V]"

		# Primary Parameters
		self.eta_Value = "1"
		self.eta_Notes = "Overall Efficiency(0-1)[-]"

		# Primary Parameters
		self.Imax_Value = "600"
		self.Imax_Notes = "Maximum Current[A]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:mA,2:A,3:kA,4:%)"

		# Primary Parameters
		self.Ifail_Value = "0"
		self.Ifail_Notes = "Current on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.ph_Value = "0"
		self.ph_Notes = "Phase(0:Single phase,1:3-phase)"

class Block_ET2551:
	def __init__(self):
		self.ID = 370
		self.Name = "ET2551"
		self.Model = "TRANSI"
		self.Notes = "Ammeter(Power Conversion)"

		# Primary Parameters
		self.E_Value = "24"
		self.E_Notes = "Voltage[V]"

		# Primary Parameters
		self.eta_Value = "1"
		self.eta_Notes = "Overall Efficiency(0-1)[-]"

		# Primary Parameters
		self.Imax_Value = "2"
		self.Imax_Notes = "Maximum Current[A]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:mA,2:A,3:kA,4:%)"

		# Primary Parameters
		self.Ifail_Value = "0"
		self.Ifail_Notes = "Current on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.ph_Value = "0"
		self.ph_Notes = "Phase(0:Single phase,1:3-phase)"

class Block_ET2571A:
	def __init__(self):
		self.ID = 371
		self.Name = "ET2571A"
		self.Model = "TRANSI"
		self.Notes = "Ammeter(Power Conversion)"

		# Primary Parameters
		self.E_Value = "24"
		self.E_Notes = "Voltage[V]"

		# Primary Parameters
		self.eta_Value = "1"
		self.eta_Notes = "Overall Efficiency(0-1)[-]"

		# Primary Parameters
		self.Imax_Value = "300"
		self.Imax_Notes = "Maximum Current[A]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:mA,2:A,3:kA,4:%)"

		# Primary Parameters
		self.Ifail_Value = "0"
		self.Ifail_Notes = "Current on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.ph_Value = "0"
		self.ph_Notes = "Phase(0:Single phase,1:3-phase)"

class Block_ET2571B:
	def __init__(self):
		self.ID = 372
		self.Name = "ET2571B"
		self.Model = "TRANSI"
		self.Notes = "Ammeter(Power Conversion)"

		# Primary Parameters
		self.E_Value = "24"
		self.E_Notes = "Voltage[V]"

		# Primary Parameters
		self.eta_Value = "1"
		self.eta_Notes = "Overall Efficiency(0-1)[-]"

		# Primary Parameters
		self.Imax_Value = "300"
		self.Imax_Notes = "Maximum Current[A]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:mA,2:A,3:kA,4:%)"

		# Primary Parameters
		self.Ifail_Value = "0"
		self.Ifail_Notes = "Current on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.ph_Value = "0"
		self.ph_Notes = "Phase(0:Single phase,1:3-phase)"

class Block_FC2001:
	def __init__(self):
		self.ID = 373
		self.Name = "FC2001"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "120"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "35"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([8000.,    0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_FC2003:
	def __init__(self):
		self.ID = 374
		self.Name = "FC2003"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "100"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "30"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([10.,  0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_FC2004:
	def __init__(self):
		self.ID = 375
		self.Name = "FC2004"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "100"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "30"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([300.,   0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_FC2110:
	def __init__(self):
		self.ID = 376
		self.Name = "FC2110"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "100"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "30"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([100.,   0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_FC2140:
	def __init__(self):
		self.ID = 377
		self.Name = "FC2140"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "100"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "30"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([1500.,    0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_FC2210:
	def __init__(self):
		self.ID = 378
		self.Name = "FC2210"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "200"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "40"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([150.,   0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_FC2211:
	def __init__(self):
		self.ID = 379
		self.Name = "FC2211"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "100"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "30"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([30.,  0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_FC2213:
	def __init__(self):
		self.ID = 380
		self.Name = "FC2213"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "100"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "30"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([4000.,    0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_FC2215:
	def __init__(self):
		self.ID = 381
		self.Name = "FC2215"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "200"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "35"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([20000.,     0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_FC2216:
	def __init__(self):
		self.ID = 382
		self.Name = "FC2216"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "150"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "35"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([300.,   0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_FC2217:
	def __init__(self):
		self.ID = 383
		self.Name = "FC2217"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "150"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "50"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([12.,  0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_FC2218:
	def __init__(self):
		self.ID = 384
		self.Name = "FC2218"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "150"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "50"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([8., 0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_FC2219:
	def __init__(self):
		self.ID = 385
		self.Name = "FC2219"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "100"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "30"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([2000.,    0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_FC2231:
	def __init__(self):
		self.ID = 386
		self.Name = "FC2231"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "120"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "35"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([2., 0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_FC2263:
	def __init__(self):
		self.ID = 387
		self.Name = "FC2263"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "150"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "35"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([40.,  0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_FC2268:
	def __init__(self):
		self.ID = 388
		self.Name = "FC2268"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "150"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "35"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([30.,  0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_FC2276:
	def __init__(self):
		self.ID = 389
		self.Name = "FC2276"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "150"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "35"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([12.,  0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_FC2277:
	def __init__(self):
		self.ID = 390
		self.Name = "FC2277"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "150"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "50"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([10.,  0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_FC2280:
	def __init__(self):
		self.ID = 391
		self.Name = "FC2280"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "200"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "50"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([20.,  0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_FC2282:
	def __init__(self):
		self.ID = 392
		self.Name = "FC2282"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "150"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "35"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([100.,   0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_FC2283:
	def __init__(self):
		self.ID = 393
		self.Name = "FC2283"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "100"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "35"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([5., 0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_FC2286:
	def __init__(self):
		self.ID = 394
		self.Name = "FC2286"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "100"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "35"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([25.,  0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_FC2287:
	def __init__(self):
		self.ID = 395
		self.Name = "FC2287"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "150"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "35"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([20.,  0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_FC2289:
	def __init__(self):
		self.ID = 396
		self.Name = "FC2289"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "150"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "35"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([20.,  0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_FC2290:
	def __init__(self):
		self.ID = 397
		self.Name = "FC2290"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "100"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "30"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([12.,  0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_FC2293:
	def __init__(self):
		self.ID = 398
		self.Name = "FC2293"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "150"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "35"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([10.,  0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_FC2513:
	def __init__(self):
		self.ID = 399
		self.Name = "FC2513"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "150"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "50"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([8., 0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_FC2514:
	def __init__(self):
		self.ID = 400
		self.Name = "FC2514"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "150"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "50"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([80.,  0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_FC2515:
	def __init__(self):
		self.ID = 401
		self.Name = "FC2515"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "150"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "50"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([20.,  0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_FCZ25011:
	def __init__(self):
		self.ID = 402
		self.Name = "FCZ25011"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "200"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "50"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([6500.,    0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "1"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_FD2300101:
	def __init__(self):
		self.ID = 403
		self.Name = "FD2300101"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "16"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2300102:
	def __init__(self):
		self.ID = 404
		self.Name = "FD2300102"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "36"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2300103:
	def __init__(self):
		self.ID = 405
		self.Name = "FD2300103"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "256"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2300104:
	def __init__(self):
		self.ID = 406
		self.Name = "FD2300104"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "36"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2300105:
	def __init__(self):
		self.ID = 407
		self.Name = "FD2300105"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "13"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2300106:
	def __init__(self):
		self.ID = 408
		self.Name = "FD2300106"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "99"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2300107:
	def __init__(self):
		self.ID = 409
		self.Name = "FD2300107"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "6"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2300108:
	def __init__(self):
		self.ID = 410
		self.Name = "FD2300108"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "100"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2300109:
	def __init__(self):
		self.ID = 411
		self.Name = "FD2300109"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "64"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2300110:
	def __init__(self):
		self.ID = 412
		self.Name = "FD2300110"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "64"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2300111:
	def __init__(self):
		self.ID = 413
		self.Name = "FD2300111"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "64"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2300112:
	def __init__(self):
		self.ID = 414
		self.Name = "FD2300112"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "64"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2300113:
	def __init__(self):
		self.ID = 415
		self.Name = "FD2300113"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "10"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2300114:
	def __init__(self):
		self.ID = 416
		self.Name = "FD2300114"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "16"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2300201:
	def __init__(self):
		self.ID = 417
		self.Name = "FD2300201"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "256"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2300202:
	def __init__(self):
		self.ID = 418
		self.Name = "FD2300202"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "256"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2300203:
	def __init__(self):
		self.ID = 419
		self.Name = "FD2300203"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "256"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2300204:
	def __init__(self):
		self.ID = 420
		self.Name = "FD2300204"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "256"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2300205:
	def __init__(self):
		self.ID = 421
		self.Name = "FD2300205"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.24"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2300206:
	def __init__(self):
		self.ID = 422
		self.Name = "FD2300206"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.24"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2300207:
	def __init__(self):
		self.ID = 423
		self.Name = "FD2300207"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "200"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2300208:
	def __init__(self):
		self.ID = 424
		self.Name = "FD2300208"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "200"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2300209:
	def __init__(self):
		self.ID = 425
		self.Name = "FD2300209"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "200"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2300210:
	def __init__(self):
		self.ID = 426
		self.Name = "FD2300210"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "200"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2300211:
	def __init__(self):
		self.ID = 427
		self.Name = "FD2300211"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "64"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2300212:
	def __init__(self):
		self.ID = 428
		self.Name = "FD2300212"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "64"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2300213:
	def __init__(self):
		self.ID = 429
		self.Name = "FD2300213"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "2"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2300214:
	def __init__(self):
		self.ID = 430
		self.Name = "FD2300214"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "2"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2300301:
	def __init__(self):
		self.ID = 431
		self.Name = "FD2300301"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "256"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2300302:
	def __init__(self):
		self.ID = 432
		self.Name = "FD2300302"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "256"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2300303:
	def __init__(self):
		self.ID = 433
		self.Name = "FD2300303"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "256"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2300304:
	def __init__(self):
		self.ID = 434
		self.Name = "FD2300304"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "256"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2300305:
	def __init__(self):
		self.ID = 435
		self.Name = "FD2300305"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "256"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2300306:
	def __init__(self):
		self.ID = 436
		self.Name = "FD2300306"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "256"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2300307:
	def __init__(self):
		self.ID = 437
		self.Name = "FD2300307"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "64"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2300308:
	def __init__(self):
		self.ID = 438
		self.Name = "FD2300308"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "64"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2300309:
	def __init__(self):
		self.ID = 439
		self.Name = "FD2300309"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "256"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2300310:
	def __init__(self):
		self.ID = 440
		self.Name = "FD2300310"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "256"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2300311:
	def __init__(self):
		self.ID = 441
		self.Name = "FD2300311"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "256"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2300312:
	def __init__(self):
		self.ID = 442
		self.Name = "FD2300312"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "256"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2300313:
	def __init__(self):
		self.ID = 443
		self.Name = "FD2300313"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "256"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2300314:
	def __init__(self):
		self.ID = 444
		self.Name = "FD2300314"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "64"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2300315:
	def __init__(self):
		self.ID = 445
		self.Name = "FD2300315"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "256"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310101:
	def __init__(self):
		self.ID = 446
		self.Name = "FD2310101"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "5"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310102:
	def __init__(self):
		self.ID = 447
		self.Name = "FD2310102"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310103:
	def __init__(self):
		self.ID = 448
		self.Name = "FD2310103"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "49"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_FD2310104:
	def __init__(self):
		self.ID = 449
		self.Name = "FD2310104"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "8"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310105:
	def __init__(self):
		self.ID = 450
		self.Name = "FD2310105"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "11"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_FD2310106:
	def __init__(self):
		self.ID = 451
		self.Name = "FD2310106"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "6"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310107:
	def __init__(self):
		self.ID = 452
		self.Name = "FD2310107"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "9"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "2"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310108:
	def __init__(self):
		self.ID = 453
		self.Name = "FD2310108"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "256"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310109:
	def __init__(self):
		self.ID = 454
		self.Name = "FD2310109"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "144"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310110:
	def __init__(self):
		self.ID = 455
		self.Name = "FD2310110"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "6"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_FD2310111:
	def __init__(self):
		self.ID = 456
		self.Name = "FD2310111"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "44"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310112:
	def __init__(self):
		self.ID = 457
		self.Name = "FD2310112"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.3"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_FD2310113:
	def __init__(self):
		self.ID = 458
		self.Name = "FD2310113"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.26"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_FD2310114:
	def __init__(self):
		self.ID = 459
		self.Name = "FD2310114"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310115:
	def __init__(self):
		self.ID = 460
		self.Name = "FD2310115"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310116:
	def __init__(self):
		self.ID = 461
		self.Name = "FD2310116"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310117:
	def __init__(self):
		self.ID = 462
		self.Name = "FD2310117"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "3"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310118:
	def __init__(self):
		self.ID = 463
		self.Name = "FD2310118"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310119:
	def __init__(self):
		self.ID = 464
		self.Name = "FD2310119"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "3"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310120:
	def __init__(self):
		self.ID = 465
		self.Name = "FD2310120"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "9"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310121:
	def __init__(self):
		self.ID = 466
		self.Name = "FD2310121"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310201:
	def __init__(self):
		self.ID = 467
		self.Name = "FD2310201"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "36"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310202:
	def __init__(self):
		self.ID = 468
		self.Name = "FD2310202"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "36"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310203:
	def __init__(self):
		self.ID = 469
		self.Name = "FD2310203"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "6.3"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310204:
	def __init__(self):
		self.ID = 470
		self.Name = "FD2310204"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "2"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310205:
	def __init__(self):
		self.ID = 471
		self.Name = "FD2310205"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1.6"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310206:
	def __init__(self):
		self.ID = 472
		self.Name = "FD2310206"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "11"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310207:
	def __init__(self):
		self.ID = 473
		self.Name = "FD2310207"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "11"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310208:
	def __init__(self):
		self.ID = 474
		self.Name = "FD2310208"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "16"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310209:
	def __init__(self):
		self.ID = 475
		self.Name = "FD2310209"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "16"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310210:
	def __init__(self):
		self.ID = 476
		self.Name = "FD2310210"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "16"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310211:
	def __init__(self):
		self.ID = 477
		self.Name = "FD2310211"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "16"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310212:
	def __init__(self):
		self.ID = 478
		self.Name = "FD2310212"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310301:
	def __init__(self):
		self.ID = 479
		self.Name = "FD2310301"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1.4"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310302:
	def __init__(self):
		self.ID = 480
		self.Name = "FD2310302"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "16"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310303:
	def __init__(self):
		self.ID = 481
		self.Name = "FD2310303"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "16"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310304:
	def __init__(self):
		self.ID = 482
		self.Name = "FD2310304"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "16"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310305:
	def __init__(self):
		self.ID = 483
		self.Name = "FD2310305"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "16"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310306:
	def __init__(self):
		self.ID = 484
		self.Name = "FD2310306"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "6.3"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310307:
	def __init__(self):
		self.ID = 485
		self.Name = "FD2310307"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1.8"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310308:
	def __init__(self):
		self.ID = 486
		self.Name = "FD2310308"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "11"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310309:
	def __init__(self):
		self.ID = 487
		self.Name = "FD2310309"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310401:
	def __init__(self):
		self.ID = 488
		self.Name = "FD2310401"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.2"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_FD2310402:
	def __init__(self):
		self.ID = 489
		self.Name = "FD2310402"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.34"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310403:
	def __init__(self):
		self.ID = 490
		self.Name = "FD2310403"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.8"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310404:
	def __init__(self):
		self.ID = 491
		self.Name = "FD2310404"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.3"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310405:
	def __init__(self):
		self.ID = 492
		self.Name = "FD2310405"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.1"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310501:
	def __init__(self):
		self.ID = 493
		self.Name = "FD2310501"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1024"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310502:
	def __init__(self):
		self.ID = 494
		self.Name = "FD2310502"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1024"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310504:
	def __init__(self):
		self.ID = 495
		self.Name = "FD2310504"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.4"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_FD2310505:
	def __init__(self):
		self.ID = 496
		self.Name = "FD2310505"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "576"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310506:
	def __init__(self):
		self.ID = 497
		self.Name = "FD2310506"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "24"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310507:
	def __init__(self):
		self.ID = 498
		self.Name = "FD2310507"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "576"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310508:
	def __init__(self):
		self.ID = 499
		self.Name = "FD2310508"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "256"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310509:
	def __init__(self):
		self.ID = 500
		self.Name = "FD2310509"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "2"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310510:
	def __init__(self):
		self.ID = 501
		self.Name = "FD2310510"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "256"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310511:
	def __init__(self):
		self.ID = 502
		self.Name = "FD2310511"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "256"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310512:
	def __init__(self):
		self.ID = 503
		self.Name = "FD2310512"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "576"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310513:
	def __init__(self):
		self.ID = 504
		self.Name = "FD2310513"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "24"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310514:
	def __init__(self):
		self.ID = 505
		self.Name = "FD2310514"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "576"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310515:
	def __init__(self):
		self.ID = 506
		self.Name = "FD2310515"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "256"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310601:
	def __init__(self):
		self.ID = 507
		self.Name = "FD2310601"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.64"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310602:
	def __init__(self):
		self.ID = 508
		self.Name = "FD2310602"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.2"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_FD2310603:
	def __init__(self):
		self.ID = 509
		self.Name = "FD2310603"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "2"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310604:
	def __init__(self):
		self.ID = 510
		self.Name = "FD2310604"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "576"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310605:
	def __init__(self):
		self.ID = 511
		self.Name = "FD2310605"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310606:
	def __init__(self):
		self.ID = 512
		self.Name = "FD2310606"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "2"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310607:
	def __init__(self):
		self.ID = 513
		self.Name = "FD2310607"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "7"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310608:
	def __init__(self):
		self.ID = 514
		self.Name = "FD2310608"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_FD2310609:
	def __init__(self):
		self.ID = 515
		self.Name = "FD2310609"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "256"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310610:
	def __init__(self):
		self.ID = 516
		self.Name = "FD2310610"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310611:
	def __init__(self):
		self.ID = 517
		self.Name = "FD2310611"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "3.8"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310612:
	def __init__(self):
		self.ID = 518
		self.Name = "FD2310612"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310613:
	def __init__(self):
		self.ID = 519
		self.Name = "FD2310613"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "200"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310614:
	def __init__(self):
		self.ID = 520
		self.Name = "FD2310614"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "44"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310615:
	def __init__(self):
		self.ID = 521
		self.Name = "FD2310615"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "44"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2310616:
	def __init__(self):
		self.ID = 522
		self.Name = "FD2310616"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.6"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320101:
	def __init__(self):
		self.ID = 523
		self.Name = "FD2320101"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "64"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320102:
	def __init__(self):
		self.ID = 524
		self.Name = "FD2320102"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "64"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320103:
	def __init__(self):
		self.ID = 525
		self.Name = "FD2320103"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "64"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320104:
	def __init__(self):
		self.ID = 526
		self.Name = "FD2320104"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "144"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320105:
	def __init__(self):
		self.ID = 527
		self.Name = "FD2320105"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "64"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320112:
	def __init__(self):
		self.ID = 528
		self.Name = "FD2320112"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "2.8"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320201:
	def __init__(self):
		self.ID = 529
		self.Name = "FD2320201"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "144"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "2"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320202:
	def __init__(self):
		self.ID = 530
		self.Name = "FD2320202"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "256"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320203:
	def __init__(self):
		self.ID = 531
		self.Name = "FD2320203"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "144"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320204:
	def __init__(self):
		self.ID = 532
		self.Name = "FD2320204"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "144"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320205:
	def __init__(self):
		self.ID = 533
		self.Name = "FD2320205"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1024"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320206:
	def __init__(self):
		self.ID = 534
		self.Name = "FD2320206"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "256"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320207:
	def __init__(self):
		self.ID = 535
		self.Name = "FD2320207"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "14"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320208:
	def __init__(self):
		self.ID = 536
		self.Name = "FD2320208"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1024"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320209:
	def __init__(self):
		self.ID = 537
		self.Name = "FD2320209"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "256"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320210:
	def __init__(self):
		self.ID = 538
		self.Name = "FD2320210"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "5"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320211:
	def __init__(self):
		self.ID = 539
		self.Name = "FD2320211"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "256"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320212:
	def __init__(self):
		self.ID = 540
		self.Name = "FD2320212"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320301:
	def __init__(self):
		self.ID = 541
		self.Name = "FD2320301"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "3"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_FD2320302:
	def __init__(self):
		self.ID = 542
		self.Name = "FD2320302"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320303:
	def __init__(self):
		self.ID = 543
		self.Name = "FD2320303"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1000"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320304:
	def __init__(self):
		self.ID = 544
		self.Name = "FD2320304"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "100"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320306:
	def __init__(self):
		self.ID = 545
		self.Name = "FD2320306"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "64"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320307:
	def __init__(self):
		self.ID = 546
		self.Name = "FD2320307"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "64"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320308:
	def __init__(self):
		self.ID = 547
		self.Name = "FD2320308"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "6000"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320309:
	def __init__(self):
		self.ID = 548
		self.Name = "FD2320309"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "5000"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320310:
	def __init__(self):
		self.ID = 549
		self.Name = "FD2320310"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "2304"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320311:
	def __init__(self):
		self.ID = 550
		self.Name = "FD2320311"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "2304"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320312:
	def __init__(self):
		self.ID = 551
		self.Name = "FD2320312"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "256"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320313:
	def __init__(self):
		self.ID = 552
		self.Name = "FD2320313"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "11"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320314:
	def __init__(self):
		self.ID = 553
		self.Name = "FD2320314"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "16"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320315:
	def __init__(self):
		self.ID = 554
		self.Name = "FD2320315"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "36"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320316:
	def __init__(self):
		self.ID = 555
		self.Name = "FD2320316"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "36"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320318:
	def __init__(self):
		self.ID = 556
		self.Name = "FD2320318"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "160"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320319:
	def __init__(self):
		self.ID = 557
		self.Name = "FD2320319"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "100"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320401:
	def __init__(self):
		self.ID = 558
		self.Name = "FD2320401"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "7"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320402:
	def __init__(self):
		self.ID = 559
		self.Name = "FD2320402"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "64"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320403:
	def __init__(self):
		self.ID = 560
		self.Name = "FD2320403"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "64"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320404:
	def __init__(self):
		self.ID = 561
		self.Name = "FD2320404"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "144"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320405:
	def __init__(self):
		self.ID = 562
		self.Name = "FD2320405"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "11"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320406:
	def __init__(self):
		self.ID = 563
		self.Name = "FD2320406"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "576"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320407:
	def __init__(self):
		self.ID = 564
		self.Name = "FD2320407"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "256"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320408:
	def __init__(self):
		self.ID = 565
		self.Name = "FD2320408"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "576"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320409:
	def __init__(self):
		self.ID = 566
		self.Name = "FD2320409"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "256"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320410:
	def __init__(self):
		self.ID = 567
		self.Name = "FD2320410"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.11"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320411:
	def __init__(self):
		self.ID = 568
		self.Name = "FD2320411"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.11"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320412:
	def __init__(self):
		self.ID = 569
		self.Name = "FD2320412"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.04"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320413:
	def __init__(self):
		self.ID = 570
		self.Name = "FD2320413"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1000"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320414:
	def __init__(self):
		self.ID = 571
		self.Name = "FD2320414"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "16"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320501:
	def __init__(self):
		self.ID = 572
		self.Name = "FD2320501"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.4"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320502:
	def __init__(self):
		self.ID = 573
		self.Name = "FD2320502"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "8"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320503:
	def __init__(self):
		self.ID = 574
		self.Name = "FD2320503"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "99"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320504:
	def __init__(self):
		self.ID = 575
		self.Name = "FD2320504"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "16"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320505:
	def __init__(self):
		self.ID = 576
		self.Name = "FD2320505"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320506:
	def __init__(self):
		self.ID = 577
		self.Name = "FD2320506"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320507:
	def __init__(self):
		self.ID = 578
		self.Name = "FD2320507"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.55"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320508:
	def __init__(self):
		self.ID = 579
		self.Name = "FD2320508"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1.1"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320509:
	def __init__(self):
		self.ID = 580
		self.Name = "FD2320509"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "24"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320510:
	def __init__(self):
		self.ID = 581
		self.Name = "FD2320510"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "22"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320511:
	def __init__(self):
		self.ID = 582
		self.Name = "FD2320511"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "11"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320601:
	def __init__(self):
		self.ID = 583
		self.Name = "FD2320601"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320602:
	def __init__(self):
		self.ID = 584
		self.Name = "FD2320602"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320603:
	def __init__(self):
		self.ID = 585
		self.Name = "FD2320603"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1000"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320604:
	def __init__(self):
		self.ID = 586
		self.Name = "FD2320604"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1000"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320606:
	def __init__(self):
		self.ID = 587
		self.Name = "FD2320606"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "3000"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320607:
	def __init__(self):
		self.ID = 588
		self.Name = "FD2320607"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4096"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320608:
	def __init__(self):
		self.ID = 589
		self.Name = "FD2320608"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "256"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320609:
	def __init__(self):
		self.ID = 590
		self.Name = "FD2320609"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "256"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320610:
	def __init__(self):
		self.ID = 591
		self.Name = "FD2320610"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320611:
	def __init__(self):
		self.ID = 592
		self.Name = "FD2320611"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320612:
	def __init__(self):
		self.ID = 593
		self.Name = "FD2320612"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320701:
	def __init__(self):
		self.ID = 594
		self.Name = "FD2320701"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "3"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320702:
	def __init__(self):
		self.ID = 595
		self.Name = "FD2320702"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "256"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320703:
	def __init__(self):
		self.ID = 596
		self.Name = "FD2320703"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "3"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320704:
	def __init__(self):
		self.ID = 597
		self.Name = "FD2320704"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.01"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320705:
	def __init__(self):
		self.ID = 598
		self.Name = "FD2320705"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.01"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320706:
	def __init__(self):
		self.ID = 599
		self.Name = "FD2320706"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.3"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320707:
	def __init__(self):
		self.ID = 600
		self.Name = "FD2320707"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.1"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320708:
	def __init__(self):
		self.ID = 601
		self.Name = "FD2320708"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "36"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320709:
	def __init__(self):
		self.ID = 602
		self.Name = "FD2320709"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "36"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320710:
	def __init__(self):
		self.ID = 603
		self.Name = "FD2320710"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "36"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320711:
	def __init__(self):
		self.ID = 604
		self.Name = "FD2320711"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320801:
	def __init__(self):
		self.ID = 605
		self.Name = "FD2320801"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "624"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320802:
	def __init__(self):
		self.ID = 606
		self.Name = "FD2320802"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "576"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320803:
	def __init__(self):
		self.ID = 607
		self.Name = "FD2320803"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "624"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320804:
	def __init__(self):
		self.ID = 608
		self.Name = "FD2320804"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "576"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320805:
	def __init__(self):
		self.ID = 609
		self.Name = "FD2320805"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.18"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320806:
	def __init__(self):
		self.ID = 610
		self.Name = "FD2320806"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.18"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320807:
	def __init__(self):
		self.ID = 611
		self.Name = "FD2320807"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1024"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320808:
	def __init__(self):
		self.ID = 612
		self.Name = "FD2320808"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "576"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320809:
	def __init__(self):
		self.ID = 613
		self.Name = "FD2320809"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1024"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320810:
	def __init__(self):
		self.ID = 614
		self.Name = "FD2320810"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "576"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320811:
	def __init__(self):
		self.ID = 615
		self.Name = "FD2320811"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.12"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320812:
	def __init__(self):
		self.ID = 616
		self.Name = "FD2320812"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.12"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320813:
	def __init__(self):
		self.ID = 617
		self.Name = "FD2320813"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "576"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320815:
	def __init__(self):
		self.ID = 618
		self.Name = "FD2320815"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "5.6"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_FD2320816:
	def __init__(self):
		self.ID = 619
		self.Name = "FD2320816"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "100"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320817:
	def __init__(self):
		self.ID = 620
		self.Name = "FD2320817"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "100"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2320901:
	def __init__(self):
		self.ID = 621
		self.Name = "FD2320901"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.3"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2330101:
	def __init__(self):
		self.ID = 622
		self.Name = "FD2330101"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "28"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2330102:
	def __init__(self):
		self.ID = 623
		self.Name = "FD2330102"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "8"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2330103:
	def __init__(self):
		self.ID = 624
		self.Name = "FD2330103"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2330104:
	def __init__(self):
		self.ID = 625
		self.Name = "FD2330104"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1.6"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2330105:
	def __init__(self):
		self.ID = 626
		self.Name = "FD2330105"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2330106:
	def __init__(self):
		self.ID = 627
		self.Name = "FD2330106"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2330107:
	def __init__(self):
		self.ID = 628
		self.Name = "FD2330107"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "2"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2330108:
	def __init__(self):
		self.ID = 629
		self.Name = "FD2330108"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2330109:
	def __init__(self):
		self.ID = 630
		self.Name = "FD2330109"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.4"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2330110:
	def __init__(self):
		self.ID = 631
		self.Name = "FD2330110"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.5"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2330111:
	def __init__(self):
		self.ID = 632
		self.Name = "FD2330111"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2330112:
	def __init__(self):
		self.ID = 633
		self.Name = "FD2330112"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2330113:
	def __init__(self):
		self.ID = 634
		self.Name = "FD2330113"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.3"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "2"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2330114:
	def __init__(self):
		self.ID = 635
		self.Name = "FD2330114"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.5"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2330115:
	def __init__(self):
		self.ID = 636
		self.Name = "FD2330115"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2330116:
	def __init__(self):
		self.ID = 637
		self.Name = "FD2330116"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "5.76"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2330117:
	def __init__(self):
		self.ID = 638
		self.Name = "FD2330117"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "5.76"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2330118:
	def __init__(self):
		self.ID = 639
		self.Name = "FD2330118"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2350101:
	def __init__(self):
		self.ID = 640
		self.Name = "FD2350101"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1.1"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2350102:
	def __init__(self):
		self.ID = 641
		self.Name = "FD2350102"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2350103:
	def __init__(self):
		self.ID = 642
		self.Name = "FD2350103"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "11"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2350105:
	def __init__(self):
		self.ID = 643
		self.Name = "FD2350105"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "300"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2350106:
	def __init__(self):
		self.ID = 644
		self.Name = "FD2350106"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "300"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2350201:
	def __init__(self):
		self.ID = 645
		self.Name = "FD2350201"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.8"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2350202:
	def __init__(self):
		self.ID = 646
		self.Name = "FD2350202"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2350203:
	def __init__(self):
		self.ID = 647
		self.Name = "FD2350203"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2350204:
	def __init__(self):
		self.ID = 648
		self.Name = "FD2350204"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "3"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2350205:
	def __init__(self):
		self.ID = 649
		self.Name = "FD2350205"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2350206:
	def __init__(self):
		self.ID = 650
		self.Name = "FD2350206"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2350207:
	def __init__(self):
		self.ID = 651
		self.Name = "FD2350207"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.5"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2350208:
	def __init__(self):
		self.ID = 652
		self.Name = "FD2350208"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.5"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2350209:
	def __init__(self):
		self.ID = 653
		self.Name = "FD2350209"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "2"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2350301:
	def __init__(self):
		self.ID = 654
		self.Name = "FD2350301"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2350302:
	def __init__(self):
		self.ID = 655
		self.Name = "FD2350302"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "256"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2350303:
	def __init__(self):
		self.ID = 656
		self.Name = "FD2350303"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "16"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2350304:
	def __init__(self):
		self.ID = 657
		self.Name = "FD2350304"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "16"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2350305:
	def __init__(self):
		self.ID = 658
		self.Name = "FD2350305"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "16"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2350306:
	def __init__(self):
		self.ID = 659
		self.Name = "FD2350306"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "16"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2350307:
	def __init__(self):
		self.ID = 660
		self.Name = "FD2350307"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "11"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2350308:
	def __init__(self):
		self.ID = 661
		self.Name = "FD2350308"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "256"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2350401:
	def __init__(self):
		self.ID = 662
		self.Name = "FD2350401"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "2"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2350402:
	def __init__(self):
		self.ID = 663
		self.Name = "FD2350402"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "64"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2350403:
	def __init__(self):
		self.ID = 664
		self.Name = "FD2350403"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "256"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2350404:
	def __init__(self):
		self.ID = 665
		self.Name = "FD2350404"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4096"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2350405:
	def __init__(self):
		self.ID = 666
		self.Name = "FD2350405"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "2304"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2350406:
	def __init__(self):
		self.ID = 667
		self.Name = "FD2350406"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4096"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2350407:
	def __init__(self):
		self.ID = 668
		self.Name = "FD2350407"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "2304"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2350411:
	def __init__(self):
		self.ID = 669
		self.Name = "FD2350411"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2350601:
	def __init__(self):
		self.ID = 670
		self.Name = "FD2350601"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2350602:
	def __init__(self):
		self.ID = 671
		self.Name = "FD2350602"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "125"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2350603:
	def __init__(self):
		self.ID = 672
		self.Name = "FD2350603"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "100"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2350604:
	def __init__(self):
		self.ID = 673
		self.Name = "FD2350604"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "125"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2350605:
	def __init__(self):
		self.ID = 674
		self.Name = "FD2350605"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "100"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2350606:
	def __init__(self):
		self.ID = 675
		self.Name = "FD2350606"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "2"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2350701:
	def __init__(self):
		self.ID = 676
		self.Name = "FD2350701"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "2"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2350702:
	def __init__(self):
		self.ID = 677
		self.Name = "FD2350702"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2350801:
	def __init__(self):
		self.ID = 678
		self.Name = "FD2350801"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "2"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2350802:
	def __init__(self):
		self.ID = 679
		self.Name = "FD2350802"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2350803:
	def __init__(self):
		self.ID = 680
		self.Name = "FD2350803"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "2"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2390101:
	def __init__(self):
		self.ID = 681
		self.Name = "FD2390101"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "400"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2390102:
	def __init__(self):
		self.ID = 682
		self.Name = "FD2390102"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "400"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2390103:
	def __init__(self):
		self.ID = 683
		self.Name = "FD2390103"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.5"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2390104:
	def __init__(self):
		self.ID = 684
		self.Name = "FD2390104"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.3"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2390105:
	def __init__(self):
		self.ID = 685
		self.Name = "FD2390105"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1000"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2390106:
	def __init__(self):
		self.ID = 686
		self.Name = "FD2390106"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.5"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2390107:
	def __init__(self):
		self.ID = 687
		self.Name = "FD2390107"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1.8"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2390108:
	def __init__(self):
		self.ID = 688
		self.Name = "FD2390108"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.256"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2390111:
	def __init__(self):
		self.ID = 689
		self.Name = "FD2390111"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.1"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2390201:
	def __init__(self):
		self.ID = 690
		self.Name = "FD2390201"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.36"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2390202:
	def __init__(self):
		self.ID = 691
		self.Name = "FD2390202"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "64"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2390301:
	def __init__(self):
		self.ID = 692
		self.Name = "FD2390301"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "2.4"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2390303:
	def __init__(self):
		self.ID = 693
		self.Name = "FD2390303"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1.6"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2390304:
	def __init__(self):
		self.ID = 694
		self.Name = "FD2390304"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "44"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2390305:
	def __init__(self):
		self.ID = 695
		self.Name = "FD2390305"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "6"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2390306:
	def __init__(self):
		self.ID = 696
		self.Name = "FD2390306"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "2.4"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2390308:
	def __init__(self):
		self.ID = 697
		self.Name = "FD2390308"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1.6"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2390309:
	def __init__(self):
		self.ID = 698
		self.Name = "FD2390309"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "44"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2390310:
	def __init__(self):
		self.ID = 699
		self.Name = "FD2390310"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "6"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2391101:
	def __init__(self):
		self.ID = 700
		self.Name = "FD2391101"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_FD2391102:
	def __init__(self):
		self.ID = 701
		self.Name = "FD2391102"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_FD2391103:
	def __init__(self):
		self.ID = 702
		self.Name = "FD2391103"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1024"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_FD2391104:
	def __init__(self):
		self.ID = 703
		self.Name = "FD2391104"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "300"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_FD2391105:
	def __init__(self):
		self.ID = 704
		self.Name = "FD2391105"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1024"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_FD2391106:
	def __init__(self):
		self.ID = 705
		self.Name = "FD2391106"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "576"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_FD2391107:
	def __init__(self):
		self.ID = 706
		self.Name = "FD2391107"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "21"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "2"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_FD2391108:
	def __init__(self):
		self.ID = 707
		self.Name = "FD2391108"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.71"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_FD2391301:
	def __init__(self):
		self.ID = 708
		self.Name = "FD2391301"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "5"
		self.s1_Notes = "System No."

class Block_FD2391303:
	def __init__(self):
		self.ID = 709
		self.Name = "FD2391303"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "160"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "5"
		self.s1_Notes = "System No."

class Block_FD2391304:
	def __init__(self):
		self.ID = 710
		self.Name = "FD2391304"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "20"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "5"
		self.s1_Notes = "System No."

class Block_FD2391305:
	def __init__(self):
		self.ID = 711
		self.Name = "FD2391305"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "2500"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "5"
		self.s1_Notes = "System No."

class Block_FD2391308:
	def __init__(self):
		self.ID = 712
		self.Name = "FD2391308"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "100"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "2"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "2"
		self.s1_Notes = "System No."

class Block_FD2391309:
	def __init__(self):
		self.ID = 713
		self.Name = "FD2391309"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "11"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "5"
		self.s1_Notes = "System No."

class Block_FD2391310:
	def __init__(self):
		self.ID = 714
		self.Name = "FD2391310"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.15"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "5"
		self.s1_Notes = "System No."

class Block_FD2392101:
	def __init__(self):
		self.ID = 715
		self.Name = "FD2392101"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "3"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2392102:
	def __init__(self):
		self.ID = 716
		self.Name = "FD2392102"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "3.6"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2392103:
	def __init__(self):
		self.ID = 717
		self.Name = "FD2392103"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "576"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2392104:
	def __init__(self):
		self.ID = 718
		self.Name = "FD2392104"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "44"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2392105:
	def __init__(self):
		self.ID = 719
		self.Name = "FD2392105"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1.6"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2392106:
	def __init__(self):
		self.ID = 720
		self.Name = "FD2392106"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "576"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2392107:
	def __init__(self):
		self.ID = 721
		self.Name = "FD2392107"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "44"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2392108:
	def __init__(self):
		self.ID = 722
		self.Name = "FD2392108"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1.6"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2392109:
	def __init__(self):
		self.ID = 723
		self.Name = "FD2392109"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "144"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2392110:
	def __init__(self):
		self.ID = 724
		self.Name = "FD2392110"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "36"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2392111:
	def __init__(self):
		self.ID = 725
		self.Name = "FD2392111"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2392201:
	def __init__(self):
		self.ID = 726
		self.Name = "FD2392201"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "36"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2392202:
	def __init__(self):
		self.ID = 727
		self.Name = "FD2392202"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "100"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2392203:
	def __init__(self):
		self.ID = 728
		self.Name = "FD2392203"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1024"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2392204:
	def __init__(self):
		self.ID = 729
		self.Name = "FD2392204"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "6"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2392205:
	def __init__(self):
		self.ID = 730
		self.Name = "FD2392205"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2392206:
	def __init__(self):
		self.ID = 731
		self.Name = "FD2392206"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1024"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2392207:
	def __init__(self):
		self.ID = 732
		self.Name = "FD2392207"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "6"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2392208:
	def __init__(self):
		self.ID = 733
		self.Name = "FD2392208"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2392209:
	def __init__(self):
		self.ID = 734
		self.Name = "FD2392209"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "6"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2392210:
	def __init__(self):
		self.ID = 735
		self.Name = "FD2392210"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2392301:
	def __init__(self):
		self.ID = 736
		self.Name = "FD2392301"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "36"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2392303:
	def __init__(self):
		self.ID = 737
		self.Name = "FD2392303"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "256"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2392304:
	def __init__(self):
		self.ID = 738
		self.Name = "FD2392304"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "50"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2392305:
	def __init__(self):
		self.ID = 739
		self.Name = "FD2392305"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.5"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2392306:
	def __init__(self):
		self.ID = 740
		self.Name = "FD2392306"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "256"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2392307:
	def __init__(self):
		self.ID = 741
		self.Name = "FD2392307"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "50"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2392308:
	def __init__(self):
		self.ID = 742
		self.Name = "FD2392308"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.5"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2392310:
	def __init__(self):
		self.ID = 743
		self.Name = "FD2392310"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2392311:
	def __init__(self):
		self.ID = 744
		self.Name = "FD2392311"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2393101:
	def __init__(self):
		self.ID = 745
		self.Name = "FD2393101"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "44"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2393103:
	def __init__(self):
		self.ID = 746
		self.Name = "FD2393103"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "5"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2393105:
	def __init__(self):
		self.ID = 747
		self.Name = "FD2393105"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "2.4"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2393106:
	def __init__(self):
		self.ID = 748
		self.Name = "FD2393106"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "256"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2393107:
	def __init__(self):
		self.ID = 749
		self.Name = "FD2393107"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "256"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2393108:
	def __init__(self):
		self.ID = 750
		self.Name = "FD2393108"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "36"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2393109:
	def __init__(self):
		self.ID = 751
		self.Name = "FD2393109"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "576"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2393110:
	def __init__(self):
		self.ID = 752
		self.Name = "FD2393110"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2393111:
	def __init__(self):
		self.ID = 753
		self.Name = "FD2393111"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "256"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2393112:
	def __init__(self):
		self.ID = 754
		self.Name = "FD2393112"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1.1"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2393113:
	def __init__(self):
		self.ID = 755
		self.Name = "FD2393113"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "64"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2393114:
	def __init__(self):
		self.ID = 756
		self.Name = "FD2393114"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "256"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2393115:
	def __init__(self):
		self.ID = 757
		self.Name = "FD2393115"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "64"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2393116:
	def __init__(self):
		self.ID = 758
		self.Name = "FD2393116"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1.1"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2394101:
	def __init__(self):
		self.ID = 759
		self.Name = "FD2394101"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "3000"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2394201:
	def __init__(self):
		self.ID = 760
		self.Name = "FD2394201"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "144"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2394301:
	def __init__(self):
		self.ID = 761
		self.Name = "FD2394301"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2394302:
	def __init__(self):
		self.ID = 762
		self.Name = "FD2394302"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4096"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2394303:
	def __init__(self):
		self.ID = 763
		self.Name = "FD2394303"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "2304"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2394304:
	def __init__(self):
		self.ID = 764
		self.Name = "FD2394304"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "11"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2394305:
	def __init__(self):
		self.ID = 765
		self.Name = "FD2394305"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2394306:
	def __init__(self):
		self.ID = 766
		self.Name = "FD2394306"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "576"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2394307:
	def __init__(self):
		self.ID = 767
		self.Name = "FD2394307"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "256"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2394308:
	def __init__(self):
		self.ID = 768
		self.Name = "FD2394308"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2394309:
	def __init__(self):
		self.ID = 769
		self.Name = "FD2394309"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "576"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2394310:
	def __init__(self):
		self.ID = 770
		self.Name = "FD2394310"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "256"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2394311:
	def __init__(self):
		self.ID = 771
		self.Name = "FD2394311"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2394401:
	def __init__(self):
		self.ID = 772
		self.Name = "FD2394401"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "2304"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2394402:
	def __init__(self):
		self.ID = 773
		self.Name = "FD2394402"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "2000"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2394403:
	def __init__(self):
		self.ID = 774
		self.Name = "FD2394403"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "2304"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2394404:
	def __init__(self):
		self.ID = 775
		self.Name = "FD2394404"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "2000"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2394406:
	def __init__(self):
		self.ID = 776
		self.Name = "FD2394406"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "89"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2395101:
	def __init__(self):
		self.ID = 777
		self.Name = "FD2395101"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "64"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2395201:
	def __init__(self):
		self.ID = 778
		self.Name = "FD2395201"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "2.56"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2395202:
	def __init__(self):
		self.ID = 779
		self.Name = "FD2395202"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.64"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FD2395203:
	def __init__(self):
		self.ID = 780
		self.Name = "FD2395203"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.14"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FG2121:
	def __init__(self):
		self.ID = 781
		self.Name = "FG2121"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "5"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "3"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FG2151:
	def __init__(self):
		self.ID = 782
		self.Name = "FG2151"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "5"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "3"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FG2210A:
	def __init__(self):
		self.ID = 783
		self.Name = "FG2210A"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "1.2"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FG2210B:
	def __init__(self):
		self.ID = 784
		self.Name = "FG2210B"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "1.2"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FG2212:
	def __init__(self):
		self.ID = 785
		self.Name = "FG2212"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "600"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "60"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FG2235A:
	def __init__(self):
		self.ID = 786
		self.Name = "FG2235A"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "10"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "1"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "5"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FG2236A:
	def __init__(self):
		self.ID = 787
		self.Name = "FG2236A"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "10"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "1"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "5"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FG2238A:
	def __init__(self):
		self.ID = 788
		self.Name = "FG2238A"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "20"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "3"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FG2239A:
	def __init__(self):
		self.ID = 789
		self.Name = "FG2239A"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "20"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "3"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FG2271:
	def __init__(self):
		self.ID = 790
		self.Name = "FG2271"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "200"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FG2272A:
	def __init__(self):
		self.ID = 791
		self.Name = "FG2272A"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "700"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FG2272B:
	def __init__(self):
		self.ID = 792
		self.Name = "FG2272B"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "700"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FG2282A:
	def __init__(self):
		self.ID = 793
		self.Name = "FG2282A"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "700"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FG2282B:
	def __init__(self):
		self.ID = 794
		self.Name = "FG2282B"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "700"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FG2284A:
	def __init__(self):
		self.ID = 795
		self.Name = "FG2284A"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "600"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FG2284B:
	def __init__(self):
		self.ID = 796
		self.Name = "FG2284B"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "600"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FO2001:
	def __init__(self):
		self.ID = 797
		self.Name = "FO2001"
		self.Model = "ORIFICE"
		self.Notes = "Restriction Orifice"

		# Primary Parameters
		self.Wd_Value = "877"
		self.Wd_Notes = "Design Flow Rate[kg/h]"

		# Primary Parameters
		self.dd_Value = "442"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.DP_Value = "1000"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FO2002:
	def __init__(self):
		self.ID = 798
		self.Name = "FO2002"
		self.Model = "ORIFICE"
		self.Notes = "Restriction Orifice"

		# Primary Parameters
		self.Wd_Value = "9999"
		self.Wd_Notes = "Design Flow Rate[kg/h]"

		# Primary Parameters
		self.dd_Value = "29"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.DP_Value = "10"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FO2170:
	def __init__(self):
		self.ID = 799
		self.Name = "FO2170"
		self.Model = "ORIFICE"
		self.Notes = "Restriction Orifice"

		# Primary Parameters
		self.Wd_Value = "13000"
		self.Wd_Notes = "Design Flow Rate[kg/h]"

		# Primary Parameters
		self.dd_Value = "650"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.DP_Value = "196.133"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FO2171:
	def __init__(self):
		self.ID = 800
		self.Name = "FO2171"
		self.Model = "ORIFICE"
		self.Notes = "Restriction Orifice"

		# Primary Parameters
		self.Wd_Value = "13000"
		self.Wd_Notes = "Design Flow Rate[kg/h]"

		# Primary Parameters
		self.dd_Value = "650"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.DP_Value = "196.133"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FO2172:
	def __init__(self):
		self.ID = 801
		self.Name = "FO2172"
		self.Model = "ORIFICE"
		self.Notes = "Restriction Orifice"

		# Primary Parameters
		self.Wd_Value = "520"
		self.Wd_Notes = "Design Flow Rate[kg/h]"

		# Primary Parameters
		self.dd_Value = "650"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.DP_Value = "196.133"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FO2263:
	def __init__(self):
		self.ID = 802
		self.Name = "FO2263"
		self.Model = "ORIFICE"
		self.Notes = "Restriction Orifice"

		# Primary Parameters
		self.Wd_Value = "50"
		self.Wd_Notes = "Design Flow Rate[kg/h]"

		# Primary Parameters
		self.dd_Value = "450"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.DP_Value = "10"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FO2291A:
	def __init__(self):
		self.ID = 803
		self.Name = "FO2291A"
		self.Model = "ORIFICE"
		self.Notes = "Restriction Orifice"

		# Primary Parameters
		self.Wd_Value = "4040"
		self.Wd_Notes = "Design Flow Rate[kg/h]"

		# Primary Parameters
		self.dd_Value = "505"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.DP_Value = "1961.33"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FO2291B:
	def __init__(self):
		self.ID = 804
		self.Name = "FO2291B"
		self.Model = "ORIFICE"
		self.Notes = "Restriction Orifice"

		# Primary Parameters
		self.Wd_Value = "4040"
		self.Wd_Notes = "Design Flow Rate[kg/h]"

		# Primary Parameters
		self.dd_Value = "505"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.DP_Value = "1961.33"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FO2311A:
	def __init__(self):
		self.ID = 805
		self.Name = "FO2311A"
		self.Model = "ORIFICE"
		self.Notes = "Restriction Orifice"

		# Primary Parameters
		self.Wd_Value = "37"
		self.Wd_Notes = "Design Flow Rate[kg/h]"

		# Primary Parameters
		self.dd_Value = "3.8"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.DP_Value = "171.616"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FO2312A:
	def __init__(self):
		self.ID = 806
		self.Name = "FO2312A"
		self.Model = "ORIFICE"
		self.Notes = "Restriction Orifice"

		# Primary Parameters
		self.Wd_Value = "37.5"
		self.Wd_Notes = "Design Flow Rate[kg/h]"

		# Primary Parameters
		self.dd_Value = "2.8"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.DP_Value = "171.616"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FO2313A:
	def __init__(self):
		self.ID = 807
		self.Name = "FO2313A"
		self.Model = "ORIFICE"
		self.Notes = "Restriction Orifice"

		# Primary Parameters
		self.Wd_Value = "37.5"
		self.Wd_Notes = "Design Flow Rate[kg/h]"

		# Primary Parameters
		self.dd_Value = "3.8"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.DP_Value = "171.616"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FO2314A:
	def __init__(self):
		self.ID = 808
		self.Name = "FO2314A"
		self.Model = "ORIFICE"
		self.Notes = "Restriction Orifice"

		# Primary Parameters
		self.Wd_Value = "50"
		self.Wd_Notes = "Design Flow Rate[kg/h]"

		# Primary Parameters
		self.dd_Value = "3.8"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.DP_Value = "171.616"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FO2317A:
	def __init__(self):
		self.ID = 809
		self.Name = "FO2317A"
		self.Model = "ORIFICE"
		self.Notes = "Restriction Orifice"

		# Primary Parameters
		self.Wd_Value = "50"
		self.Wd_Notes = "Design Flow Rate[kg/h]"

		# Primary Parameters
		self.dd_Value = "2.8"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.DP_Value = "171.616"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FO2318A:
	def __init__(self):
		self.ID = 810
		self.Name = "FO2318A"
		self.Model = "ORIFICE"
		self.Notes = "Restriction Orifice"

		# Primary Parameters
		self.Wd_Value = "37.5"
		self.Wd_Notes = "Design Flow Rate[kg/h]"

		# Primary Parameters
		self.dd_Value = "3.8"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.DP_Value = "171.616"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FO2502A:
	def __init__(self):
		self.ID = 811
		self.Name = "FO2502A"
		self.Model = "ORIFICE"
		self.Notes = "Restriction Orifice"

		# Primary Parameters
		self.Wd_Value = "37.5"
		self.Wd_Notes = "Design Flow Rate[kg/h]"

		# Primary Parameters
		self.dd_Value = "3.8"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.DP_Value = "171.616"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FO2503A:
	def __init__(self):
		self.ID = 812
		self.Name = "FO2503A"
		self.Model = "ORIFICE"
		self.Notes = "Restriction Orifice"

		# Primary Parameters
		self.Wd_Value = "20"
		self.Wd_Notes = "Design Flow Rate[kg/h]"

		# Primary Parameters
		self.dd_Value = "3.8"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.DP_Value = "171.616"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FO2504A:
	def __init__(self):
		self.ID = 813
		self.Name = "FO2504A"
		self.Model = "ORIFICE"
		self.Notes = "Restriction Orifice"

		# Primary Parameters
		self.Wd_Value = "20"
		self.Wd_Notes = "Design Flow Rate[kg/h]"

		# Primary Parameters
		self.dd_Value = "3.8"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.DP_Value = "171.616"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FO2505:
	def __init__(self):
		self.ID = 814
		self.Name = "FO2505"
		self.Model = "ORIFICE"
		self.Notes = "Restriction Orifice"

		# Primary Parameters
		self.Wd_Value = "16"
		self.Wd_Notes = "Design Flow Rate[kg/h]"

		# Primary Parameters
		self.dd_Value = "3.8"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.DP_Value = "171.616"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FO2507:
	def __init__(self):
		self.ID = 815
		self.Name = "FO2507"
		self.Model = "ORIFICE"
		self.Notes = "Restriction Orifice"

		# Primary Parameters
		self.Wd_Value = "16"
		self.Wd_Notes = "Design Flow Rate[kg/h]"

		# Primary Parameters
		self.dd_Value = "3.8"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.DP_Value = "171.616"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FO2508:
	def __init__(self):
		self.ID = 816
		self.Name = "FO2508"
		self.Model = "ORIFICE"
		self.Notes = "Restriction Orifice"

		# Primary Parameters
		self.Wd_Value = "16"
		self.Wd_Notes = "Design Flow Rate[kg/h]"

		# Primary Parameters
		self.dd_Value = "3.8"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.DP_Value = "171.616"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FO2509A:
	def __init__(self):
		self.ID = 817
		self.Name = "FO2509A"
		self.Model = "ORIFICE"
		self.Notes = "Restriction Orifice"

		# Primary Parameters
		self.Wd_Value = "20"
		self.Wd_Notes = "Design Flow Rate[kg/h]"

		# Primary Parameters
		self.dd_Value = "3.8"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.DP_Value = "171.616"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FO2902:
	def __init__(self):
		self.ID = 818
		self.Name = "FO2902"
		self.Model = "ORIFICE"
		self.Notes = "Restriction Orifice"

		# Primary Parameters
		self.Wd_Value = "20"
		self.Wd_Notes = "Design Flow Rate[kg/h]"

		# Primary Parameters
		self.dd_Value = "3.8"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.DP_Value = "176.52"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FO2911:
	def __init__(self):
		self.ID = 819
		self.Name = "FO2911"
		self.Model = "ORIFICE"
		self.Notes = "Restriction Orifice"

		# Primary Parameters
		self.Wd_Value = "999"
		self.Wd_Notes = "Design Flow Rate[kg/h]"

		# Primary Parameters
		self.dd_Value = "19"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.DP_Value = "2"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_FO2921:
	def __init__(self):
		self.ID = 820
		self.Name = "FO2921"
		self.Model = "ORIFICE"
		self.Notes = "Restriction Orifice"

		# Primary Parameters
		self.Wd_Value = "20"
		self.Wd_Notes = "Design Flow Rate[kg/h]"

		# Primary Parameters
		self.dd_Value = "3.8"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.DP_Value = "100"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FSW2231:
	def __init__(self):
		self.ID = 821
		self.Name = "FSW2231"
		self.Model = "SIGNBR2"
		self.Notes = "Signal Split(1-input/2-output)"

		# Primary Parameters
		self.SWITCH_Value = "0"
		self.SWITCH_Notes = "0=signal branch, 1-2=switch"

		# Primary Parameters
		self.MVTRK_Value = "1"
		self.MVTRK_Notes = "Output Tracking Point(1-2)"

		# Primary Parameters
		self.PVSPAN1_Value = "(2)"
		self.PVSPAN1_Notes = "Input 1 Span/Base"

		# Primary Parameters List Value
		self.PVSPAN1_List_Value = array([1., 0.])
		# Primary Parameters
		self.MVSPAN_Value = "1"
		self.MVSPAN_Notes = "MV Span"

class Block_FT2001:
	def __init__(self):
		self.ID = 822
		self.Name = "FT2001"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "8000"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2002:
	def __init__(self):
		self.ID = 823
		self.Name = "FT2002"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "1500"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2003:
	def __init__(self):
		self.ID = 824
		self.Name = "FT2003"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "10"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2004:
	def __init__(self):
		self.ID = 825
		self.Name = "FT2004"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "300"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2110:
	def __init__(self):
		self.ID = 826
		self.Name = "FT2110"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "1000"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2130A:
	def __init__(self):
		self.ID = 827
		self.Name = "FT2130A"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "80"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2130B:
	def __init__(self):
		self.ID = 828
		self.Name = "FT2130B"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "80"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2140:
	def __init__(self):
		self.ID = 829
		self.Name = "FT2140"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "1500"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2141:
	def __init__(self):
		self.ID = 830
		self.Name = "FT2141"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "15"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2151:
	def __init__(self):
		self.ID = 831
		self.Name = "FT2151"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "0.6"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2170:
	def __init__(self):
		self.ID = 832
		self.Name = "FT2170"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "20"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "5"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2171:
	def __init__(self):
		self.ID = 833
		self.Name = "FT2171"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "20"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "5"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2172:
	def __init__(self):
		self.ID = 834
		self.Name = "FT2172"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "1000"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2180:
	def __init__(self):
		self.ID = 835
		self.Name = "FT2180"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "10"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2181:
	def __init__(self):
		self.ID = 836
		self.Name = "FT2181"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "20"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "5"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2201:
	def __init__(self):
		self.ID = 837
		self.Name = "FT2201"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "30"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "3"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2203:
	def __init__(self):
		self.ID = 838
		self.Name = "FT2203"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "8"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2210:
	def __init__(self):
		self.ID = 839
		self.Name = "FT2210"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "150"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2211:
	def __init__(self):
		self.ID = 840
		self.Name = "FT2211"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "30"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "3"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2213:
	def __init__(self):
		self.ID = 841
		self.Name = "FT2213"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "4000"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2215:
	def __init__(self):
		self.ID = 842
		self.Name = "FT2215"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "20"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "4"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2216:
	def __init__(self):
		self.ID = 843
		self.Name = "FT2216"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "300"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2217:
	def __init__(self):
		self.ID = 844
		self.Name = "FT2217"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "12"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2218:
	def __init__(self):
		self.ID = 845
		self.Name = "FT2218"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "8"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2219:
	def __init__(self):
		self.ID = 846
		self.Name = "FT2219"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "2000"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2231:
	def __init__(self):
		self.ID = 847
		self.Name = "FT2231"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "2"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "3"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2233:
	def __init__(self):
		self.ID = 848
		self.Name = "FT2233"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "300"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2235:
	def __init__(self):
		self.ID = 849
		self.Name = "FT2235"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "600000"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "5"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2236:
	def __init__(self):
		self.ID = 850
		self.Name = "FT2236"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "120"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "3"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2262:
	def __init__(self):
		self.ID = 851
		self.Name = "FT2262"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "700"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "3"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2263:
	def __init__(self):
		self.ID = 852
		self.Name = "FT2263"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "40"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "3"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2268:
	def __init__(self):
		self.ID = 853
		self.Name = "FT2268"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "30"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "3"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2273:
	def __init__(self):
		self.ID = 854
		self.Name = "FT2273"
		self.Model = "_GCALC_P"
		self.Notes = "Calc. Unit(for Process)"

		# General Parameters
		self._ITYPE_Value = "0"
		self._ITYPE_Notes = "Module Type(0:Compact, 1:Fast)"

		# General Parameters
		self._NLINE_Value = "5"
		self._NLINE_Notes = "Max. Row Num. of Calc. Eq."

		# General Parameters
		self._NCONS_Value = "1"
		self._NCONS_Notes = "Num. of Const. Variable(<=30)"

		# General Parameters
		self._NVAR_Value = "0"
		self._NVAR_Notes = "Num. of Calc. Variable(<=20)"

		# Primary Parameters
		self.etype_Value = "0"
		self.etype_Notes = "Execution Type(0:Cyclic, 1:By Request)"

		# Primary Parameters
		self.EQN_Value = "(5)"
		self.EQN_Notes = "Calculation Statements(in Process)"

		# Primary Parameters List Value
		self.EQN_List_Value = "//C01-FT2273 (Kg/h)	C01=FT2273B.F-LV2283.Fw;	none	none	none"
		# Primary Parameters
		self.C01_Value = "0"
		self.C01_Notes = "Parameter for Constant Value-1"

		# Primary Parameters
		self.C02_Value = "0"
		self.C02_Notes = "Parameter for Constant Value-2"

		# Primary Parameters
		self.C03_Value = "0"
		self.C03_Notes = "Parameter for Constant Value-3"

		# Primary Parameters
		self.C04_Value = "0"
		self.C04_Notes = "Parameter for Constant Value-4"

		# Primary Parameters
		self.C05_Value = "0"
		self.C05_Notes = "Parameter for Constant Value-5"

		# Primary Parameters
		self.kcalc_Value = "1"
		self.kcalc_Notes = "Steady State Calc. Flag(1:Calc/0:No)"

class Block_FT2273B:
	def __init__(self):
		self.ID = 855
		self.Name = "FT2273B"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "5000"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2276:
	def __init__(self):
		self.ID = 856
		self.Name = "FT2276"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "12"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2277:
	def __init__(self):
		self.ID = 857
		self.Name = "FT2277"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "10"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2280:
	def __init__(self):
		self.ID = 858
		self.Name = "FT2280"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "20"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2281:
	def __init__(self):
		self.ID = 859
		self.Name = "FT2281"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "15"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_FT2282:
	def __init__(self):
		self.ID = 860
		self.Name = "FT2282"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "100"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "3"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2283:
	def __init__(self):
		self.ID = 861
		self.Name = "FT2283"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "5"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2284:
	def __init__(self):
		self.ID = 862
		self.Name = "FT2284"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "20"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2285:
	def __init__(self):
		self.ID = 863
		self.Name = "FT2285"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "5"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2286:
	def __init__(self):
		self.ID = 864
		self.Name = "FT2286"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "25"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2287:
	def __init__(self):
		self.ID = 865
		self.Name = "FT2287"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "20"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "3"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2288:
	def __init__(self):
		self.ID = 866
		self.Name = "FT2288"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "100"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "3"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2289:
	def __init__(self):
		self.ID = 867
		self.Name = "FT2289"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "20"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "3"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2290:
	def __init__(self):
		self.ID = 868
		self.Name = "FT2290"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "12"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2291:
	def __init__(self):
		self.ID = 869
		self.Name = "FT2291"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "7"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2292:
	def __init__(self):
		self.ID = 870
		self.Name = "FT2292"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "600"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2293:
	def __init__(self):
		self.ID = 871
		self.Name = "FT2293"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "10"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2310:
	def __init__(self):
		self.ID = 872
		self.Name = "FT2310"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "80"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "3"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2311:
	def __init__(self):
		self.ID = 873
		self.Name = "FT2311"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "80"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "3"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2312:
	def __init__(self):
		self.ID = 874
		self.Name = "FT2312"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "200"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "3"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2320:
	def __init__(self):
		self.ID = 875
		self.Name = "FT2320"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "80"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "3"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2321:
	def __init__(self):
		self.ID = 876
		self.Name = "FT2321"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "80"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2501:
	def __init__(self):
		self.ID = 877
		self.Name = "FT2501"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "300"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "3"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2513:
	def __init__(self):
		self.ID = 878
		self.Name = "FT2513"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "8"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2514:
	def __init__(self):
		self.ID = 879
		self.Name = "FT2514"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "80"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2515:
	def __init__(self):
		self.ID = 880
		self.Name = "FT2515"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "20"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2551:
	def __init__(self):
		self.ID = 881
		self.Name = "FT2551"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "5"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2552:
	def __init__(self):
		self.ID = 882
		self.Name = "FT2552"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "400"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "5"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2931:
	def __init__(self):
		self.ID = 883
		self.Name = "FT2931"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "1"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2932:
	def __init__(self):
		self.ID = 884
		self.Name = "FT2932"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "3"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2933:
	def __init__(self):
		self.ID = 885
		self.Name = "FT2933"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "120"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2941:
	def __init__(self):
		self.ID = 886
		self.Name = "FT2941"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "1500"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2942:
	def __init__(self):
		self.ID = 887
		self.Name = "FT2942"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "10"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2945:
	def __init__(self):
		self.ID = 888
		self.Name = "FT2945"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "100"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2946:
	def __init__(self):
		self.ID = 889
		self.Name = "FT2946"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "100"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2950:
	def __init__(self):
		self.ID = 890
		self.Name = "FT2950"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "600"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "3"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FT2952:
	def __init__(self):
		self.ID = 891
		self.Name = "FT2952"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "600"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "3"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FTCC201T:
	def __init__(self):
		self.ID = 892
		self.Name = "FTCC201T"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "100"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FTD2201:
	def __init__(self):
		self.ID = 893
		self.Name = "FTD2201"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "50000"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FTS234A:
	def __init__(self):
		self.ID = 894
		self.Name = "FTS234A"
		self.Model = "FTRANS"
		self.Notes = "Volumetric Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "6000"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "4"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FTS234B:
	def __init__(self):
		self.ID = 895
		self.Name = "FTS234B"
		self.Model = "FTRANS"
		self.Notes = "Volumetric Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "6000"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "4"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FTS236:
	def __init__(self):
		self.ID = 896
		self.Name = "FTS236"
		self.Model = "FTRANS"
		self.Notes = "Volumetric Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "6000"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "4"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FTS502:
	def __init__(self):
		self.ID = 897
		self.Name = "FTS502"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "5000"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "4"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FU2001:
	def __init__(self):
		self.ID = 898
		self.Name = "FU2001"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_FU2003:
	def __init__(self):
		self.ID = 899
		self.Name = "FU2003"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_FU2004:
	def __init__(self):
		self.ID = 900
		self.Name = "FU2004"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_FU2110:
	def __init__(self):
		self.ID = 901
		self.Name = "FU2110"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_FU2140:
	def __init__(self):
		self.ID = 902
		self.Name = "FU2140"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_FU2210:
	def __init__(self):
		self.ID = 903
		self.Name = "FU2210"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_FU2211:
	def __init__(self):
		self.ID = 904
		self.Name = "FU2211"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_FU2213:
	def __init__(self):
		self.ID = 905
		self.Name = "FU2213"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_FU2215:
	def __init__(self):
		self.ID = 906
		self.Name = "FU2215"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_FU2216:
	def __init__(self):
		self.ID = 907
		self.Name = "FU2216"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_FU2217:
	def __init__(self):
		self.ID = 908
		self.Name = "FU2217"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_FU2218:
	def __init__(self):
		self.ID = 909
		self.Name = "FU2218"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_FU2219:
	def __init__(self):
		self.ID = 910
		self.Name = "FU2219"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_FU22311:
	def __init__(self):
		self.ID = 911
		self.Name = "FU22311"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_FU22312:
	def __init__(self):
		self.ID = 912
		self.Name = "FU22312"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_FU2263:
	def __init__(self):
		self.ID = 913
		self.Name = "FU2263"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_FU2268:
	def __init__(self):
		self.ID = 914
		self.Name = "FU2268"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_FU2276:
	def __init__(self):
		self.ID = 915
		self.Name = "FU2276"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_FU2277:
	def __init__(self):
		self.ID = 916
		self.Name = "FU2277"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_FU2280:
	def __init__(self):
		self.ID = 917
		self.Name = "FU2280"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_FU2282:
	def __init__(self):
		self.ID = 918
		self.Name = "FU2282"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_FU2283:
	def __init__(self):
		self.ID = 919
		self.Name = "FU2283"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_FU2286:
	def __init__(self):
		self.ID = 920
		self.Name = "FU2286"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_FU2287:
	def __init__(self):
		self.ID = 921
		self.Name = "FU2287"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_FU2288:
	def __init__(self):
		self.ID = 922
		self.Name = "FU2288"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_FU2289:
	def __init__(self):
		self.ID = 923
		self.Name = "FU2289"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_FU2290:
	def __init__(self):
		self.ID = 924
		self.Name = "FU2290"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_FU2293:
	def __init__(self):
		self.ID = 925
		self.Name = "FU2293"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_FV2001:
	def __init__(self):
		self.ID = 926
		self.Name = "FV2001"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "17"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "17"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "170"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "170"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FV2003:
	def __init__(self):
		self.ID = 927
		self.Name = "FV2003"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.05"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "0.05"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "0.5"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "0.5"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FV2004:
	def __init__(self):
		self.ID = 928
		self.Name = "FV2004"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.4"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "0.4"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "4"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "4"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FV2110:
	def __init__(self):
		self.ID = 929
		self.Name = "FV2110"
		self.Model = "AVALVE_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.63"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FV2140:
	def __init__(self):
		self.ID = 930
		self.Name = "FV2140"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "10"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "10"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "100"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "100"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FV2210:
	def __init__(self):
		self.ID = 931
		self.Name = "FV2210"
		self.Model = "AVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "600"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "5"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FV2211:
	def __init__(self):
		self.ID = 932
		self.Name = "FV2211"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.035"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "2"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "0.035"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "0.35"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "0.35"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FV2213:
	def __init__(self):
		self.ID = 933
		self.Name = "FV2213"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "2.5"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "2.5"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "25"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "25"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FV2215:
	def __init__(self):
		self.ID = 934
		self.Name = "FV2215"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "600"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "600"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "6000"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "6000"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FV2216:
	def __init__(self):
		self.ID = 935
		self.Name = "FV2216"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1400"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "1400"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "14000"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "14000"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FV2217:
	def __init__(self):
		self.ID = 936
		self.Name = "FV2217"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "105"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "2"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "105"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "1050"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "1050"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FV2218:
	def __init__(self):
		self.ID = 937
		self.Name = "FV2218"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "105"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "2"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "105"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "1050"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "1050"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FV2219:
	def __init__(self):
		self.ID = 938
		self.Name = "FV2219"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "2.5"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "2.5"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "25"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "25"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FV22311:
	def __init__(self):
		self.ID = 939
		self.Name = "FV22311"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.01"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "0.01"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "0.1"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "0.1"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FV22312:
	def __init__(self):
		self.ID = 940
		self.Name = "FV22312"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.0015"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "0.0015"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "0.015"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "0.015"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FV2263:
	def __init__(self):
		self.ID = 941
		self.Name = "FV2263"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1.5"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "1.5"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "15"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "15"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FV2268:
	def __init__(self):
		self.ID = 942
		self.Name = "FV2268"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.35"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "0.35"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "3.5"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "3.5"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FV2276:
	def __init__(self):
		self.ID = 943
		self.Name = "FV2276"
		self.Model = "AVALVE_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "105"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FV2277:
	def __init__(self):
		self.ID = 944
		self.Name = "FV2277"
		self.Model = "AVALVE_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "105"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FV2280:
	def __init__(self):
		self.ID = 945
		self.Name = "FV2280"
		self.Model = "AVALVE_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "105"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FV2282:
	def __init__(self):
		self.ID = 946
		self.Name = "FV2282"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "4"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "40"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "40"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FV2283:
	def __init__(self):
		self.ID = 947
		self.Name = "FV2283"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "24"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "24"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "240"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "240"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FV2286:
	def __init__(self):
		self.ID = 948
		self.Name = "FV2286"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "44"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "44"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "440"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "440"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FV2287:
	def __init__(self):
		self.ID = 949
		self.Name = "FV2287"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.35"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "0.35"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "3.5"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "3.5"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FV2289:
	def __init__(self):
		self.ID = 950
		self.Name = "FV2289"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.04"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "2"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "0.04"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "0.4"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "0.4"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FV2290:
	def __init__(self):
		self.ID = 951
		self.Name = "FV2290"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "17"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "17"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "170"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "170"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_FV2293:
	def __init__(self):
		self.ID = 952
		self.Name = "FV2293"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "10"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "10"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "100"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "100"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_HC2210:
	def __init__(self):
		self.ID = 953
		self.Name = "HC2210"
		self.Model = "_DMHVC"
		self.Notes = "Manual Manipulator"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([1., 0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "0"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_HC2230:
	def __init__(self):
		self.ID = 954
		self.Name = "HC2230"
		self.Model = "_DMHVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([1., 0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_HC2231:
	def __init__(self):
		self.ID = 955
		self.Name = "HC2231"
		self.Model = "_DMHVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([1., 0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_HC2232A:
	def __init__(self):
		self.ID = 956
		self.Name = "HC2232A"
		self.Model = "_DMHVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([1., 0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_HC2232B:
	def __init__(self):
		self.ID = 957
		self.Name = "HC2232B"
		self.Model = "_DMHVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([1., 0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_HS1401:
	def __init__(self):
		self.ID = 958
		self.Name = "HS1401"
		self.Model = "SIGNBR2"
		self.Notes = "Signal Split(1-input/2-output)"

		# Primary Parameters
		self.SWITCH_Value = "0"
		self.SWITCH_Notes = "0=signal branch, 1-2=switch"

		# Primary Parameters
		self.MVTRK_Value = "1"
		self.MVTRK_Notes = "Output Tracking Point(1-2)"

		# Primary Parameters
		self.PVSPAN1_Value = "(2)"
		self.PVSPAN1_Notes = "Input 1 Span/Base"

		# Primary Parameters List Value
		self.PVSPAN1_List_Value = array([1., 0.])
		# Primary Parameters
		self.MVSPAN_Value = "1"
		self.MVSPAN_Notes = "MV Span"

class Block_HTEMP01:
	def __init__(self):
		self.ID = 959
		self.Name = "HTEMP01"
		self.Model = "_HEATXA"
		self.Notes = "Simplified Heater/Cooler"

		# Primary Parameters
		self.TYPE_Value = "2"
		self.TYPE_Notes = "Specification Type(0:T,1:R,2:Q)"

		# Primary Parameters
		self.T_Value = "69.4"
		self.T_Notes = "Outlet Temperature Set/Calc. Value[C]"

		# Primary Parameters
		self.RV_Value = "1"
		self.RV_Notes = "Outlet Vapor Ratio Set/Calc. Value[-]"

		# Primary Parameters
		self.Q_Value = "0"
		self.Q_Notes = "Heat Load Set/Calc. Value[MJ/h]"

		# Primary Parameters
		self.Wdes_Value = "60000"
		self.Wdes_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters
		self.Ddes_Value = "482"
		self.Ddes_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.Pddes_Value = "0"
		self.Pddes_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.tau_Value = "30"
		self.tau_Notes = "Response Delay Time[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Outlet Temperature Start Value[C]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System 1"

class Block_HU2210:
	def __init__(self):
		self.ID = 960
		self.Name = "HU2210"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_HU2230:
	def __init__(self):
		self.ID = 961
		self.Name = "HU2230"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_HU2231:
	def __init__(self):
		self.ID = 962
		self.Name = "HU2231"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_HU2232A:
	def __init__(self):
		self.ID = 963
		self.Name = "HU2232A"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "0"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_HU2232B:
	def __init__(self):
		self.ID = 964
		self.Name = "HU2232B"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_HV2210:
	def __init__(self):
		self.ID = 965
		self.Name = "HV2210"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "120"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "120"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "1200"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "1200"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_HV2230:
	def __init__(self):
		self.ID = 966
		self.Name = "HV2230"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "175"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "175"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "1750"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "1750"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_HV2231:
	def __init__(self):
		self.ID = 967
		self.Name = "HV2231"
		self.Model = "AVALVE_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1.6"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_HV2232A:
	def __init__(self):
		self.ID = 968
		self.Name = "HV2232A"
		self.Model = "AVALVE_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "20"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "2"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_HV2232B:
	def __init__(self):
		self.ID = 969
		self.Name = "HV2232B"
		self.Model = "AVALVE_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "20"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "2"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_K2201A:
	def __init__(self):
		self.ID = 970
		self.Name = "K2201A"
		self.Model = "COMPVC"
		self.Notes = "Blower with Guide Vane"

		# General Parameters
		self._NV_Value = "5"
		self._NV_Notes = "Number of Vane Opening Data Points"

		# General Parameters
		self._ND_Value = "7"
		self._ND_Notes = "Number of Wind Flow Rate Data Points"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.dd_Value = "70"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.Vd_Value = "(5)"
		self.Vd_Notes = "Vane Opening Degree Data"

		# Primary Parameters List Value
		self.Vd_List_Value = array([ 0. , 14.5, 30. , 48.5, 90. ])
		# Primary Parameters
		self.Qd_Value = "(5,7)"
		self.Qd_Notes = "Volume Flow Rate Data[m3/min]"

		# Primary Parameters List Value
		self.Qd_List_Value = array([[0.     , 0.     , 2.3634 , 2.47083, 2.57825, 3.70624, 3.75351],
       [0.     , 3.00796, 3.43767, 3.86738, 4.29709, 4.51194, 4.59789],
       [0.     , 3.00796, 3.65253, 4.29709, 4.70531, 5.15651, 5.6077 ],
       [0.     , 3.22282, 3.57196, 4.76977, 5.8333 , 6.44564, 6.66049],
       [0.     , 3.40544, 4.00704, 5.07057, 5.81181, 6.57455, 6.83237]])
		# Primary Parameters
		self.Pd_Value = "(5,7)"
		self.Pd_Notes = "Wind Pres. Data[kPa]"

		# Primary Parameters List Value
		self.Pd_List_Value = array([[14.1776, 14.0698, 13.8736, 13.5304, 13.1381, 12.8439, 11.1204],
       [20.5029, 20.2676, 19.6105, 18.4827, 16.3743, 14.462 , 12.7635],
       [21.0521, 21.3267, 21.2267, 20.6108, 19.8714, 18.4827, 16.0066],
       [21.2776, 21.866 , 21.8298, 21.1786, 19.8449, 18.1885, 17.1932],
       [31.3169, 31.8915, 31.8641, 31.5326, 31.106 , 29.738 , 29.079 ]])
		# Primary Parameters
		self.Wd_Value = "(5,7)"
		self.Wd_Notes = "Shaft Power Data[kW]"

		# Primary Parameters List Value
		self.Wd_List_Value = array([[0.305093, 0.311539, 0.315836, 0.319059, 0.322282, 0.323356,
        0.32443 ],
       [0.365253, 0.392109, 0.408224, 0.429709, 0.440452, 0.445823,
        0.431965],
       [0.365253, 0.413595, 0.47268 , 0.558622, 0.59085 , 0.606964,
        0.558622],
       [0.322282, 0.452269, 0.490943, 0.652083, 0.757362, 0.762734,
        0.725134],
       [0.400704, 0.452269, 0.556473, 0.689683, 0.828264, 0.881978,
        0.891646]])
		# Primary Parameters
		self.Qsurge_Value = "2.36"
		self.Qsurge_Notes = "Surge Limit Flow Rate[m3/min]"

		# Primary Parameters
		self.posdeg0_Value = "0"
		self.posdeg0_Notes = "Minimum Vane Angle[deg]"

		# Primary Parameters
		self.posdeg1_Value = "90"
		self.posdeg1_Notes = "Maximum Vane Angle[deg]"

		# Primary Parameters
		self.tmove_Value = "5"
		self.tmove_Notes = "Time for Vane Open/Close[s]"

		# Primary Parameters
		self.tstart_Value = "5"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "5"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.srgopt_Value = "1"
		self.srgopt_Notes = "Perform Surge Calculation(0:N,1:Y)"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.anneald_Value = "0"
		self.anneald_Notes = "Density Relaxation(0:N,1:Y)"

		# Primary Parameters
		self.uratio_Value = "10"
		self.uratio_Notes = "Ratio for Density Relaxation[-]"

		# Primary Parameters
		self.udelay_Value = "10"
		self.udelay_Notes = "Delay Factor for Density Relaxation[-]"

		# Primary Parameters
		self.FvSt_Value = "0"
		self.FvSt_Notes = "Volume Flow Rate Start Value[m3/min]"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Vane Opening Degree Start Value[-]"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Outlet Temperature Start Value[C]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_K2201B:
	def __init__(self):
		self.ID = 971
		self.Name = "K2201B"
		self.Model = "COMPVC"
		self.Notes = "Blower with Guide Vane"

		# General Parameters
		self._NV_Value = "5"
		self._NV_Notes = "Number of Vane Opening Data Points"

		# General Parameters
		self._ND_Value = "7"
		self._ND_Notes = "Number of Wind Flow Rate Data Points"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.dd_Value = "75.8"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.Vd_Value = "(5)"
		self.Vd_Notes = "Vane Opening Degree Data"

		# Primary Parameters List Value
		self.Vd_List_Value = array([ 0. , 14.5, 30. , 48.5, 90. ])
		# Primary Parameters
		self.Qd_Value = "(5,7)"
		self.Qd_Notes = "Volume Flow Rate Data[m3/min]"

		# Primary Parameters List Value
		self.Qd_List_Value = array([[0.     , 0.     , 2.3634 , 2.47083, 2.57825, 3.70624, 3.75351],
       [0.     , 3.00796, 3.43767, 3.86738, 4.29709, 4.51194, 4.59789],
       [0.     , 3.00796, 3.65253, 4.29709, 4.70531, 5.15651, 5.6077 ],
       [0.     , 3.22282, 3.57196, 4.76977, 5.8333 , 6.44564, 6.66049],
       [0.     , 3.40544, 4.00704, 5.07057, 5.81181, 6.57455, 6.83237]])
		# Primary Parameters
		self.Pd_Value = "(5,7)"
		self.Pd_Notes = "Wind Pres. Data[kPa]"

		# Primary Parameters List Value
		self.Pd_List_Value = array([[14.1776, 14.0698, 13.8736, 13.5304, 13.1381, 12.8439, 11.1204],
       [20.5029, 20.2676, 19.6105, 18.4827, 16.3743, 14.462 , 12.7635],
       [21.0521, 21.3267, 21.2267, 20.6108, 19.8714, 18.4827, 16.0066],
       [21.2776, 21.866 , 21.8298, 21.1786, 19.8449, 18.1885, 17.1932],
       [31.3169, 31.8915, 31.8641, 31.5326, 31.106 , 29.738 , 29.079 ]])
		# Primary Parameters
		self.Wd_Value = "(5,7)"
		self.Wd_Notes = "Shaft Power Data[kW]"

		# Primary Parameters List Value
		self.Wd_List_Value = array([[0.305093, 0.311539, 0.315836, 0.319059, 0.322282, 0.323356,
        0.32443 ],
       [0.365253, 0.392109, 0.408224, 0.429709, 0.440452, 0.445823,
        0.431965],
       [0.365253, 0.413595, 0.47268 , 0.558622, 0.59085 , 0.606964,
        0.558622],
       [0.322282, 0.452269, 0.490943, 0.652083, 0.757362, 0.762734,
        0.725134],
       [0.400704, 0.452269, 0.556473, 0.689683, 0.828264, 0.881978,
        0.891646]])
		# Primary Parameters
		self.Qsurge_Value = "2.36"
		self.Qsurge_Notes = "Surge Limit Flow Rate[m3/min]"

		# Primary Parameters
		self.posdeg0_Value = "0"
		self.posdeg0_Notes = "Minimum Vane Angle[deg]"

		# Primary Parameters
		self.posdeg1_Value = "90"
		self.posdeg1_Notes = "Maximum Vane Angle[deg]"

		# Primary Parameters
		self.tmove_Value = "5"
		self.tmove_Notes = "Time for Vane Open/Close[s]"

		# Primary Parameters
		self.tstart_Value = "5"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "5"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.srgopt_Value = "1"
		self.srgopt_Notes = "Perform Surge Calculation(0:N,1:Y)"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.anneald_Value = "0"
		self.anneald_Notes = "Density Relaxation(0:N,1:Y)"

		# Primary Parameters
		self.uratio_Value = "10"
		self.uratio_Notes = "Ratio for Density Relaxation[-]"

		# Primary Parameters
		self.udelay_Value = "10"
		self.udelay_Notes = "Delay Factor for Density Relaxation[-]"

		# Primary Parameters
		self.FvSt_Value = "0"
		self.FvSt_Notes = "Volume Flow Rate Start Value[m3/min]"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Vane Opening Degree Start Value[-]"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Outlet Temperature Start Value[C]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_K2203:
	def __init__(self):
		self.ID = 972
		self.Name = "K2203"
		self.Model = "COMPVC"
		self.Notes = "Blower with Guide Vane"

		# General Parameters
		self._NV_Value = "5"
		self._NV_Notes = "Number of Vane Opening Data Points"

		# General Parameters
		self._ND_Value = "7"
		self._ND_Notes = "Number of Wind Flow Rate Data Points"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.dd_Value = "32"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.Vd_Value = "(5)"
		self.Vd_Notes = "Vane Opening Degree Data"

		# Primary Parameters List Value
		self.Vd_List_Value = array([ 0. , 14.5, 30. , 48.5, 90. ])
		# Primary Parameters
		self.Qd_Value = "(5,7)"
		self.Qd_Notes = "Volume Flow Rate Data[m3/min]"

		# Primary Parameters List Value
		self.Qd_List_Value = array([[  0.    ,   0.    ,  35.7887,  37.4155,  39.0422,  56.1232,
         56.839 ],
       [  0.    ,  45.5492,  52.0563,  58.5633,  65.0703,  68.3239,
         69.6253],
       [  0.    ,  45.5492,  55.3098,  65.0703,  71.252 ,  78.0844,
         84.9168],
       [  0.    ,  48.8028,  54.0897,  72.2281,  88.333 ,  97.6055,
        100.859 ],
       [  0.    ,  51.5683,  60.6781,  76.783 ,  88.0076,  99.5576,
        103.462 ]])
		# Primary Parameters
		self.Pd_Value = "(5,7)"
		self.Pd_Notes = "Wind Pres. Data[kPa]"

		# Primary Parameters List Value
		self.Pd_List_Value = array([[17.7787, 17.6435, 17.3975, 16.9671, 16.4752, 16.1063, 13.945 ],
       [25.7106, 25.4156, 24.5916, 23.1773, 20.5334, 18.1353, 16.0054],
       [26.3993, 26.7437, 26.6183, 25.8459, 24.9187, 23.1773, 20.0723],
       [26.6821, 27.42  , 27.3746, 26.558 , 24.8855, 22.8084, 21.5603],
       [39.2714, 39.9919, 39.9576, 39.5419, 39.0069, 37.2915, 36.4651]])
		# Primary Parameters
		self.Wd_Value = "(5,7)"
		self.Wd_Notes = "Shaft Power Data[kW]"

		# Primary Parameters List Value
		self.Wd_List_Value = array([[ 4.61999,  4.7176 ,  4.78267,  4.83147,  4.88028,  4.89654,
         4.91281],
       [ 5.53098,  5.93767,  6.18168,  6.50703,  6.66971,  6.75105,
         6.5412 ],
       [ 5.53098,  6.26302,  7.15774,  8.45915,  8.94717,  9.19119,
         8.45915],
       [ 4.88028,  6.84865,  7.43429,  9.87443, 11.4686 , 11.55   ,
        10.9806 ],
       [ 6.06781,  6.84865,  8.42661, 10.4438 , 12.5423 , 13.3557 ,
        13.5021 ]])
		# Primary Parameters
		self.Qsurge_Value = "35.79"
		self.Qsurge_Notes = "Surge Limit Flow Rate[m3/min]"

		# Primary Parameters
		self.posdeg0_Value = "0"
		self.posdeg0_Notes = "Minimum Vane Angle[deg]"

		# Primary Parameters
		self.posdeg1_Value = "90"
		self.posdeg1_Notes = "Maximum Vane Angle[deg]"

		# Primary Parameters
		self.tmove_Value = "5"
		self.tmove_Notes = "Time for Vane Open/Close[s]"

		# Primary Parameters
		self.tstart_Value = "5"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "5"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.srgopt_Value = "1"
		self.srgopt_Notes = "Perform Surge Calculation(0:N,1:Y)"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.anneald_Value = "0"
		self.anneald_Notes = "Density Relaxation(0:N,1:Y)"

		# Primary Parameters
		self.uratio_Value = "10"
		self.uratio_Notes = "Ratio for Density Relaxation[-]"

		# Primary Parameters
		self.udelay_Value = "10"
		self.udelay_Notes = "Delay Factor for Density Relaxation[-]"

		# Primary Parameters
		self.FvSt_Value = "0"
		self.FvSt_Notes = "Volume Flow Rate Start Value[m3/min]"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Vane Opening Degree Start Value[-]"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Outlet Temperature Start Value[C]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_K2203P1A:
	def __init__(self):
		self.ID = 973
		self.Name = "K2203P1A"
		self.Model = "PUMP_S_N"
		self.Notes = "Pump with Check Valve"

		# General Parameters
		self._NDT_Value = "16"
		self._NDT_Notes = "No. of Performance Curve Data Points"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.Vd_Value = "(16)"
		self.Vd_Notes = "Performance Curve Flow Rate Data[m3/h]"

		# Primary Parameters List Value
		self.Vd_List_Value = array([ 0.     ,  1.00917,  2.01835,  3.00459,  3.50917,  3.99083,
        4.51835,  4.97706,  5.48165,  5.98624,  6.46789,  6.97248,
        7.47706,  7.98165,  8.99083, 10.0229 ])
		# Primary Parameters
		self.Hd_Value = "(16)"
		self.Hd_Notes = "Performance Curve Head Data[m]"

		# Primary Parameters List Value
		self.Hd_List_Value = array([123.016 , 122.557 , 122.098 , 120.262 , 118.885 , 117.508 ,
       115.672 , 114.295 , 112.459 , 110.164 , 108.328 , 105.574 ,
       102.82  , 100.066 ,  94.0984,  87.2131])
		# Primary Parameters
		self.Wd_Value = "(16)"
		self.Wd_Notes = "Performance Curve Power Data[kW]"

		# Primary Parameters List Value
		self.Wd_List_Value = array([11.7919, 12.1387, 12.4855, 12.8324, 12.948 , 13.1792, 13.1792,
       13.4104, 13.526 , 13.6416, 13.8728, 13.9884, 14.2197, 14.2197,
       14.5665, 14.6821])
		# Primary Parameters
		self.tstart_Value = "2"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "2"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.dd_Value = "835"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.qatm_Value = "12"
		self.qatm_Notes = "Heat Loss Coefficient[W/K]"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.chkfail_Value = "0"
		self.chkfail_Notes = "Check Valve Fail Flag(0:Normal,1:Fail)"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_K2203P1B:
	def __init__(self):
		self.ID = 974
		self.Name = "K2203P1B"
		self.Model = "PUMP_S_N"
		self.Notes = "Pump with Check Valve"

		# General Parameters
		self._NDT_Value = "16"
		self._NDT_Notes = "No. of Performance Curve Data Points"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.Vd_Value = "(16)"
		self.Vd_Notes = "Performance Curve Flow Rate Data[m3/h]"

		# Primary Parameters List Value
		self.Vd_List_Value = array([ 0.     ,  1.00917,  2.01835,  3.00459,  3.50917,  3.99083,
        4.51835,  4.97706,  5.48165,  5.98624,  6.46789,  6.97248,
        7.47706,  7.98165,  8.99083, 10.0229 ])
		# Primary Parameters
		self.Hd_Value = "(16)"
		self.Hd_Notes = "Performance Curve Head Data[m]"

		# Primary Parameters List Value
		self.Hd_List_Value = array([123.016 , 122.557 , 122.098 , 120.262 , 118.885 , 117.508 ,
       115.672 , 114.295 , 112.459 , 110.164 , 108.328 , 105.574 ,
       102.82  , 100.066 ,  94.0984,  87.2131])
		# Primary Parameters
		self.Wd_Value = "(16)"
		self.Wd_Notes = "Performance Curve Power Data[kW]"

		# Primary Parameters List Value
		self.Wd_List_Value = array([11.7919, 12.1387, 12.4855, 12.8324, 12.948 , 13.1792, 13.1792,
       13.4104, 13.526 , 13.6416, 13.8728, 13.9884, 14.2197, 14.2197,
       14.5665, 14.6821])
		# Primary Parameters
		self.tstart_Value = "2"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "2"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.dd_Value = "835"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.qatm_Value = "12"
		self.qatm_Notes = "Heat Loss Coefficient[W/K]"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.chkfail_Value = "0"
		self.chkfail_Notes = "Check Valve Fail Flag(0:Normal,1:Fail)"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_K22061:
	def __init__(self):
		self.ID = 975
		self.Name = "K22061"
		self.Model = "COMP_RC"
		self.Notes = "Reciprocating Compressor"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.etype_Value = "1"
		self.etype_Notes = "Type 1:Adiabatic 2:Polytropic"

		# Primary Parameters
		self.Pmax_Value = "720.304"
		self.Pmax_Notes = "Max. Pressure[kPa]"

		# Primary Parameters
		self.Qd_Value = "9.5"
		self.Qd_Notes = "Design Suction Flow[m3/min]"

		# Primary Parameters
		self.et_Value = "75"
		self.et_Notes = "Efficiency[%]"

		# Primary Parameters
		self.kap_Value = "1.3"
		self.kap_Notes = "Specific Heat Ratio[-]"

		# Primary Parameters
		self.calckap_Value = "1"
		self.calckap_Notes = "Specific Heat Ratio Type(0:Const 1:Calc)"

		# Primary Parameters
		self.W0_Value = "0"
		self.W0_Notes = "Power at No Load[kW]"

		# Primary Parameters
		self.Pmin_Value = "0.98"
		self.Pmin_Notes = "Min. Suction Pressure[kPa]"

		# Primary Parameters
		self.tstart_Value = "5"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "5"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.stopfl_Value = "0"
		self.stopfl_Notes = "Flow when Stopped(0:No,1:Yes)"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.chkfail_Value = "0"
		self.chkfail_Notes = "Check Valve Fail Flag(0:Normal,1:Fail)"

		# Primary Parameters
		self.anneald_Value = "0"
		self.anneald_Notes = "Density Relaxation(0:N,1:Y)"

		# Primary Parameters
		self.uratio_Value = "10"
		self.uratio_Notes = "Ratio for Density Relaxation[-]"

		# Primary Parameters
		self.udelay_Value = "10"
		self.udelay_Notes = "Delay Factor for Density Relaxation[-]"

		# Primary Parameters
		self.QSt_Value = "0"
		self.QSt_Notes = "Volume Flow Rate Start Value[m3/min]"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Outlet Temperature Start Value[C]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_K22062:
	def __init__(self):
		self.ID = 976
		self.Name = "K22062"
		self.Model = "COMP_RC"
		self.Notes = "Reciprocating Compressor"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.etype_Value = "1"
		self.etype_Notes = "Type 1:Adiabatic 2:Polytropic"

		# Primary Parameters
		self.Pmax_Value = "2484.66"
		self.Pmax_Notes = "Max. Pressure[kPa]"

		# Primary Parameters
		self.Qd_Value = "1.73"
		self.Qd_Notes = "Design Suction Flow[m3/min]"

		# Primary Parameters
		self.et_Value = "75"
		self.et_Notes = "Efficiency[%]"

		# Primary Parameters
		self.kap_Value = "1.3"
		self.kap_Notes = "Specific Heat Ratio[-]"

		# Primary Parameters
		self.calckap_Value = "1"
		self.calckap_Notes = "Specific Heat Ratio Type(0:Const 1:Calc)"

		# Primary Parameters
		self.W0_Value = "0"
		self.W0_Notes = "Power at No Load[kW]"

		# Primary Parameters
		self.Pmin_Value = "0.98"
		self.Pmin_Notes = "Min. Suction Pressure[kPa]"

		# Primary Parameters
		self.tstart_Value = "5"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "5"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.stopfl_Value = "0"
		self.stopfl_Notes = "Flow when Stopped(0:No,1:Yes)"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.chkfail_Value = "0"
		self.chkfail_Notes = "Check Valve Fail Flag(0:Normal,1:Fail)"

		# Primary Parameters
		self.anneald_Value = "0"
		self.anneald_Notes = "Density Relaxation(0:N,1:Y)"

		# Primary Parameters
		self.uratio_Value = "10"
		self.uratio_Notes = "Ratio for Density Relaxation[-]"

		# Primary Parameters
		self.udelay_Value = "10"
		self.udelay_Notes = "Delay Factor for Density Relaxation[-]"

		# Primary Parameters
		self.QSt_Value = "0"
		self.QSt_Notes = "Volume Flow Rate Start Value[m3/min]"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Outlet Temperature Start Value[C]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_K2208:
	def __init__(self):
		self.ID = 977
		self.Name = "K2208"
		self.Model = "COMP_RC"
		self.Notes = "Reciprocating Compressor"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.etype_Value = "1"
		self.etype_Notes = "Type 1:Adiabatic 2:Polytropic"

		# Primary Parameters
		self.Pmax_Value = "5064.14"
		self.Pmax_Notes = "Max. Pressure[kPa]"

		# Primary Parameters
		self.Qd_Value = "0.3333"
		self.Qd_Notes = "Design Suction Flow[m3/min]"

		# Primary Parameters
		self.et_Value = "75"
		self.et_Notes = "Efficiency[%]"

		# Primary Parameters
		self.kap_Value = "1.21301"
		self.kap_Notes = "Specific Heat Ratio[-]"

		# Primary Parameters
		self.calckap_Value = "1"
		self.calckap_Notes = "Specific Heat Ratio Type(0:Const 1:Calc)"

		# Primary Parameters
		self.W0_Value = "0"
		self.W0_Notes = "Power at No Load[kW]"

		# Primary Parameters
		self.Pmin_Value = "0.98"
		self.Pmin_Notes = "Min. Suction Pressure[kPa]"

		# Primary Parameters
		self.tstart_Value = "5"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "5"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.stopfl_Value = "0"
		self.stopfl_Notes = "Flow when Stopped(0:No,1:Yes)"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.chkfail_Value = "0"
		self.chkfail_Notes = "Check Valve Fail Flag(0:Normal,1:Fail)"

		# Primary Parameters
		self.anneald_Value = "0"
		self.anneald_Notes = "Density Relaxation(0:N,1:Y)"

		# Primary Parameters
		self.uratio_Value = "10"
		self.uratio_Notes = "Ratio for Density Relaxation[-]"

		# Primary Parameters
		self.udelay_Value = "10"
		self.udelay_Notes = "Delay Factor for Density Relaxation[-]"

		# Primary Parameters
		self.QSt_Value = "0"
		self.QSt_Notes = "Volume Flow Rate Start Value[m3/min]"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Outlet Temperature Start Value[C]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_K2210A:
	def __init__(self):
		self.ID = 978
		self.Name = "K2210A"
		self.Model = "COMPVC"
		self.Notes = "Blower with Guide Vane"

		# General Parameters
		self._NV_Value = "5"
		self._NV_Notes = "Number of Vane Opening Data Points"

		# General Parameters
		self._ND_Value = "7"
		self._ND_Notes = "Number of Wind Flow Rate Data Points"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.dd_Value = "2.1"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.Vd_Value = "(5)"
		self.Vd_Notes = "Vane Opening Degree Data"

		# Primary Parameters List Value
		self.Vd_List_Value = array([ 0. , 14.5, 30. , 48.5, 90. ])
		# Primary Parameters
		self.Qd_Value = "(5,7)"
		self.Qd_Notes = "Volume Flow Rate Data[m3/min]"

		# Primary Parameters List Value
		self.Qd_List_Value = array([[ 0.    ,  0.    , 13.5253, 14.1401, 14.7549, 21.2102, 21.4807],
       [ 0.    , 17.2141, 19.6732, 22.1324, 24.5915, 25.8211, 26.3129],
       [ 0.    , 17.2141, 20.9028, 24.5915, 26.9277, 29.5098, 32.0919],
       [ 0.    , 18.4436, 20.4417, 27.2966, 33.383 , 36.8873, 38.1169],
       [ 0.    , 19.4888, 22.9316, 29.018 , 33.26  , 37.625 , 39.1005]])
		# Primary Parameters
		self.Pd_Value = "(5,7)"
		self.Pd_Notes = "Wind Pres. Data[kPa]"

		# Primary Parameters List Value
		self.Pd_List_Value = array([[ 7.93946,  7.87909,  7.76922,  7.57702,  7.35734,  7.19258,
         6.22742],
       [11.4816 , 11.3499 , 10.9819 , 10.3503 ,  9.16961,  8.09872,
         7.14756],
       [11.7892 , 11.943  , 11.887  , 11.542  , 11.128  , 10.3503 ,
         8.9637 ],
       [11.9155 , 12.245  , 12.2247 , 11.86   , 11.1131 , 10.1856 ,
         9.62819],
       [17.5375 , 17.8592 , 17.8439 , 17.6583 , 17.4194 , 16.6533 ,
        16.2842 ]])
		# Primary Parameters
		self.Wd_Value = "(5,7)"
		self.Wd_Notes = "Shaft Power Data[kW]"

		# Primary Parameters List Value
		self.Wd_List_Value = array([[1.746  , 1.78289, 1.80748, 1.82592, 1.84436, 1.85051, 1.85666],
       [2.09028, 2.24398, 2.3362 , 2.45915, 2.52063, 2.55137, 2.47206],
       [2.09028, 2.36693, 2.70507, 3.1969 , 3.38134, 3.47355, 3.1969 ],
       [1.84436, 2.58826, 2.80958, 3.73176, 4.33426, 4.365  , 4.14982],
       [2.29316, 2.58826, 3.1846 , 3.94694, 4.74002, 5.04741, 5.10274]])
		# Primary Parameters
		self.Qsurge_Value = "10.26"
		self.Qsurge_Notes = "Surge Limit Flow Rate[m3/min]"

		# Primary Parameters
		self.posdeg0_Value = "0"
		self.posdeg0_Notes = "Minimum Vane Angle[deg]"

		# Primary Parameters
		self.posdeg1_Value = "90"
		self.posdeg1_Notes = "Maximum Vane Angle[deg]"

		# Primary Parameters
		self.tmove_Value = "5"
		self.tmove_Notes = "Time for Vane Open/Close[s]"

		# Primary Parameters
		self.tstart_Value = "5"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "5"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.srgopt_Value = "1"
		self.srgopt_Notes = "Perform Surge Calculation(0:N,1:Y)"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.anneald_Value = "0"
		self.anneald_Notes = "Density Relaxation(0:N,1:Y)"

		# Primary Parameters
		self.uratio_Value = "10"
		self.uratio_Notes = "Ratio for Density Relaxation[-]"

		# Primary Parameters
		self.udelay_Value = "10"
		self.udelay_Notes = "Delay Factor for Density Relaxation[-]"

		# Primary Parameters
		self.FvSt_Value = "0"
		self.FvSt_Notes = "Volume Flow Rate Start Value[m3/min]"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Vane Opening Degree Start Value[-]"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Outlet Temperature Start Value[C]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_K2210AH:
	def __init__(self):
		self.ID = 979
		self.Name = "K2210AH"
		self.Model = "HEATXB"
		self.Notes = "General-Purpose Heat Exchanger"

		# General Parameters
		self._NB_Value = "5"
		self._NB_Notes = "Number of segments"

		# Primary Parameters
		self.TYPE_Value = "1"
		self.TYPE_Notes = "0: Cocurrent 1:Countercurrent"

		# Primary Parameters
		self.A_Value = "10"
		self.A_Notes = "Heat Transfer Area[m2]"

		# Primary Parameters
		self.Gw_Value = "1000"
		self.Gw_Notes = "Heat Transfer Wall Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "H.Trans. Wall Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aair_Value = "0"
		self.Aair_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uair_Value = "6"
		self.Uair_Notes = "Heat Trans. Coef. for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Tw_Value = "(5)"
		self.Tw_Notes = "Heat Transfer Wall Temp.[C]"

		# Primary Parameters List Value
		self.Tw_List_Value = array([25., 25., 25., 25., 25.])
		# Primary Parameters
		self.UH_Value = "600"
		self.UH_Notes = "Hot Side Heat Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.UHalp_Value = "0"
		self.UHalp_Notes = "Flow Exponent for Hot Side H.T. Coef.[-]"

		# Primary Parameters
		self.tlagH_Value = "0"
		self.tlagH_Notes = "H. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WHdes_Value = "1000"
		self.WHdes_Notes = "Hot Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DHdes_Value = "2.01"
		self.DHdes_Notes = "Hot Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdHdes_Value = "10"
		self.PdHdes_Notes = "Hot Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.UL_Value = "600"
		self.UL_Notes = "Cold Side H.Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.ULalp_Value = "0"
		self.ULalp_Notes = "Cold Side H.T.Coef. Flow Factor"

		# Primary Parameters
		self.tlagL_Value = "0"
		self.tlagL_Notes = "C. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WLdes_Value = "4400"
		self.WLdes_Notes = "Cold Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DLdes_Value = "2.19"
		self.DLdes_Notes = "Cold Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdLdes_Value = "10"
		self.PdLdes_Notes = "Cold Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No.: Hot Side"

		# Primary Parameters
		self.s2_Value = "1"
		self.s2_Notes = "System No.: Cold Side"

		# Primary Parameters
		self.THSt_Value = "25"
		self.THSt_Notes = "Hot Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.TLSt_Value = "25"
		self.TLSt_Notes = "Cold Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.PdH_Value = "10"
		self.PdH_Notes = "Hot Side Pressure Drop[kPa]"

		# Primary Parameters
		self.PdL_Value = "10"
		self.PdL_Notes = "Cold Side Pressure Drop[kPa]"

class Block_K2210B:
	def __init__(self):
		self.ID = 980
		self.Name = "K2210B"
		self.Model = "COMPVC"
		self.Notes = "Blower with Guide Vane"

		# General Parameters
		self._NV_Value = "5"
		self._NV_Notes = "Number of Vane Opening Data Points"

		# General Parameters
		self._ND_Value = "7"
		self._ND_Notes = "Number of Wind Flow Rate Data Points"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.dd_Value = "2.1"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.Vd_Value = "(5)"
		self.Vd_Notes = "Vane Opening Degree Data"

		# Primary Parameters List Value
		self.Vd_List_Value = array([ 0. , 14.5, 30. , 48.5, 90. ])
		# Primary Parameters
		self.Qd_Value = "(5,7)"
		self.Qd_Notes = "Volume Flow Rate Data[m3/min]"

		# Primary Parameters List Value
		self.Qd_List_Value = array([[ 0.    ,  0.    , 13.5253, 14.1401, 14.7549, 21.2102, 21.4807],
       [ 0.    , 17.2141, 19.6732, 22.1324, 24.5915, 25.8211, 26.3129],
       [ 0.    , 17.2141, 20.9028, 24.5915, 26.9277, 29.5098, 32.0919],
       [ 0.    , 18.4436, 20.4417, 27.2966, 33.383 , 36.8873, 38.1169],
       [ 0.    , 19.4888, 22.9316, 29.018 , 33.26  , 37.625 , 39.1005]])
		# Primary Parameters
		self.Pd_Value = "(5,7)"
		self.Pd_Notes = "Wind Pres. Data[kPa]"

		# Primary Parameters List Value
		self.Pd_List_Value = array([[14.1776, 14.0698, 13.8736, 13.5304, 13.1381, 12.8439, 11.1204],
       [20.5029, 20.2676, 19.6105, 18.4827, 16.3743, 14.462 , 12.7635],
       [21.0521, 21.3267, 21.2267, 20.6108, 19.8714, 18.4827, 16.0066],
       [21.2776, 21.866 , 21.8298, 21.1786, 19.8449, 18.1885, 17.1932],
       [31.3169, 31.8915, 31.8641, 31.5326, 31.106 , 29.738 , 29.079 ]])
		# Primary Parameters
		self.Wd_Value = "(5,7)"
		self.Wd_Notes = "Shaft Power Data[kW]"

		# Primary Parameters List Value
		self.Wd_List_Value = array([[1.746  , 1.78289, 1.80748, 1.82592, 1.84436, 1.85051, 1.85666],
       [2.09028, 2.24398, 2.3362 , 2.45915, 2.52063, 2.55137, 2.47206],
       [2.09028, 2.36693, 2.70507, 3.1969 , 3.38134, 3.47355, 3.1969 ],
       [1.84436, 2.58826, 2.80958, 3.73176, 4.33426, 4.365  , 4.14982],
       [2.29316, 2.58826, 3.1846 , 3.94694, 4.74002, 5.04741, 5.10274]])
		# Primary Parameters
		self.Qsurge_Value = "10.26"
		self.Qsurge_Notes = "Surge Limit Flow Rate[m3/min]"

		# Primary Parameters
		self.posdeg0_Value = "0"
		self.posdeg0_Notes = "Minimum Vane Angle[deg]"

		# Primary Parameters
		self.posdeg1_Value = "90"
		self.posdeg1_Notes = "Maximum Vane Angle[deg]"

		# Primary Parameters
		self.tmove_Value = "5"
		self.tmove_Notes = "Time for Vane Open/Close[s]"

		# Primary Parameters
		self.tstart_Value = "5"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "5"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.srgopt_Value = "1"
		self.srgopt_Notes = "Perform Surge Calculation(0:N,1:Y)"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.anneald_Value = "0"
		self.anneald_Notes = "Density Relaxation(0:N,1:Y)"

		# Primary Parameters
		self.uratio_Value = "10"
		self.uratio_Notes = "Ratio for Density Relaxation[-]"

		# Primary Parameters
		self.udelay_Value = "10"
		self.udelay_Notes = "Delay Factor for Density Relaxation[-]"

		# Primary Parameters
		self.FvSt_Value = "0"
		self.FvSt_Notes = "Volume Flow Rate Start Value[m3/min]"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Vane Opening Degree Start Value[-]"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Outlet Temperature Start Value[C]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_K2210BH:
	def __init__(self):
		self.ID = 981
		self.Name = "K2210BH"
		self.Model = "HEATXB"
		self.Notes = "General-Purpose Heat Exchanger"

		# General Parameters
		self._NB_Value = "5"
		self._NB_Notes = "Number of segments"

		# Primary Parameters
		self.TYPE_Value = "1"
		self.TYPE_Notes = "0: Cocurrent 1:Countercurrent"

		# Primary Parameters
		self.A_Value = "10"
		self.A_Notes = "Heat Transfer Area[m2]"

		# Primary Parameters
		self.Gw_Value = "1000"
		self.Gw_Notes = "Heat Transfer Wall Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "H.Trans. Wall Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aair_Value = "0"
		self.Aair_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uair_Value = "6"
		self.Uair_Notes = "Heat Trans. Coef. for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Tw_Value = "(5)"
		self.Tw_Notes = "Heat Transfer Wall Temp.[C]"

		# Primary Parameters List Value
		self.Tw_List_Value = array([25., 25., 25., 25., 25.])
		# Primary Parameters
		self.UH_Value = "600"
		self.UH_Notes = "Hot Side Heat Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.UHalp_Value = "0"
		self.UHalp_Notes = "Flow Exponent for Hot Side H.T. Coef.[-]"

		# Primary Parameters
		self.tlagH_Value = "0"
		self.tlagH_Notes = "H. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WHdes_Value = "1000"
		self.WHdes_Notes = "Hot Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DHdes_Value = "2.01"
		self.DHdes_Notes = "Hot Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdHdes_Value = "10"
		self.PdHdes_Notes = "Hot Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.UL_Value = "600"
		self.UL_Notes = "Cold Side H.Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.ULalp_Value = "0"
		self.ULalp_Notes = "Cold Side H.T.Coef. Flow Factor"

		# Primary Parameters
		self.tlagL_Value = "0"
		self.tlagL_Notes = "C. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WLdes_Value = "4400"
		self.WLdes_Notes = "Cold Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DLdes_Value = "2.19"
		self.DLdes_Notes = "Cold Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdLdes_Value = "10"
		self.PdLdes_Notes = "Cold Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No.: Hot Side"

		# Primary Parameters
		self.s2_Value = "1"
		self.s2_Notes = "System No.: Cold Side"

		# Primary Parameters
		self.THSt_Value = "25"
		self.THSt_Notes = "Hot Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.TLSt_Value = "25"
		self.TLSt_Notes = "Cold Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.PdH_Value = "10"
		self.PdH_Notes = "Hot Side Pressure Drop[kPa]"

		# Primary Parameters
		self.PdL_Value = "10"
		self.PdL_Notes = "Cold Side Pressure Drop[kPa]"

class Block_K2501A:
	def __init__(self):
		self.ID = 982
		self.Name = "K2501A"
		self.Model = "COMPVC"
		self.Notes = "Blower with Guide Vane"

		# General Parameters
		self._NV_Value = "5"
		self._NV_Notes = "Number of Vane Opening Data Points"

		# General Parameters
		self._ND_Value = "7"
		self._ND_Notes = "Number of Wind Flow Rate Data Points"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.dd_Value = "1.11"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.Vd_Value = "(5)"
		self.Vd_Notes = "Vane Opening Degree Data"

		# Primary Parameters List Value
		self.Vd_List_Value = array([ 0. , 14.5, 30. , 48.5, 90. ])
		# Primary Parameters
		self.Qd_Value = "(5,7)"
		self.Qd_Notes = "Volume Flow Rate Data[m3/min]"

		# Primary Parameters List Value
		self.Qd_List_Value = array([[ 0.    ,  0.    , 20.2578, 21.1786, 22.0994, 31.768 , 32.1731],
       [ 0.    , 25.7827, 29.4659, 33.1492, 36.8324, 38.674 , 39.4107],
       [ 0.    , 25.7827, 31.3076, 36.8324, 40.3315, 44.1989, 48.0663],
       [ 0.    , 27.6243, 30.6169, 40.884 , 50.    , 55.2486, 57.0902],
       [ 0.    , 29.1897, 34.3462, 43.4622, 49.8158, 56.3536, 58.5635]])
		# Primary Parameters
		self.Pd_Value = "(5,7)"
		self.Pd_Notes = "Wind Pres. Data[kPa]"

		# Primary Parameters List Value
		self.Pd_List_Value = array([[14.3194, 14.2105, 14.0123, 13.6657, 13.2695, 12.9723, 11.2316],
       [20.7079, 20.4703, 19.8066, 18.6675, 16.538 , 14.6066, 12.8911],
       [21.2626, 21.54  , 21.439 , 20.8169, 20.0701, 18.6675, 16.1667],
       [21.4904, 22.0847, 22.0481, 21.3904, 20.0433, 18.3704, 17.3651],
       [31.6301, 32.2104, 32.1827, 31.8479, 31.4171, 30.0354, 29.3698]])
		# Primary Parameters
		self.Wd_Value = "(5,7)"
		self.Wd_Notes = "Shaft Power Data[kW]"

		# Primary Parameters List Value
		self.Wd_List_Value = array([[15.5954, 15.4768, 15.261 , 14.8834, 14.4519, 14.1283, 12.2324],
       [22.5532, 22.2944, 21.5715, 20.331 , 18.0117, 15.9082, 14.0398],
       [23.1573, 23.4594, 23.3494, 22.6719, 21.8585, 20.331 , 17.6073],
       [23.4054, 24.0526, 24.0128, 23.2965, 21.8294, 20.0073, 18.9125],
       [34.4486, 35.0806, 35.0505, 34.6859, 34.2166, 32.7118, 31.9869]])
		# Primary Parameters
		self.Qsurge_Value = "20.25"
		self.Qsurge_Notes = "Surge Limit Flow Rate[m3/min]"

		# Primary Parameters
		self.posdeg0_Value = "0"
		self.posdeg0_Notes = "Minimum Vane Angle[deg]"

		# Primary Parameters
		self.posdeg1_Value = "90"
		self.posdeg1_Notes = "Maximum Vane Angle[deg]"

		# Primary Parameters
		self.tmove_Value = "5"
		self.tmove_Notes = "Time for Vane Open/Close[s]"

		# Primary Parameters
		self.tstart_Value = "5"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "5"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.srgopt_Value = "1"
		self.srgopt_Notes = "Perform Surge Calculation(0:N,1:Y)"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.anneald_Value = "0"
		self.anneald_Notes = "Density Relaxation(0:N,1:Y)"

		# Primary Parameters
		self.uratio_Value = "10"
		self.uratio_Notes = "Ratio for Density Relaxation[-]"

		# Primary Parameters
		self.udelay_Value = "10"
		self.udelay_Notes = "Delay Factor for Density Relaxation[-]"

		# Primary Parameters
		self.FvSt_Value = "0"
		self.FvSt_Notes = "Volume Flow Rate Start Value[m3/min]"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Vane Opening Degree Start Value[-]"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Outlet Temperature Start Value[C]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_K2501B:
	def __init__(self):
		self.ID = 983
		self.Name = "K2501B"
		self.Model = "COMPVC"
		self.Notes = "Blower with Guide Vane"

		# General Parameters
		self._NV_Value = "5"
		self._NV_Notes = "Number of Vane Opening Data Points"

		# General Parameters
		self._ND_Value = "7"
		self._ND_Notes = "Number of Wind Flow Rate Data Points"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.dd_Value = "1.11"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.Vd_Value = "(5)"
		self.Vd_Notes = "Vane Opening Degree Data"

		# Primary Parameters List Value
		self.Vd_List_Value = array([ 0. , 14.5, 30. , 48.5, 90. ])
		# Primary Parameters
		self.Qd_Value = "(5,7)"
		self.Qd_Notes = "Volume Flow Rate Data[m3/min]"

		# Primary Parameters List Value
		self.Qd_List_Value = array([[ 0.    ,  0.    , 20.2578, 21.1786, 22.0994, 31.768 , 32.1731],
       [ 0.    , 25.7827, 29.4659, 33.1492, 36.8324, 38.674 , 39.4107],
       [ 0.    , 25.7827, 31.3076, 36.8324, 40.3315, 44.1989, 48.0663],
       [ 0.    , 27.6243, 30.6169, 40.884 , 50.    , 55.2486, 57.0902],
       [ 0.    , 29.1897, 34.3462, 43.4622, 49.8158, 56.3536, 58.5635]])
		# Primary Parameters
		self.Pd_Value = "(5,7)"
		self.Pd_Notes = "Wind Pres. Data[kPa]"

		# Primary Parameters List Value
		self.Pd_List_Value = array([[14.3194, 14.2105, 14.0123, 13.6657, 13.2695, 12.9723, 11.2316],
       [20.7079, 20.4703, 19.8066, 18.6675, 16.538 , 14.6066, 12.8911],
       [21.2626, 21.54  , 21.439 , 20.8169, 20.0701, 18.6675, 16.1667],
       [21.4904, 22.0847, 22.0481, 21.3904, 20.0433, 18.3704, 17.3651],
       [31.6301, 32.2104, 32.1827, 31.8479, 31.4171, 30.0354, 29.3698]])
		# Primary Parameters
		self.Wd_Value = "(5,7)"
		self.Wd_Notes = "Shaft Power Data[kW]"

		# Primary Parameters List Value
		self.Wd_List_Value = array([[2.6151 , 2.67035, 2.70718, 2.73481, 2.76243, 2.77164, 2.78085],
       [3.13076, 3.36096, 3.49908, 3.68324, 3.77532, 3.82136, 3.70258],
       [3.13076, 3.54512, 4.05157, 4.78821, 5.06446, 5.20258, 4.78821],
       [2.76243, 3.87661, 4.2081 , 5.58932, 6.49171, 6.53775, 6.21547],
       [3.43462, 3.87661, 4.7698 , 5.9116 , 7.09945, 7.55985, 7.64273]])
		# Primary Parameters
		self.Qsurge_Value = "20.25"
		self.Qsurge_Notes = "Surge Limit Flow Rate[m3/min]"

		# Primary Parameters
		self.posdeg0_Value = "0"
		self.posdeg0_Notes = "Minimum Vane Angle[deg]"

		# Primary Parameters
		self.posdeg1_Value = "90"
		self.posdeg1_Notes = "Maximum Vane Angle[deg]"

		# Primary Parameters
		self.tmove_Value = "5"
		self.tmove_Notes = "Time for Vane Open/Close[s]"

		# Primary Parameters
		self.tstart_Value = "5"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "5"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.srgopt_Value = "1"
		self.srgopt_Notes = "Perform Surge Calculation(0:N,1:Y)"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.anneald_Value = "0"
		self.anneald_Notes = "Density Relaxation(0:N,1:Y)"

		# Primary Parameters
		self.uratio_Value = "10"
		self.uratio_Notes = "Ratio for Density Relaxation[-]"

		# Primary Parameters
		self.udelay_Value = "10"
		self.udelay_Notes = "Delay Factor for Density Relaxation[-]"

		# Primary Parameters
		self.FvSt_Value = "0"
		self.FvSt_Notes = "Volume Flow Rate Start Value[m3/min]"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Vane Opening Degree Start Value[-]"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Outlet Temperature Start Value[C]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_K2505:
	def __init__(self):
		self.ID = 984
		self.Name = "K2505"
		self.Model = "COMPVC"
		self.Notes = "Blower with Guide Vane"

		# General Parameters
		self._NV_Value = "1"
		self._NV_Notes = "Number of Vane Opening Data Points"

		# General Parameters
		self._ND_Value = "1"
		self._ND_Notes = "Number of Wind Flow Rate Data Points"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.dd_Value = "5"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.Vd_Value = "(1)"
		self.Vd_Notes = "Vane Opening Degree Data"

		# Primary Parameters List Value
		self.Vd_List_Value = array([90.])
		# Primary Parameters
		self.Qd_Value = "(1,1)"
		self.Qd_Notes = "Volume Flow Rate Data[m3/min]"

		# Primary Parameters List Value
		self.Qd_List_Value = array([[10.]])
		# Primary Parameters
		self.Pd_Value = "(1,1)"
		self.Pd_Notes = "Wind Pres. Data[kPa]"

		# Primary Parameters List Value
		self.Pd_List_Value = array([[10.]])
		# Primary Parameters
		self.Wd_Value = "(1,1)"
		self.Wd_Notes = "Shaft Power Data[kW]"

		# Primary Parameters List Value
		self.Wd_List_Value = array([[1.]])
		# Primary Parameters
		self.Qsurge_Value = "1"
		self.Qsurge_Notes = "Surge Limit Flow Rate[m3/min]"

		# Primary Parameters
		self.posdeg0_Value = "0"
		self.posdeg0_Notes = "Minimum Vane Angle[deg]"

		# Primary Parameters
		self.posdeg1_Value = "90"
		self.posdeg1_Notes = "Maximum Vane Angle[deg]"

		# Primary Parameters
		self.tmove_Value = "5"
		self.tmove_Notes = "Time for Vane Open/Close[s]"

		# Primary Parameters
		self.tstart_Value = "5"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "5"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.srgopt_Value = "1"
		self.srgopt_Notes = "Perform Surge Calculation(0:N,1:Y)"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.anneald_Value = "0"
		self.anneald_Notes = "Density Relaxation(0:N,1:Y)"

		# Primary Parameters
		self.uratio_Value = "10"
		self.uratio_Notes = "Ratio for Density Relaxation[-]"

		# Primary Parameters
		self.udelay_Value = "10"
		self.udelay_Notes = "Delay Factor for Density Relaxation[-]"

		# Primary Parameters
		self.FvSt_Value = "0"
		self.FvSt_Notes = "Volume Flow Rate Start Value[m3/min]"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Vane Opening Degree Start Value[-]"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Outlet Temperature Start Value[C]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_K2901:
	def __init__(self):
		self.ID = 985
		self.Name = "K2901"
		self.Model = "COMPVC"
		self.Notes = "Blower with Guide Vane"

		# General Parameters
		self._NV_Value = "5"
		self._NV_Notes = "Number of Vane Opening Data Points"

		# General Parameters
		self._ND_Value = "7"
		self._ND_Notes = "Number of Wind Flow Rate Data Points"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.dd_Value = "1.186"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.Vd_Value = "(5)"
		self.Vd_Notes = "Vane Opening Degree Data"

		# Primary Parameters List Value
		self.Vd_List_Value = array([ 0. , 14.5, 30. , 48.5, 90. ])
		# Primary Parameters
		self.Qd_Value = "(5,7)"
		self.Qd_Notes = "Volume Flow Rate Data[m3/min]"

		# Primary Parameters List Value
		self.Qd_List_Value = array([[0.     , 0.     , 2.36328, 2.4707 , 2.57812, 3.70605, 3.75332],
       [0.     , 3.00781, 3.4375 , 3.86718, 4.29687, 4.51171, 4.59765],
       [0.     , 3.00781, 3.65234, 4.29687, 4.70507, 5.15624, 5.60741],
       [0.     , 3.22265, 3.57177, 4.76952, 5.833  , 6.4453 , 6.66015],
       [0.     , 3.40527, 4.00683, 5.07031, 5.81152, 6.57421, 6.83202]])
		# Primary Parameters
		self.Pd_Value = "(5,7)"
		self.Pd_Notes = "Wind Pres. Data[kPa]"

		# Primary Parameters List Value
		self.Pd_List_Value = array([[28.3552, 28.1396, 27.7472, 27.0608, 26.2762, 25.6878, 22.2408],
       [41.0058, 40.5352, 39.221 , 36.9654, 32.7486, 28.924 , 25.527 ],
       [42.1042, 42.6534, 42.4534, 41.2216, 39.7428, 36.9654, 32.0132],
       [42.5552, 43.732 , 43.6596, 42.3572, 39.6898, 36.377 , 34.3864],
       [62.6338, 63.783 , 63.7282, 63.0652, 62.212 , 59.476 , 58.158 ]])
		# Primary Parameters
		self.Wd_Value = "(5,7)"
		self.Wd_Notes = "Shaft Power Data[kW]"

		# Primary Parameters List Value
		self.Wd_List_Value = array([[0.305078, 0.311523, 0.31582 , 0.319043, 0.322265, 0.323339,
        0.324414],
       [0.365234, 0.392089, 0.408203, 0.429687, 0.440429, 0.4458  ,
        0.431943],
       [0.365234, 0.413574, 0.472656, 0.558593, 0.59082 , 0.606933,
        0.558593],
       [0.322265, 0.452245, 0.490917, 0.65205 , 0.757323, 0.762694,
        0.725097],
       [0.400683, 0.452245, 0.556445, 0.689648, 0.828222, 0.881932,
        0.8916  ]])
		# Primary Parameters
		self.Qsurge_Value = "2.36"
		self.Qsurge_Notes = "Surge Limit Flow Rate[m3/min]"

		# Primary Parameters
		self.posdeg0_Value = "0"
		self.posdeg0_Notes = "Minimum Vane Angle[deg]"

		# Primary Parameters
		self.posdeg1_Value = "90"
		self.posdeg1_Notes = "Maximum Vane Angle[deg]"

		# Primary Parameters
		self.tmove_Value = "5"
		self.tmove_Notes = "Time for Vane Open/Close[s]"

		# Primary Parameters
		self.tstart_Value = "5"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "5"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.srgopt_Value = "1"
		self.srgopt_Notes = "Perform Surge Calculation(0:N,1:Y)"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.anneald_Value = "0"
		self.anneald_Notes = "Density Relaxation(0:N,1:Y)"

		# Primary Parameters
		self.uratio_Value = "10"
		self.uratio_Notes = "Ratio for Density Relaxation[-]"

		# Primary Parameters
		self.udelay_Value = "10"
		self.udelay_Notes = "Delay Factor for Density Relaxation[-]"

		# Primary Parameters
		self.FvSt_Value = "0"
		self.FvSt_Notes = "Volume Flow Rate Start Value[m3/min]"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Vane Opening Degree Start Value[-]"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Outlet Temperature Start Value[C]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_K2911BEAR:
	def __init__(self):
		self.ID = 986
		self.Name = "K2911BEAR"
		self.Model = "STRAINS"
		self.Notes = "Gas Filter"

		# Primary Parameters
		self.Wd_Value = "199"
		self.Wd_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters
		self.DP_Value = "200"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.dd_Value = "753"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.md_Value = "0"
		self.md_Notes = "Design Viscosity[Pas]"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "5"
		self.s1_Notes = "System No."

class Block_K2911D1:
	def __init__(self):
		self.ID = 987
		self.Name = "K2911D1"
		self.Model = "_FLASHE"
		self.Notes = "Flash Drum"

		# General Parameters
		self._NZLHGT_Value = "0"
		self._NZLHGT_Notes = "Specify Nozzle Heights(0:N,1:Y)"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.y_Value = "(31)"
		self.y_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.y_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])
		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Temperature[C]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.DTYPE_Value = "2"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "0.5"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "2"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Gw_Value = "2000"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Rdis_Value = "0.05"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.kQe1_Value = "0"
		self.kQe1_Notes = "External Heating Unit Connection(1:Yes)"

		# Primary Parameters
		self.kQe2_Value = "0"
		self.kQe2_Notes = "External Heating Unit Connection(1:Yes)"

		# Primary Parameters
		self.kQe3_Value = "0"
		self.kQe3_Notes = "External Heating Unit Connection(1:Yes)"

		# Primary Parameters
		self.kQe4_Value = "0"
		self.kQe4_Notes = "External Heating Unit Connection(1:Yes)"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.uparme_Value = "(10)"
		self.uparme_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparme_List_Value = array([0.05, 0.01, 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ])
		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "5"
		self.s1_Notes = "System No."

class Block_K2911D1H:
	def __init__(self):
		self.ID = 988
		self.Name = "K2911D1H"
		self.Model = "HEATXBH"
		self.Notes = "General-Purpose Hot Side"

		# General Parameters
		self._NB_Value = "1"
		self._NB_Notes = "Number of Segments"

		# General Parameters
		self._WCALC_Value = "1"
		self._WCALC_Notes = "Calculation of Wall(1:Yes, 0:No)"

		# General Parameters
		self._kWdiv_Value = "1"
		self._kWdiv_Notes = "Segmentation of Wall(1:Yes, 0:No)"

		# Primary Parameters
		self.A_Value = "10"
		self.A_Notes = "Heat Transfer Area[m2]"

		# Primary Parameters
		self.Gw_Value = "500"
		self.Gw_Notes = "Heat Transfer Wall Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "H.Trans. Wall Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aair_Value = "0"
		self.Aair_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uair_Value = "6"
		self.Uair_Notes = "Heat Trans. Coef. for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Tw_Value = "(1)"
		self.Tw_Notes = "Heat Transfer Wall Temp.[C]"

		# Primary Parameters List Value
		self.Tw_List_Value = array([25.])
		# Primary Parameters
		self.UH_Value = "600"
		self.UH_Notes = "Hot Side Heat Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.UHalp_Value = "0"
		self.UHalp_Notes = "Flow Exponent for Hot Side H.T. Coef.[-]"

		# Primary Parameters
		self.tlagH_Value = "0"
		self.tlagH_Notes = "H. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WHdes_Value = "100"
		self.WHdes_Notes = "Hot Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DHdes_Value = "2.01"
		self.DHdes_Notes = "Hot Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdHdes_Value = "10"
		self.PdHdes_Notes = "Hot Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.THSt_Value = "25"
		self.THSt_Notes = "Hot Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.PdH_Value = "10"
		self.PdH_Notes = "Hot Side Pressure Drop[kPa]"

		# Primary Parameters
		self.Tmin_Value = "25"
		self.Tmin_Notes = "Min. Wall Temperature[C]"

		# Primary Parameters
		self.QTYPE_Value = "0"
		self.QTYPE_Notes = "External Unit(0:No,1:Heating,2:Cooling)"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No.: Hot Side"

class Block_K2911E1:
	def __init__(self):
		self.ID = 989
		self.Name = "K2911E1"
		self.Model = "HEATXC_V"
		self.Notes = "Partial Condenser"

		# General Parameters
		self._NB_Value = "5"
		self._NB_Notes = "Number of Segments"

		# Primary Parameters
		self.TYPE_Value = "1"
		self.TYPE_Notes = "Flow Type(0:Cocurrent,1:Countercurrent)"

		# Primary Parameters
		self.A_Value = "1500"
		self.A_Notes = "Heat Transfer Area[m2]"

		# Primary Parameters
		self.Gw_Value = "9999"
		self.Gw_Notes = "Heat Transfer Wall Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "H.Trans. Wall Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aair_Value = "0"
		self.Aair_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uair_Value = "6"
		self.Uair_Notes = "Heat Trans. Coef. for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Tw_Value = "(5)"
		self.Tw_Notes = "Heat Transfer Wall Temp.[C]"

		# Primary Parameters List Value
		self.Tw_List_Value = array([30., 30., 30., 30., 30.])
		# Primary Parameters
		self.PH_Value = "101.325"
		self.PH_Notes = "Hot Side Internal Pressure[kPa]"

		# Primary Parameters
		self.VH_Value = "5"
		self.VH_Notes = "Hot Side Volume[m3]"

		# Primary Parameters
		self.UHv_Value = "170"
		self.UHv_Notes = "Hot Side Vap. H.T.Coef.[W/m2K]"

		# Primary Parameters
		self.UHc_Value = "1700"
		self.UHc_Notes = "H.T.Coef. of Condensation[W/m2K]"

		# Primary Parameters
		self.WHdes_Value = "40000"
		self.WHdes_Notes = "Hot Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DHdes_Value = "67"
		self.DHdes_Notes = "Hot Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdHdes_Value = "2"
		self.PdHdes_Notes = "Hot Side Design Pres.Drop[kPa]"

		# Primary Parameters
		self.LHhigh_Value = "0.55"
		self.LHhigh_Notes = "Hot Side H.T.Area Max. Level[m]"

		# Primary Parameters
		self.LHlow_Value = "0"
		self.LHlow_Notes = "Hot Side H.T.Area Min. Level[m]"

		# Primary Parameters
		self.yH0_Value = "(31)"
		self.yH0_Notes = "Hot Vapor Initial Composition[mol/mol]"

		# Primary Parameters List Value
		self.yH0_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])
		# Primary Parameters
		self.sep_lv_Value = "1"
		self.sep_lv_Notes = "Condensate Separation Flag(0:No,1:Yes)"

		# Primary Parameters
		self.Ce_Value = "10"
		self.Ce_Notes = "Evaporation Rate Parameter[1/h]"

		# Primary Parameters
		self.LHmin_Value = "0"
		self.LHmin_Notes = "Min. Condensate Level for Discharge[m]"

		# Primary Parameters
		self.uH_Value = "(31)"
		self.uH_Notes = "Condensate. Comp. Holdup[kmol]"

		# Primary Parameters List Value
		self.uH_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.UHl_Value = "120"
		self.UHl_Notes = "Subcool Heat Transfer Coef.[W/m2K]"

		# Primary Parameters
		self.AsH_Value = "1"
		self.AsH_Notes = "Hot Side Liquid Cross Sec.Area[m2]"

		# Primary Parameters
		self.UL_Value = "1600"
		self.UL_Notes = "Cold Side H.Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.WLdes_Value = "90000"
		self.WLdes_Notes = "Cold Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DLdes_Value = "1000"
		self.DLdes_Notes = "Cold Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdLdes_Value = "35"
		self.PdLdes_Notes = "Cold Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.ULalp_Value = "0"
		self.ULalp_Notes = "Cold Side H.T.Coef. Flow Factor"

		# Primary Parameters
		self.tlagL_Value = "0"
		self.tlagL_Notes = "C. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.s1_Value = "5"
		self.s1_Notes = "System No.: Hot Side"

		# Primary Parameters
		self.s2_Value = "2"
		self.s2_Notes = "System No.: Cold Side"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.LHSt_Value = "0.5"
		self.LHSt_Notes = "Condensate Level Start Value[m]"

		# Primary Parameters
		self.PHSt_Value = "101.325"
		self.PHSt_Notes = "Hot Side Pressure Start Value[kPa]"

		# Primary Parameters
		self.THSt_Value = "25"
		self.THSt_Notes = "Hot Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.TLSt_Value = "25"
		self.TLSt_Notes = "Cold Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Non-condensate Gas Comp. Start Value"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Condensate Composition Start Value"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.PdH_Value = "10"
		self.PdH_Notes = "Hot Side Pressure Drop[kPa]"

		# Primary Parameters
		self.PdL_Value = "10"
		self.PdL_Notes = "Cold Side Pressure Drop[kPa]"

		# Primary Parameters
		self.rRv_Value = "0.3"
		self.rRv_Notes = "Ratio of Non-condensate[-]"

		# Primary Parameters
		self.rInert_Value = "0"
		self.rInert_Notes = "Heat Transfer Decrease by Inert Gas[-]"

		# Primary Parameters
		self.yInert_Value = "(31)"
		self.yInert_Notes = "Composition of Inert Gas"

		# Primary Parameters List Value
		self.yInert_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.freeLH_Value = "0"
		self.freeLH_Notes = "Set Hot Side Level Free(1:Free)"

class Block_K2911E2:
	def __init__(self):
		self.ID = 990
		self.Name = "K2911E2"
		self.Model = "HXMULTI"
		self.Notes = "Multi-fluid Heat Exchanger"

		# General Parameters
		self._NB_Value = "10"
		self._NB_Notes = "Number of segments"

		# Primary Parameters
		self.dirF_Value = "(6)"
		self.dirF_Notes = "Flow Direction(0:Normal,1:Reverse Flow)"

		# Primary Parameters List Value
		self.dirF_List_Value = array([1., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.A_Value = "(6)"
		self.A_Notes = "Heat Transfer Area[m2]"

		# Primary Parameters List Value
		self.A_List_Value = array([120., 100., 100., 100., 120., 120.])
		# Primary Parameters
		self.Gw_Value = "9999"
		self.Gw_Notes = "Heat Transfer Wall Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "H.Trans. Wall Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aair_Value = "0"
		self.Aair_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uair_Value = "6"
		self.Uair_Notes = "Heat Trans. Coef. for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Tw_Value = "(10)"
		self.Tw_Notes = "Heat Transfer Wall Temp.[C]"

		# Primary Parameters List Value
		self.Tw_List_Value = array([30., 30., 30., 30., 30., 30., 30., 30., 30., 30.])
		# Primary Parameters
		self.U_Value = "(6)"
		self.U_Notes = "Heat Transfer Coef.[W/m2K]"

		# Primary Parameters List Value
		self.U_List_Value = array([1000.,  600.,  600.,  600., 1000., 1000.])
		# Primary Parameters
		self.Ualp_Value = "(6)"
		self.Ualp_Notes = "Heat Transf. Coef. Flow Coef.[-]"

		# Primary Parameters List Value
		self.Ualp_List_Value = array([0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.tlag_Value = "(6)"
		self.tlag_Notes = "Fluid Lag Time [s]"

		# Primary Parameters List Value
		self.tlag_List_Value = array([0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Wdes_Value = "(6)"
		self.Wdes_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters List Value
		self.Wdes_List_Value = array([72500., 40000., 40000., 40000., 40000., 40000.])
		# Primary Parameters
		self.Ddes_Value = "(6)"
		self.Ddes_Notes = "Design Density[kg/m3]"

		# Primary Parameters List Value
		self.Ddes_List_Value = array([1000., 1000., 1000., 1000.,   10.,   10.])
		# Primary Parameters
		self.Pddes1_Value = "10"
		self.Pddes1_Notes = "Design Pressure Drop of Fluid 1 [kPa]"

		# Primary Parameters
		self.Pddes2_Value = "10"
		self.Pddes2_Notes = "Design Pressure Drop of Fluid 2 [kPa]"

		# Primary Parameters
		self.Pddes3_Value = "10"
		self.Pddes3_Notes = "Design Pressure Drop of Fluid 3 [kPa]"

		# Primary Parameters
		self.Pddes4_Value = "10"
		self.Pddes4_Notes = "Design Pressure Drop of Fluid 4 [kPa]"

		# Primary Parameters
		self.Pddes5_Value = "10"
		self.Pddes5_Notes = "Design Pressure Drop of Fluid 5 [kPa]"

		# Primary Parameters
		self.Pddes6_Value = "10"
		self.Pddes6_Notes = "Design Pressure Drop of Fluid 6 [kPa]"

		# Primary Parameters
		self.sys_Value = "(6)"
		self.sys_Notes = "System No."

		# Primary Parameters List Value
		self.sys_List_Value = array([4., 5., 5., 5., 5., 5.])
		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.TSt1_Value = "25"
		self.TSt1_Notes = "Outlet Temperature of Fluid 1 [C]"

		# Primary Parameters
		self.TSt2_Value = "25"
		self.TSt2_Notes = "Outlet Temperature of Fluid 2 [C]"

		# Primary Parameters
		self.TSt3_Value = "25"
		self.TSt3_Notes = "Outlet Temperature of Fluid 3 [C]"

		# Primary Parameters
		self.TSt4_Value = "25"
		self.TSt4_Notes = "Outlet Temperature of Fluid 4 [C]"

		# Primary Parameters
		self.TSt5_Value = "25"
		self.TSt5_Notes = "Outlet Temperature of Fluid 5 [C]"

		# Primary Parameters
		self.TSt6_Value = "25"
		self.TSt6_Notes = "Outlet Temperature of Fluid 6 [C]"

		# Primary Parameters
		self.Pd1_Value = "10"
		self.Pd1_Notes = "Pressure Drop of Fluid 1 [kPa]"

		# Primary Parameters
		self.Pd2_Value = "10"
		self.Pd2_Notes = "Pressure Drop of Fluid 2 [kPa]"

		# Primary Parameters
		self.Pd3_Value = "10"
		self.Pd3_Notes = "Pressure Drop of Fluid 3 [kPa]"

		# Primary Parameters
		self.Pd4_Value = "10"
		self.Pd4_Notes = "Pressure Drop of Fluid 4 [kPa]"

		# Primary Parameters
		self.Pd5_Value = "10"
		self.Pd5_Notes = "Pressure Drop of Fluid 5 [kPa]"

		# Primary Parameters
		self.Pd6_Value = "10"
		self.Pd6_Notes = "Pressure Drop of Fluid 6 [kPa]"

class Block_K2911E3A:
	def __init__(self):
		self.ID = 991
		self.Name = "K2911E3A"
		self.Model = "HEATXB"
		self.Notes = "General-Purpose Heat Exchanger"

		# General Parameters
		self._NB_Value = "10"
		self._NB_Notes = "Number of segments"

		# Primary Parameters
		self.TYPE_Value = "1"
		self.TYPE_Notes = "0: Cocurrent 1:Countercurrent"

		# Primary Parameters
		self.A_Value = "100"
		self.A_Notes = "Heat Transfer Area[m2]"

		# Primary Parameters
		self.Gw_Value = "99999"
		self.Gw_Notes = "Heat Transfer Wall Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "H.Trans. Wall Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aair_Value = "0"
		self.Aair_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uair_Value = "6"
		self.Uair_Notes = "Heat Trans. Coef. for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Tw_Value = "(10)"
		self.Tw_Notes = "Heat Transfer Wall Temp.[C]"

		# Primary Parameters List Value
		self.Tw_List_Value = array([25., 25., 25., 25., 25., 25., 25., 25., 25., 25.])
		# Primary Parameters
		self.UH_Value = "600"
		self.UH_Notes = "Hot Side Heat Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.UHalp_Value = "0"
		self.UHalp_Notes = "Flow Exponent for Hot Side H.T. Coef.[-]"

		# Primary Parameters
		self.tlagH_Value = "0"
		self.tlagH_Notes = "H. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WHdes_Value = "40000"
		self.WHdes_Notes = "Hot Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DHdes_Value = "600"
		self.DHdes_Notes = "Hot Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdHdes_Value = "2"
		self.PdHdes_Notes = "Hot Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.UL_Value = "800"
		self.UL_Notes = "Cold Side H.Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.ULalp_Value = "0"
		self.ULalp_Notes = "Cold Side H.T.Coef. Flow Factor"

		# Primary Parameters
		self.tlagL_Value = "0"
		self.tlagL_Notes = "C. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WLdes_Value = "40000"
		self.WLdes_Notes = "Cold Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DLdes_Value = "40"
		self.DLdes_Notes = "Cold Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdLdes_Value = "5"
		self.PdLdes_Notes = "Cold Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.s1_Value = "5"
		self.s1_Notes = "System No.: Hot Side"

		# Primary Parameters
		self.s2_Value = "5"
		self.s2_Notes = "System No.: Cold Side"

		# Primary Parameters
		self.THSt_Value = "25"
		self.THSt_Notes = "Hot Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.TLSt_Value = "25"
		self.TLSt_Notes = "Cold Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.PdH_Value = "10"
		self.PdH_Notes = "Hot Side Pressure Drop[kPa]"

		# Primary Parameters
		self.PdL_Value = "10"
		self.PdL_Notes = "Cold Side Pressure Drop[kPa]"

class Block_K2911E4:
	def __init__(self):
		self.ID = 992
		self.Name = "K2911E4"
		self.Model = "HEATXB"
		self.Notes = "General-Purpose Heat Exchanger"

		# General Parameters
		self._NB_Value = "5"
		self._NB_Notes = "Number of segments"

		# Primary Parameters
		self.TYPE_Value = "1"
		self.TYPE_Notes = "0: Cocurrent 1:Countercurrent"

		# Primary Parameters
		self.A_Value = "100"
		self.A_Notes = "Heat Transfer Area[m2]"

		# Primary Parameters
		self.Gw_Value = "9999"
		self.Gw_Notes = "Heat Transfer Wall Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "H.Trans. Wall Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aair_Value = "0"
		self.Aair_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uair_Value = "6"
		self.Uair_Notes = "Heat Trans. Coef. for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Tw_Value = "(5)"
		self.Tw_Notes = "Heat Transfer Wall Temp.[C]"

		# Primary Parameters List Value
		self.Tw_List_Value = array([30., 30., 30., 30., 30.])
		# Primary Parameters
		self.UH_Value = "1600"
		self.UH_Notes = "Hot Side Heat Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.UHalp_Value = "0"
		self.UHalp_Notes = "Flow Exponent for Hot Side H.T. Coef.[-]"

		# Primary Parameters
		self.tlagH_Value = "0"
		self.tlagH_Notes = "H. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WHdes_Value = "45180"
		self.WHdes_Notes = "Hot Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DHdes_Value = "793"
		self.DHdes_Notes = "Hot Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdHdes_Value = "100"
		self.PdHdes_Notes = "Hot Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.UL_Value = "1600"
		self.UL_Notes = "Cold Side H.Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.ULalp_Value = "0"
		self.ULalp_Notes = "Cold Side H.T.Coef. Flow Factor"

		# Primary Parameters
		self.tlagL_Value = "0"
		self.tlagL_Notes = "C. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WLdes_Value = "9000"
		self.WLdes_Notes = "Cold Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DLdes_Value = "1000"
		self.DLdes_Notes = "Cold Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdLdes_Value = "2"
		self.PdLdes_Notes = "Cold Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.s1_Value = "5"
		self.s1_Notes = "System No.: Hot Side"

		# Primary Parameters
		self.s2_Value = "2"
		self.s2_Notes = "System No.: Cold Side"

		# Primary Parameters
		self.THSt_Value = "25"
		self.THSt_Notes = "Hot Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.TLSt_Value = "25"
		self.TLSt_Notes = "Cold Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.PdH_Value = "10"
		self.PdH_Notes = "Hot Side Pressure Drop[kPa]"

		# Primary Parameters
		self.PdL_Value = "10"
		self.PdL_Notes = "Cold Side Pressure Drop[kPa]"

class Block_K2911FO1:
	def __init__(self):
		self.ID = 993
		self.Name = "K2911FO1"
		self.Model = "ORIFICE"
		self.Notes = "Restriction Orifice"

		# Primary Parameters
		self.Wd_Value = "30"
		self.Wd_Notes = "Design Flow Rate[kg/h]"

		# Primary Parameters
		self.dd_Value = "753"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.DP_Value = "50"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "5"
		self.s1_Notes = "System No."

class Block_K2911K:
	def __init__(self):
		self.ID = 994
		self.Name = "K2911K"
		self.Model = "COMP_RC"
		self.Notes = "Reciprocating Compressor"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.etype_Value = "1"
		self.etype_Notes = "Type 1:Adiabatic 2:Polytropic"

		# Primary Parameters
		self.Pmax_Value = "1866.52"
		self.Pmax_Notes = "Max. Pressure[kPa]"

		# Primary Parameters
		self.Qd_Value = "20"
		self.Qd_Notes = "Design Suction Flow[m3/min]"

		# Primary Parameters
		self.et_Value = "80"
		self.et_Notes = "Efficiency[%]"

		# Primary Parameters
		self.kap_Value = "1.15"
		self.kap_Notes = "Specific Heat Ratio[-]"

		# Primary Parameters
		self.calckap_Value = "1"
		self.calckap_Notes = "Specific Heat Ratio Type(0:Const 1:Calc)"

		# Primary Parameters
		self.W0_Value = "0"
		self.W0_Notes = "Power at No Load[kW]"

		# Primary Parameters
		self.Pmin_Value = "0.98"
		self.Pmin_Notes = "Min. Suction Pressure[kPa]"

		# Primary Parameters
		self.tstart_Value = "5"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "5"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.stopfl_Value = "1"
		self.stopfl_Notes = "Flow when Stopped(0:No,1:Yes)"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.chkfail_Value = "0"
		self.chkfail_Notes = "Check Valve Fail Flag(0:Normal,1:Fail)"

		# Primary Parameters
		self.anneald_Value = "0"
		self.anneald_Notes = "Density Relaxation(0:N,1:Y)"

		# Primary Parameters
		self.uratio_Value = "10"
		self.uratio_Notes = "Ratio for Density Relaxation[-]"

		# Primary Parameters
		self.udelay_Value = "10"
		self.udelay_Notes = "Delay Factor for Density Relaxation[-]"

		# Primary Parameters
		self.QSt_Value = "0"
		self.QSt_Notes = "Volume Flow Rate Start Value[m3/min]"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Outlet Temperature Start Value[C]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "5"
		self.s1_Notes = "System No."

class Block_K2911P1:
	def __init__(self):
		self.ID = 995
		self.Name = "K2911P1"
		self.Model = "PUMP_RC"
		self.Notes = "Pump with Check Valve"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.tmove_Value = "5"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.Pd_Value = "1074.26"
		self.Pd_Notes = "Design Discharge Pressure[kPa]"

		# Primary Parameters
		self.Vd_Value = "30"
		self.Vd_Notes = "Design Flow Rate[m3/h]"

		# Primary Parameters
		self.Wd_Value = "29"
		self.Wd_Notes = "Design Power[kW]"

		# Primary Parameters
		self.Vs_Value = "66"
		self.Vs_Notes = "Flow Rate at Zero Pressure[m3/h]"

		# Primary Parameters
		self.Ws_Value = "0.1"
		self.Ws_Notes = "Power at Zero Pressure[kW]"

		# Primary Parameters
		self.Pmax_Value = "1500"
		self.Pmax_Notes = "Max. Discharge Pressure[kPa]"

		# Primary Parameters
		self.tstart_Value = "2"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "2"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.dd_Value = "1000"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.stopfl_Value = "0"
		self.stopfl_Notes = "Flow when Stopped(0:No,1:Yes)"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.chkfail_Value = "0"
		self.chkfail_Notes = "Check Valve Fail Flag(0:Normal,1:Fail)"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Stroke Start Value[-]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "5"
		self.s1_Notes = "System No."

class Block_K2911ZS1:
	def __init__(self):
		self.ID = 996
		self.Name = "K2911ZS1"
		self.Model = "STRAINS"
		self.Notes = "Gas Filter"

		# Primary Parameters
		self.Wd_Value = "45180"
		self.Wd_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters
		self.DP_Value = "100"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.dd_Value = "793"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.md_Value = "0"
		self.md_Notes = "Design Viscosity[Pas]"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "5"
		self.s1_Notes = "System No."

class Block_KM2201A:
	def __init__(self):
		self.ID = 997
		self.Name = "KM2201A"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_KM2201B:
	def __init__(self):
		self.ID = 998
		self.Name = "KM2201B"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_KM2203:
	def __init__(self):
		self.ID = 999
		self.Name = "KM2203"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_KM2203P1A:
	def __init__(self):
		self.ID = 1000
		self.Name = "KM2203P1A"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_KM2203P1B:
	def __init__(self):
		self.ID = 1001
		self.Name = "KM2203P1B"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_KM22061:
	def __init__(self):
		self.ID = 1002
		self.Name = "KM22061"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_KM2208:
	def __init__(self):
		self.ID = 1003
		self.Name = "KM2208"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_KM2210A:
	def __init__(self):
		self.ID = 1004
		self.Name = "KM2210A"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_KM2210B:
	def __init__(self):
		self.ID = 1005
		self.Name = "KM2210B"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_KM2501A:
	def __init__(self):
		self.ID = 1006
		self.Name = "KM2501A"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_KM2501B:
	def __init__(self):
		self.ID = 1007
		self.Name = "KM2501B"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_KM2505:
	def __init__(self):
		self.ID = 1008
		self.Name = "KM2505"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_KM2901:
	def __init__(self):
		self.ID = 1009
		self.Name = "KM2901"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_KM2911K:
	def __init__(self):
		self.ID = 1010
		self.Name = "KM2911K"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_KM2911P1:
	def __init__(self):
		self.ID = 1011
		self.Name = "KM2911P1"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "0"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_LC2001:
	def __init__(self):
		self.ID = 1012
		self.Name = "LC2001"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "30"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "90"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([100.,   0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "0"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_LC2211:
	def __init__(self):
		self.ID = 1013
		self.Name = "LC2211"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "30"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "100"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([100.,   0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "0"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_LC2230:
	def __init__(self):
		self.ID = 1014
		self.Name = "LC2230"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "30"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "100"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([100.,   0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "0"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "1"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_LC2280:
	def __init__(self):
		self.ID = 1015
		self.Name = "LC2280"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "20"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "70"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([100.,   0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_LC2283:
	def __init__(self):
		self.ID = 1016
		self.Name = "LC2283"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "20"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "90"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([100.,   0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_LC2292:
	def __init__(self):
		self.ID = 1017
		self.Name = "LC2292"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "20"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "70"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([100.,   0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_LC2320:
	def __init__(self):
		self.ID = 1018
		self.Name = "LC2320"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "30"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "90"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([100.,   0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "0"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_LC2931:
	def __init__(self):
		self.ID = 1019
		self.Name = "LC2931"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "20"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "90"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([100.,   0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "0"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_LC2932:
	def __init__(self):
		self.ID = 1020
		self.Name = "LC2932"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "20"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "90"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([100.,   0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "0"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_LC2945:
	def __init__(self):
		self.ID = 1021
		self.Name = "LC2945"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "30"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "90"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([100.,   0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_LC2951:
	def __init__(self):
		self.ID = 1022
		self.Name = "LC2951"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "30"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "50"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([100.,   0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "0"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_LG2003A:
	def __init__(self):
		self.ID = 1023
		self.Name = "LG2003A"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "0.15"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LG2003B:
	def __init__(self):
		self.ID = 1024
		self.Name = "LG2003B"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0.1"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "0.25"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LG2004A:
	def __init__(self):
		self.ID = 1025
		self.Name = "LG2004A"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "0.15"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LG2004B:
	def __init__(self):
		self.ID = 1026
		self.Name = "LG2004B"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "0.15"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LG2005:
	def __init__(self):
		self.ID = 1027
		self.Name = "LG2005"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "0.15"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LG2104:
	def __init__(self):
		self.ID = 1028
		self.Name = "LG2104"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "1.255"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LG2105:
	def __init__(self):
		self.ID = 1029
		self.Name = "LG2105"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "1.075"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LG2107:
	def __init__(self):
		self.ID = 1030
		self.Name = "LG2107"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "1.37"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LG2109:
	def __init__(self):
		self.ID = 1031
		self.Name = "LG2109"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "1.37"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LG2160:
	def __init__(self):
		self.ID = 1032
		self.Name = "LG2160"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "0.7"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LG2261:
	def __init__(self):
		self.ID = 1033
		self.Name = "LG2261"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "0.45"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LG29111:
	def __init__(self):
		self.ID = 1034
		self.Name = "LG29111"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "1.275"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "2.35"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LG29112:
	def __init__(self):
		self.ID = 1035
		self.Name = "LG29112"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0.51"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "1.585"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LG29113:
	def __init__(self):
		self.ID = 1036
		self.Name = "LG29113"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "0.82"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LG29211:
	def __init__(self):
		self.ID = 1037
		self.Name = "LG29211"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0.49"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "1.75"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LG29212:
	def __init__(self):
		self.ID = 1038
		self.Name = "LG29212"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "0.755"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LG29221:
	def __init__(self):
		self.ID = 1039
		self.Name = "LG29221"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "1.26"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "1.9"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LG29222:
	def __init__(self):
		self.ID = 1040
		self.Name = "LG29222"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0.15"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "1.52"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LG29231:
	def __init__(self):
		self.ID = 1041
		self.Name = "LG29231"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "1.26"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "2.63"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LG29232:
	def __init__(self):
		self.ID = 1042
		self.Name = "LG29232"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0.15"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "1.52"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LG2931:
	def __init__(self):
		self.ID = 1043
		self.Name = "LG2931"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0.15"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "1.05"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LG2932:
	def __init__(self):
		self.ID = 1044
		self.Name = "LG2932"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0.15"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "1.05"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LG29411:
	def __init__(self):
		self.ID = 1045
		self.Name = "LG29411"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "1.075"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LG29412:
	def __init__(self):
		self.ID = 1046
		self.Name = "LG29412"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "0.9"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LG2942:
	def __init__(self):
		self.ID = 1047
		self.Name = "LG2942"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0.15"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "1.05"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LGD1:
	def __init__(self):
		self.ID = 1048
		self.Name = "LGD1"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "0.5"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LGE1:
	def __init__(self):
		self.ID = 1049
		self.Name = "LGE1"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "0.55"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LS2260:
	def __init__(self):
		self.ID = 1050
		self.Name = "LS2260"
		self.Model = "LIMSW"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.X0_Value = "0.569"
		self.X0_Notes = "x0"

		# Primary Parameters
		self.X1_Value = "0.57"
		self.X1_Notes = "x1"

		# Primary Parameters
		self.rev_Value = "0"
		self.rev_Notes = "Reverse Switch(0:Normal,1:Reverse)"

		# Primary Parameters
		self.yfail_Value = "0"
		self.yfail_Notes = "Output on Failure"

class Block_LS2261:
	def __init__(self):
		self.ID = 1051
		self.Name = "LS2261"
		self.Model = "LIMSW"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.X0_Value = "0.299"
		self.X0_Notes = "x0"

		# Primary Parameters
		self.X1_Value = "0.3"
		self.X1_Notes = "x1"

		# Primary Parameters
		self.rev_Value = "0"
		self.rev_Notes = "Reverse Switch(0:Normal,1:Reverse)"

		# Primary Parameters
		self.yfail_Value = "0"
		self.yfail_Notes = "Output on Failure"

class Block_LS2262:
	def __init__(self):
		self.ID = 1052
		self.Name = "LS2262"
		self.Model = "LIMSW"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.X0_Value = "0.499"
		self.X0_Notes = "x0"

		# Primary Parameters
		self.X1_Value = "0.5"
		self.X1_Notes = "x1"

		# Primary Parameters
		self.rev_Value = "0"
		self.rev_Notes = "Reverse Switch(0:Normal,1:Reverse)"

		# Primary Parameters
		self.yfail_Value = "0"
		self.yfail_Notes = "Output on Failure"

class Block_LS2282:
	def __init__(self):
		self.ID = 1053
		self.Name = "LS2282"
		self.Model = "LIMSW"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.X0_Value = "1.499"
		self.X0_Notes = "x0"

		# Primary Parameters
		self.X1_Value = "1.5"
		self.X1_Notes = "x1"

		# Primary Parameters
		self.rev_Value = "0"
		self.rev_Notes = "Reverse Switch(0:Normal,1:Reverse)"

		# Primary Parameters
		self.yfail_Value = "0"
		self.yfail_Notes = "Output on Failure"

class Block_LS25511:
	def __init__(self):
		self.ID = 1054
		self.Name = "LS25511"
		self.Model = "LIMSW"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.X0_Value = "0.419"
		self.X0_Notes = "x0"

		# Primary Parameters
		self.X1_Value = "0.42"
		self.X1_Notes = "x1"

		# Primary Parameters
		self.rev_Value = "0"
		self.rev_Notes = "Reverse Switch(0:Normal,1:Reverse)"

		# Primary Parameters
		self.yfail_Value = "0"
		self.yfail_Notes = "Output on Failure"

class Block_LS25512:
	def __init__(self):
		self.ID = 1055
		self.Name = "LS25512"
		self.Model = "LIMSW"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.X0_Value = "0.419"
		self.X0_Notes = "x0"

		# Primary Parameters
		self.X1_Value = "0.42"
		self.X1_Notes = "x1"

		# Primary Parameters
		self.rev_Value = "0"
		self.rev_Notes = "Reverse Switch(0:Normal,1:Reverse)"

		# Primary Parameters
		self.yfail_Value = "0"
		self.yfail_Notes = "Output on Failure"

class Block_LS25513:
	def __init__(self):
		self.ID = 1056
		self.Name = "LS25513"
		self.Model = "LIMSW"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.X0_Value = "0.419"
		self.X0_Notes = "x0"

		# Primary Parameters
		self.X1_Value = "0.42"
		self.X1_Notes = "x1"

		# Primary Parameters
		self.rev_Value = "0"
		self.rev_Notes = "Reverse Switch(0:Normal,1:Reverse)"

		# Primary Parameters
		self.yfail_Value = "0"
		self.yfail_Notes = "Output on Failure"

class Block_LS2552:
	def __init__(self):
		self.ID = 1057
		self.Name = "LS2552"
		self.Model = "LIMSW"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.X0_Value = "2.429"
		self.X0_Notes = "x0"

		# Primary Parameters
		self.X1_Value = "2.43"
		self.X1_Notes = "x1"

		# Primary Parameters
		self.rev_Value = "0"
		self.rev_Notes = "Reverse Switch(0:Normal,1:Reverse)"

		# Primary Parameters
		self.yfail_Value = "0"
		self.yfail_Notes = "Output on Failure"

class Block_LS2558:
	def __init__(self):
		self.ID = 1058
		self.Name = "LS2558"
		self.Model = "LIMSW"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.X0_Value = "9.99"
		self.X0_Notes = "x0"

		# Primary Parameters
		self.X1_Value = "10"
		self.X1_Notes = "x1"

		# Primary Parameters
		self.rev_Value = "0"
		self.rev_Notes = "Reverse Switch(0:Normal,1:Reverse)"

		# Primary Parameters
		self.yfail_Value = "0"
		self.yfail_Notes = "Output on Failure"

class Block_LS2931H:
	def __init__(self):
		self.ID = 1059
		self.Name = "LS2931H"
		self.Model = "LIMSW"
		self.Notes = "Limit Switch"

		# Primary Parameters
		self.X0_Value = "0.699"
		self.X0_Notes = "x0"

		# Primary Parameters
		self.X1_Value = "0.7"
		self.X1_Notes = "x1"

		# Primary Parameters
		self.rev_Value = "0"
		self.rev_Notes = "Reverse Switch(0:Normal,1:Reverse)"

		# Primary Parameters
		self.yfail_Value = "0"
		self.yfail_Notes = "Output on Failure"

class Block_LS2931L:
	def __init__(self):
		self.ID = 1060
		self.Name = "LS2931L"
		self.Model = "LIMSW"
		self.Notes = "Limit Switch"

		# Primary Parameters
		self.X0_Value = "0.099"
		self.X0_Notes = "x0"

		# Primary Parameters
		self.X1_Value = "0.1"
		self.X1_Notes = "x1"

		# Primary Parameters
		self.rev_Value = "0"
		self.rev_Notes = "Reverse Switch(0:Normal,1:Reverse)"

		# Primary Parameters
		self.yfail_Value = "0"
		self.yfail_Notes = "Output on Failure"

class Block_LSW2211:
	def __init__(self):
		self.ID = 1061
		self.Name = "LSW2211"
		self.Model = "SIGNBR2"
		self.Notes = "Signal Split(1-input/2-output)"

		# Primary Parameters
		self.SWITCH_Value = "0"
		self.SWITCH_Notes = "0=signal branch, 1-2=switch"

		# Primary Parameters
		self.MVTRK_Value = "1"
		self.MVTRK_Notes = "Output Tracking Point(1-2)"

		# Primary Parameters
		self.PVSPAN1_Value = "(2)"
		self.PVSPAN1_Notes = "Input 1 Span/Base"

		# Primary Parameters List Value
		self.PVSPAN1_List_Value = array([1., 0.])
		# Primary Parameters
		self.MVSPAN_Value = "1"
		self.MVSPAN_Notes = "MV Span"

class Block_LT2001:
	def __init__(self):
		self.ID = 1062
		self.Name = "LT2001"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "1.8"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LT2002:
	def __init__(self):
		self.ID = 1063
		self.Name = "LT2002"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "2.5"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LT2110:
	def __init__(self):
		self.ID = 1064
		self.Name = "LT2110"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "1.83"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LT2120:
	def __init__(self):
		self.ID = 1065
		self.Name = "LT2120"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "2.8"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LT2140:
	def __init__(self):
		self.ID = 1066
		self.Name = "LT2140"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0.15"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "2.9"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LT2150:
	def __init__(self):
		self.ID = 1067
		self.Name = "LT2150"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "0.85"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LT2160:
	def __init__(self):
		self.ID = 1068
		self.Name = "LT2160"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "0.7"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LT2170:
	def __init__(self):
		self.ID = 1069
		self.Name = "LT2170"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0.15"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "4.7"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LT2180:
	def __init__(self):
		self.ID = 1070
		self.Name = "LT2180"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "2.35"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "3.2"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LT2181:
	def __init__(self):
		self.ID = 1071
		self.Name = "LT2181"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "1.56"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "4.5"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LT2190:
	def __init__(self):
		self.ID = 1072
		self.Name = "LT2190"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0.15"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "4.7"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LT2210:
	def __init__(self):
		self.ID = 1073
		self.Name = "LT2210"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0.35"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "6.4"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LT2211:
	def __init__(self):
		self.ID = 1074
		self.Name = "LT2211"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "6.4"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LT2212:
	def __init__(self):
		self.ID = 1075
		self.Name = "LT2212"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "0.7"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LT2213:
	def __init__(self):
		self.ID = 1076
		self.Name = "LT2213"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "4.23"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "6.4"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LT2230:
	def __init__(self):
		self.ID = 1077
		self.Name = "LT2230"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "1.35"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "9.19"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LT2231:
	def __init__(self):
		self.ID = 1078
		self.Name = "LT2231"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "3.1"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "9.19"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LT2232:
	def __init__(self):
		self.ID = 1079
		self.Name = "LT2232"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0.515"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "9.19"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LT2263:
	def __init__(self):
		self.ID = 1080
		self.Name = "LT2263"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "0.3"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LT2264:
	def __init__(self):
		self.ID = 1081
		self.Name = "LT2264"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "0.3"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LT2280:
	def __init__(self):
		self.ID = 1082
		self.Name = "LT2280"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "3.5"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LT2281:
	def __init__(self):
		self.ID = 1083
		self.Name = "LT2281"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "0.2"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LT2283:
	def __init__(self):
		self.ID = 1084
		self.Name = "LT2283"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "2.9"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LT2292:
	def __init__(self):
		self.ID = 1085
		self.Name = "LT2292"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0.15"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "2.2"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LT2293:
	def __init__(self):
		self.ID = 1086
		self.Name = "LT2293"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "1.35"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "1.85"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LT23201:
	def __init__(self):
		self.ID = 1087
		self.Name = "LT23201"
		self.Model = "LIMSW"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.X0_Value = "1.39"
		self.X0_Notes = "x0"

		# Primary Parameters
		self.X1_Value = "1.4"
		self.X1_Notes = "x1"

		# Primary Parameters
		self.rev_Value = "0"
		self.rev_Notes = "Reverse Switch(0:Normal,1:Reverse)"

		# Primary Parameters
		self.yfail_Value = "0"
		self.yfail_Notes = "Output on Failure"

class Block_LT23202:
	def __init__(self):
		self.ID = 1088
		self.Name = "LT23202"
		self.Model = "LIMSW"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.X0_Value = "0.99"
		self.X0_Notes = "x0"

		# Primary Parameters
		self.X1_Value = "1"
		self.X1_Notes = "x1"

		# Primary Parameters
		self.rev_Value = "0"
		self.rev_Notes = "Reverse Switch(0:Normal,1:Reverse)"

		# Primary Parameters
		self.yfail_Value = "0"
		self.yfail_Notes = "Output on Failure"

class Block_LT23203:
	def __init__(self):
		self.ID = 1089
		self.Name = "LT23203"
		self.Model = "LIMSW"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.X0_Value = "0.59"
		self.X0_Notes = "x0"

		# Primary Parameters
		self.X1_Value = "0.6"
		self.X1_Notes = "x1"

		# Primary Parameters
		self.rev_Value = "0"
		self.rev_Notes = "Reverse Switch(0:Normal,1:Reverse)"

		# Primary Parameters
		self.yfail_Value = "0"
		self.yfail_Notes = "Output on Failure"

class Block_LT2511:
	def __init__(self):
		self.ID = 1090
		self.Name = "LT2511"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "1.45"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LT2559:
	def __init__(self):
		self.ID = 1091
		self.Name = "LT2559"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "10"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LT2901A:
	def __init__(self):
		self.ID = 1092
		self.Name = "LT2901A"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "1.7"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "5"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LT2901B:
	def __init__(self):
		self.ID = 1093
		self.Name = "LT2901B"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0.7"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "2"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LT2902:
	def __init__(self):
		self.ID = 1094
		self.Name = "LT2902"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "0.6"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LT2903:
	def __init__(self):
		self.ID = 1095
		self.Name = "LT2903"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "1.3"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LT2921:
	def __init__(self):
		self.ID = 1096
		self.Name = "LT2921"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "1.9"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LT2922:
	def __init__(self):
		self.ID = 1097
		self.Name = "LT2922"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "1.9"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LT2923:
	def __init__(self):
		self.ID = 1098
		self.Name = "LT2923"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "1.9"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LT2931:
	def __init__(self):
		self.ID = 1099
		self.Name = "LT2931"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0.15"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "0.85"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LT2932:
	def __init__(self):
		self.ID = 1100
		self.Name = "LT2932"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0.15"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "0.85"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LT2945:
	def __init__(self):
		self.ID = 1101
		self.Name = "LT2945"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0.15"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "0.85"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LT2951:
	def __init__(self):
		self.ID = 1102
		self.Name = "LT2951"
		self.Model = "TRANSLG"
		self.Notes = "Level Meter(General)"

		# Primary Parameters
		self.Ll_Value = "0"
		self.Ll_Notes = "Measurable Lower Limit Level[m]"

		# Primary Parameters
		self.Lh_Value = "2"
		self.Lh_Notes = "Measurable Upper Limit Level[m]"

		# Primary Parameters
		self.Lbase_Value = "0"
		self.Lbase_Notes = "Reference Liq. Level for Measurement[m]"

		# Primary Parameters
		self.unit_Value = "2"
		self.unit_Notes = "Unit of Indication(1:m,2:%,3:mm)"

		# Primary Parameters
		self.Lfail_Value = "0"
		self.Lfail_Notes = "Indicated Level on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value(in ind. unit)"

class Block_LU2001:
	def __init__(self):
		self.ID = 1103
		self.Name = "LU2001"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_LU22111:
	def __init__(self):
		self.ID = 1104
		self.Name = "LU22111"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_LU22112:
	def __init__(self):
		self.ID = 1105
		self.Name = "LU22112"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_LU2280:
	def __init__(self):
		self.ID = 1106
		self.Name = "LU2280"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_LU2283:
	def __init__(self):
		self.ID = 1107
		self.Name = "LU2283"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_LU2931:
	def __init__(self):
		self.ID = 1108
		self.Name = "LU2931"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_LU2932:
	def __init__(self):
		self.ID = 1109
		self.Name = "LU2932"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_LU2945:
	def __init__(self):
		self.ID = 1110
		self.Name = "LU2945"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_LU2951:
	def __init__(self):
		self.ID = 1111
		self.Name = "LU2951"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_LV2001:
	def __init__(self):
		self.ID = 1112
		self.Name = "LV2001"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "24"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "24"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "240"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "240"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_LV22111:
	def __init__(self):
		self.ID = 1113
		self.Name = "LV22111"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "105"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "105"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "1050"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "1050"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_LV22112:
	def __init__(self):
		self.ID = 1114
		self.Name = "LV22112"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "105"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "105"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "1050"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "1050"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_LV2280:
	def __init__(self):
		self.ID = 1115
		self.Name = "LV2280"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "17"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "17"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "170"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "170"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_LV2283:
	def __init__(self):
		self.ID = 1116
		self.Name = "LV2283"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "4"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "40"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "40"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_LV2931:
	def __init__(self):
		self.ID = 1117
		self.Name = "LV2931"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "4"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "40"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "40"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_LV2932:
	def __init__(self):
		self.ID = 1118
		self.Name = "LV2932"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "1"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "10"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "10"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_LV2945:
	def __init__(self):
		self.ID = 1119
		self.Name = "LV2945"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "1"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "10"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "10"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_LV2951:
	def __init__(self):
		self.ID = 1120
		self.Name = "LV2951"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "1"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "10"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "10"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_M2301:
	def __init__(self):
		self.ID = 1121
		self.Name = "M2301"
		self.Model = "HEATXG"
		self.Notes = "Evaporator (General-Purpose)"

		# General Parameters
		self._NB_Value = "5"
		self._NB_Notes = "Number of Segments for Hot Side(<=50)"

		# Primary Parameters
		self.A_Value = "60"
		self.A_Notes = "Heat Transfer Area[m2]"

		# Primary Parameters
		self.Gw_Value = "2000"
		self.Gw_Notes = "Heat Transfer Wall Weight[kg]"

		# Primary Parameters
		self.Tw_Value = "30"
		self.Tw_Notes = "Heat Transfer Wall Temp.[C]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "H.Trans. Wall Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aair_Value = "0"
		self.Aair_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uair_Value = "6"
		self.Uair_Notes = "Heat Trans. Coef. for Heat Loss[W/m2K]"

		# Primary Parameters
		self.UH_Value = "600"
		self.UH_Notes = "Hot Side Heat Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.WHdes_Value = "500"
		self.WHdes_Notes = "Hot Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DHdes_Value = "2.01"
		self.DHdes_Notes = "Hot Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdHdes_Value = "10"
		self.PdHdes_Notes = "Hot Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.UHalp_Value = "0"
		self.UHalp_Notes = "Flow Exponent for Hot Side H.T. Coef.[-]"

		# Primary Parameters
		self.tlagH_Value = "0"
		self.tlagH_Notes = "H. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.VL_Value = "10"
		self.VL_Notes = "Evaporator Vapor Volume[m3]"

		# Primary Parameters
		self.AsL_Value = "3"
		self.AsL_Notes = "Cold Side Evaporator C.S.Area[m2]"

		# Primary Parameters
		self.LLmin_Value = "0"
		self.LLmin_Notes = "Cold Side Min. Level for Liq. Dischg.[m]"

		# Primary Parameters
		self.LLhigh_Value = "2"
		self.LLhigh_Notes = "Cold Side 100% H.T.Area Holdup Height[m]"

		# Primary Parameters
		self.LLlow_Value = "0"
		self.LLlow_Notes = "Cold Side 0% H.T.Area Holdup Height[m]"

		# Primary Parameters
		self.ULv_Value = "60"
		self.ULv_Notes = "H.T.Coef. at Cold Side Vapor[W/m2K]"

		# Primary Parameters
		self.UL_Value = "1200"
		self.UL_Notes = "H.T.Coef. at Cold Side Liquid[W/m2K]"

		# Primary Parameters
		self.PL_Value = "101.325"
		self.PL_Notes = "Evaporator Pressure[kPa]"

		# Primary Parameters
		self.tau_Value = "0"
		self.tau_Notes = "Vapor Residence Time Constant[s]"

		# Primary Parameters
		self.uLl_Value = "(31)"
		self.uLl_Notes = "Cold Side Holdup[kmol]"

		# Primary Parameters List Value
		self.uLl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.yLv_Value = "(31)"
		self.yLv_Notes = "Evaporator Vapor Composition[mol/mol]"

		# Primary Parameters List Value
		self.yLv_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No.: Hot Side"

		# Primary Parameters
		self.s2_Value = "1"
		self.s2_Notes = "System No.: Cold Side"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.THSt_Value = "25"
		self.THSt_Notes = "Hot Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.TLSt_Value = "25"
		self.TLSt_Notes = "Cold Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.PLSt_Value = "101.325"
		self.PLSt_Notes = "Cold Side Pressure Start Value[kPa]"

		# Primary Parameters
		self.LLSt_Value = "0.5"
		self.LLSt_Notes = "Cold Side Liquid Level Start Value[m]"

		# Primary Parameters
		self.yLvSt_Value = "(31)"
		self.yLvSt_Notes = "Cold Side Vapor Comp. Start Value"

		# Primary Parameters List Value
		self.yLvSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xLlSt_Value = "(31)"
		self.xLlSt_Notes = "Cold Side Liquid Comp. Start Value"

		# Primary Parameters List Value
		self.xLlSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.PdH_Value = "10"
		self.PdH_Notes = "Hot Side Pressure Drop[kPa]"

		# Primary Parameters
		self.freeLL_Value = "0"
		self.freeLL_Notes = "Set Cold Side Level Free(1:Free)"

class Block_M2301A:
	def __init__(self):
		self.ID = 1122
		self.Name = "M2301A"
		self.Model = "PIPEFLOW"
		self.Notes = "Pump with Stroke Control"

		# Primary Parameters
		self.Unit_Value = "2"
		self.Unit_Notes = "Unit 1:kmol/h 2:kg/h"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "Property System"

class Block_M2501:
	def __init__(self):
		self.ID = 1123
		self.Name = "M2501"
		self.Model = "STRAINS"
		self.Notes = "Strainer(Simple)"

		# Primary Parameters
		self.Wd_Value = "5700"
		self.Wd_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters
		self.DP_Value = "10"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.dd_Value = "500"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.md_Value = "0"
		self.md_Notes = "Design Viscosity[Pas]"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_MA2211:
	def __init__(self):
		self.ID = 1124
		self.Name = "MA2211"
		self.Model = "_CSEP_L"
		self.Notes = "Flash Drum"

		# Primary Parameters
		self.V_Value = "4.6"
		self.V_Notes = "Vessel Volume[m3]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Temperature[C]"

		# Primary Parameters
		self.rsep2_Value = "(31)"
		self.rsep2_Notes = "Removal Ratio[-]"

		# Primary Parameters List Value
		self.rsep2_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Holdup Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Valp_Value = "0"
		self.Valp_Notes = "Volume Correction Factor[-]"

		# Primary Parameters
		self.Fullop_Value = "0"
		self.Fullop_Notes = "Operation(0:Filling,1:Filled)"

		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.x1St_Value = "(31)"
		self.x1St_Notes = "Composition Start Value Prod.1[mol/mol]"

		# Primary Parameters List Value
		self.x1St_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.x2St_Value = "(31)"
		self.x2St_Notes = "Composition Start Value Prod.2[mol/mol]"

		# Primary Parameters List Value
		self.x2St_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_MA2211A:
	def __init__(self):
		self.ID = 1125
		self.Name = "MA2211A"
		self.Model = "_TANK_LAC"
		self.Notes = "Liquid Accumulator"

		# Primary Parameters
		self.V_Value = "1"
		self.V_Notes = "Maximum Capacity of Tank[m3]"

		# Primary Parameters
		self.Pmax_Value = "3500"
		self.Pmax_Notes = "Pressure at Maximum Capacity[kPa]"

		# Primary Parameters
		self.Pmin_Value = "100"
		self.Pmin_Notes = "Pressure at Minimum Capacity[kPa]"

		# Primary Parameters
		self.T_Value = "30"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.P_Value = "101.325"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Liquid Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_MA2211J:
	def __init__(self):
		self.ID = 1126
		self.Name = "MA2211J"
		self.Model = "HEATXB"
		self.Notes = "General-Purpose Heat Exchanger"

		# General Parameters
		self._NB_Value = "5"
		self._NB_Notes = "Number of segments"

		# Primary Parameters
		self.TYPE_Value = "1"
		self.TYPE_Notes = "0: Cocurrent 1:Countercurrent"

		# Primary Parameters
		self.A_Value = "10"
		self.A_Notes = "Heat Transfer Area[m2]"

		# Primary Parameters
		self.Gw_Value = "1000"
		self.Gw_Notes = "Heat Transfer Wall Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "H.Trans. Wall Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aair_Value = "0"
		self.Aair_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uair_Value = "6"
		self.Uair_Notes = "Heat Trans. Coef. for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Tw_Value = "(5)"
		self.Tw_Notes = "Heat Transfer Wall Temp.[C]"

		# Primary Parameters List Value
		self.Tw_List_Value = array([25., 25., 25., 25., 25.])
		# Primary Parameters
		self.UH_Value = "600"
		self.UH_Notes = "Hot Side Heat Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.UHalp_Value = "0"
		self.UHalp_Notes = "Flow Exponent for Hot Side H.T. Coef.[-]"

		# Primary Parameters
		self.tlagH_Value = "0"
		self.tlagH_Notes = "H. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WHdes_Value = "13500"
		self.WHdes_Notes = "Hot Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DHdes_Value = "482"
		self.DHdes_Notes = "Hot Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdHdes_Value = "0"
		self.PdHdes_Notes = "Hot Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.UL_Value = "600"
		self.UL_Notes = "Cold Side H.Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.ULalp_Value = "0"
		self.ULalp_Notes = "Cold Side H.T.Coef. Flow Factor"

		# Primary Parameters
		self.tlagL_Value = "0"
		self.tlagL_Notes = "C. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WLdes_Value = "10000"
		self.WLdes_Notes = "Cold Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DLdes_Value = "1000"
		self.DLdes_Notes = "Cold Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdLdes_Value = "10"
		self.PdLdes_Notes = "Cold Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No.: Hot Side"

		# Primary Parameters
		self.s2_Value = "1"
		self.s2_Notes = "System No.: Cold Side"

		# Primary Parameters
		self.THSt_Value = "25"
		self.THSt_Notes = "Hot Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.TLSt_Value = "25"
		self.TLSt_Notes = "Cold Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.PdH_Value = "10"
		self.PdH_Notes = "Hot Side Pressure Drop[kPa]"

		# Primary Parameters
		self.PdL_Value = "10"
		self.PdL_Notes = "Cold Side Pressure Drop[kPa]"

class Block_MA2302:
	def __init__(self):
		self.ID = 1127
		self.Name = "MA2302"
		self.Model = "_FLASHD"
		self.Notes = "Flash Drum"

		# General Parameters
		self._NZLHGT_Value = "0"
		self._NZLHGT_Notes = "Specify Nozzle Heights(0:N,1:Y)"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.y_Value = "(31)"
		self.y_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.y_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "2"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "1.7"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Gw_Value = "5300"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Uv_Value = "40"
		self.Uv_Notes = "Vapor Phase Heat Transfer Coef.[W/m2K]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Vv0_Value = "2"
		self.Vv0_Notes = "Volume of Connected Pipe[m3]"

		# Primary Parameters
		self.Rdis_Value = "0.05"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.kG_Value = "0.1"
		self.kG_Notes = "Mass Transfer Rate Coef.[kmol/m2kPah]"

		# Primary Parameters
		self.Fcons_Value = "1"
		self.Fcons_Notes = "Flow Constraints(1:Yes,0:No)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.1, 0.1, 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ])
		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_MA2302J:
	def __init__(self):
		self.ID = 1128
		self.Name = "MA2302J"
		self.Model = "_JACKET"
		self.Notes = "Jacket"

		# Primary Parameters
		self.H_Value = "1.53"
		self.H_Notes = "Length of Cylindrical Frame[m]"

		# Primary Parameters
		self.Aj_Value = "9.6"
		self.Aj_Notes = "Jacket Area[m2]"

		# Primary Parameters
		self.Ujv_Value = "1700"
		self.Ujv_Notes = "Jacket Condensation H. T. Coef.[W/m2K]"

		# Primary Parameters
		self.Ujl_Value = "600"
		self.Ujl_Notes = "Jkt L. Phase Design H. T. Coef.[W/m2K]"

		# Primary Parameters
		self.As1_Value = "0.212"
		self.As1_Notes = "Cross Section Area Cylindrical Frame[m2]"

		# Primary Parameters
		self.As2_Value = "1"
		self.As2_Notes = "Cross Section Area Bottom Head[m2]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.Hlow_Value = "0.05"
		self.Hlow_Notes = "Height of Jkt Undermirror Zone[m]"

		# Primary Parameters
		self.Ujlalp_Value = "0"
		self.Ujlalp_Notes = "Jkt L. Ph. H. T. Coef. Flow Factor[-]"

		# Primary Parameters
		self.Wdjl_Value = "600"
		self.Wdjl_Notes = "Jacket Liquid Design Flow Rate[kg/h]"

		# Primary Parameters
		self.Dpdjl_Value = "10"
		self.Dpdjl_Notes = "Jacket Design Pressure Drop[kPa]"

		# Primary Parameters
		self.Ddjl_Value = "900"
		self.Ddjl_Notes = "Jacket Design Liquid Density[kg/m3]"

		# Primary Parameters
		self.Tj_Value = "30"
		self.Tj_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.Pj_Value = "101.325"
		self.Pj_Notes = "Jacket Pressure[kPa]"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.cmodeSt_Value = "1"
		self.cmodeSt_Notes = "Operation Start Value(1-3)"

		# Primary Parameters
		self.dpj_Value = "10"
		self.dpj_Notes = "Jacket Pressure Drop[kPa]"

		# Primary Parameters
		self.LjSt_Value = "0.5"
		self.LjSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TjSt_Value = "25"
		self.TjSt_Notes = "Liquid Outlet Temperature Start Value[C]"

		# Primary Parameters
		self.PjSt_Value = "101.325"
		self.PjSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.xlSt_Value = "(31)"
		self.xlSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xlSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.freeLj_Value = "0"
		self.freeLj_Notes = "Set Hot Side Level Free(1:Free)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_MM2301:
	def __init__(self):
		self.ID = 1129
		self.Name = "MM2301"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_MM2302:
	def __init__(self):
		self.ID = 1130
		self.Name = "MM2302"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_MM2501:
	def __init__(self):
		self.ID = 1131
		self.Name = "MM2501"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_MS2206:
	def __init__(self):
		self.ID = 1132
		self.Name = "MS2206"
		self.Model = "FILTERS"
		self.Notes = "Gas Filter"

		# Primary Parameters
		self.Wd_Value = "10420"
		self.Wd_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters
		self.DP_Value = "0.981"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.dd_Value = "9.43"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.md_Value = "0"
		self.md_Notes = "Design Viscosity[Pas]"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_MS2303:
	def __init__(self):
		self.ID = 1133
		self.Name = "MS2303"
		self.Model = "_FLASHD"
		self.Notes = "Flash Drum"

		# General Parameters
		self._NZLHGT_Value = "0"
		self._NZLHGT_Notes = "Specify Nozzle Heights(0:N,1:Y)"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.y_Value = "(31)"
		self.y_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.y_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "0.5"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "1"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Gw_Value = "1000"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Uv_Value = "40"
		self.Uv_Notes = "Vapor Phase Heat Transfer Coef.[W/m2K]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Vv0_Value = "0"
		self.Vv0_Notes = "Volume of Connected Pipe[m3]"

		# Primary Parameters
		self.Rdis_Value = "0.05"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.kG_Value = "0.1"
		self.kG_Notes = "Mass Transfer Rate Coef.[kmol/m2kPah]"

		# Primary Parameters
		self.Fcons_Value = "1"
		self.Fcons_Notes = "Flow Constraints(1:Yes,0:No)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.1, 0.1, 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ])
		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_MS2303B:
	def __init__(self):
		self.ID = 1134
		self.Name = "MS2303B"
		self.Model = "FILTERS"
		self.Notes = "Gas Filter"

		# Primary Parameters
		self.Wd_Value = "350"
		self.Wd_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters
		self.DP_Value = "1"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.dd_Value = "0.98"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.md_Value = "0"
		self.md_Notes = "Design Viscosity[Pas]"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_MS2310:
	def __init__(self):
		self.ID = 1135
		self.Name = "MS2310"
		self.Model = "_FLASHD"
		self.Notes = "Flash Drum"

		# General Parameters
		self._NZLHGT_Value = "0"
		self._NZLHGT_Notes = "Specify Nozzle Heights(0:N,1:Y)"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.y_Value = "(31)"
		self.y_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.y_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "0.5"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "1"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Gw_Value = "1000"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Uv_Value = "40"
		self.Uv_Notes = "Vapor Phase Heat Transfer Coef.[W/m2K]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Vv0_Value = "0"
		self.Vv0_Notes = "Volume of Connected Pipe[m3]"

		# Primary Parameters
		self.Rdis_Value = "0.05"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.kG_Value = "0.1"
		self.kG_Notes = "Mass Transfer Rate Coef.[kmol/m2kPah]"

		# Primary Parameters
		self.Fcons_Value = "1"
		self.Fcons_Notes = "Flow Constraints(1:Yes,0:No)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.1, 0.1, 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ])
		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_MS2310B:
	def __init__(self):
		self.ID = 1136
		self.Name = "MS2310B"
		self.Model = "FILTERS"
		self.Notes = "Gas Filter"

		# Primary Parameters
		self.Wd_Value = "1000"
		self.Wd_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters
		self.DP_Value = "0.1"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.dd_Value = "1.32"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.md_Value = "0"
		self.md_Notes = "Design Viscosity[Pas]"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_MS2502:
	def __init__(self):
		self.ID = 1137
		self.Name = "MS2502"
		self.Model = "FILTERS"
		self.Notes = "Gas Filter"

		# Primary Parameters
		self.Wd_Value = "3500"
		self.Wd_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters
		self.DP_Value = "0.981"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.dd_Value = "1.11"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.md_Value = "0"
		self.md_Notes = "Design Viscosity[Pas]"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_MS2508:
	def __init__(self):
		self.ID = 1138
		self.Name = "MS2508"
		self.Model = "FILTERS"
		self.Notes = "Gas Filter"

		# Primary Parameters
		self.Wd_Value = "10"
		self.Wd_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters
		self.DP_Value = "0.4905"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.dd_Value = "10"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.md_Value = "0"
		self.md_Notes = "Design Viscosity[Pas]"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_MS2509:
	def __init__(self):
		self.ID = 1139
		self.Name = "MS2509"
		self.Model = "FILTERS"
		self.Notes = "Gas Filter"

		# Primary Parameters
		self.Wd_Value = "100"
		self.Wd_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters
		self.DP_Value = "10"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.dd_Value = "10"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.md_Value = "0"
		self.md_Notes = "Design Viscosity[Pas]"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_MS2511:
	def __init__(self):
		self.ID = 1140
		self.Name = "MS2511"
		self.Model = "FILTERS"
		self.Notes = "Gas Filter"

		# Primary Parameters
		self.Wd_Value = "100"
		self.Wd_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters
		self.DP_Value = "0.4905"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.dd_Value = "10"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.md_Value = "0"
		self.md_Notes = "Design Viscosity[Pas]"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_P2002A:
	def __init__(self):
		self.ID = 1141
		self.Name = "P2002A"
		self.Model = "PUMP_S_N"
		self.Notes = "Pump with Check Valve"

		# General Parameters
		self._NDT_Value = "0"
		self._NDT_Notes = "No. of Performance Curve Data Points"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.Vd_Value = "3"
		self.Vd_Notes = "Design Flow Rate[m3/h]"

		# Primary Parameters
		self.Hd_Value = "30"
		self.Hd_Notes = "Design Head[m]"

		# Primary Parameters
		self.Wd_Value = "3"
		self.Wd_Notes = "Design Power[kW]"

		# Primary Parameters
		self.Hs_Value = "33"
		self.Hs_Notes = "Head at Shutoff[m]"

		# Primary Parameters
		self.Ws_Value = "0.1"
		self.Ws_Notes = "Power at Shutoff[kW]"

		# Primary Parameters
		self.tstart_Value = "2"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "2"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.dd_Value = "442"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.qatm_Value = "12"
		self.qatm_Notes = "Heat Loss Coefficient[W/K]"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.chkfail_Value = "0"
		self.chkfail_Notes = "Check Valve Fail Flag(0:Normal,1:Fail)"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_P2002B:
	def __init__(self):
		self.ID = 1142
		self.Name = "P2002B"
		self.Model = "PUMP_S_N"
		self.Notes = "Pump with Check Valve"

		# General Parameters
		self._NDT_Value = "0"
		self._NDT_Notes = "No. of Performance Curve Data Points"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.Vd_Value = "3"
		self.Vd_Notes = "Design Flow Rate[m3/h]"

		# Primary Parameters
		self.Hd_Value = "30"
		self.Hd_Notes = "Design Head[m]"

		# Primary Parameters
		self.Wd_Value = "3"
		self.Wd_Notes = "Design Power[kW]"

		# Primary Parameters
		self.Hs_Value = "33"
		self.Hs_Notes = "Head at Shutoff[m]"

		# Primary Parameters
		self.Ws_Value = "0"
		self.Ws_Notes = "Power at Shutoff[kW]"

		# Primary Parameters
		self.tstart_Value = "2"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "2"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.dd_Value = "442"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.qatm_Value = "12"
		self.qatm_Notes = "Heat Loss Coefficient[W/K]"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.chkfail_Value = "0"
		self.chkfail_Notes = "Check Valve Fail Flag(0:Normal,1:Fail)"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_P2103A:
	def __init__(self):
		self.ID = 1143
		self.Name = "P2103A"
		self.Model = "PUMP_RC"
		self.Notes = "Pump with Check Valve"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.tmove_Value = "5"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.Pd_Value = "5200"
		self.Pd_Notes = "Design Discharge Pressure[kPa]"

		# Primary Parameters
		self.Vd_Value = "0.06"
		self.Vd_Notes = "Design Flow Rate[m3/h]"

		# Primary Parameters
		self.Wd_Value = "0.2"
		self.Wd_Notes = "Design Power[kW]"

		# Primary Parameters
		self.Vs_Value = "0.066"
		self.Vs_Notes = "Flow Rate at Zero Pressure[m3/h]"

		# Primary Parameters
		self.Ws_Value = "0"
		self.Ws_Notes = "Power at Zero Pressure[kW]"

		# Primary Parameters
		self.Pmax_Value = "5500"
		self.Pmax_Notes = "Max. Discharge Pressure[kPa]"

		# Primary Parameters
		self.tstart_Value = "2"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "2"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.dd_Value = "674"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.stopfl_Value = "0"
		self.stopfl_Notes = "Flow when Stopped(0:No,1:Yes)"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.chkfail_Value = "0"
		self.chkfail_Notes = "Check Valve Fail Flag(0:Normal,1:Fail)"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Stroke Start Value[-]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_P2103B:
	def __init__(self):
		self.ID = 1144
		self.Name = "P2103B"
		self.Model = "PUMP_RC"
		self.Notes = "Pump with Check Valve"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.tmove_Value = "5"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.Pd_Value = "5200"
		self.Pd_Notes = "Design Discharge Pressure[kPa]"

		# Primary Parameters
		self.Vd_Value = "0.06"
		self.Vd_Notes = "Design Flow Rate[m3/h]"

		# Primary Parameters
		self.Wd_Value = "0.1"
		self.Wd_Notes = "Design Power[kW]"

		# Primary Parameters
		self.Vs_Value = "0.066"
		self.Vs_Notes = "Flow Rate at Zero Pressure[m3/h]"

		# Primary Parameters
		self.Ws_Value = "0"
		self.Ws_Notes = "Power at Zero Pressure[kW]"

		# Primary Parameters
		self.Pmax_Value = "5500"
		self.Pmax_Notes = "Max. Discharge Pressure[kPa]"

		# Primary Parameters
		self.tstart_Value = "2"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "2"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.dd_Value = "674"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.stopfl_Value = "0"
		self.stopfl_Notes = "Flow when Stopped(0:No,1:Yes)"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.chkfail_Value = "0"
		self.chkfail_Notes = "Check Valve Fail Flag(0:Normal,1:Fail)"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Stroke Start Value[-]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_P2104A:
	def __init__(self):
		self.ID = 1145
		self.Name = "P2104A"
		self.Model = "PUMP_RC"
		self.Notes = "Pump with Check Valve"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.tmove_Value = "5"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.Pd_Value = "5000"
		self.Pd_Notes = "Design Discharge Pressure[kPa]"

		# Primary Parameters
		self.Vd_Value = "0.0377"
		self.Vd_Notes = "Design Flow Rate[m3/h]"

		# Primary Parameters
		self.Wd_Value = "0.02"
		self.Wd_Notes = "Design Power[kW]"

		# Primary Parameters
		self.Vs_Value = "0.04147"
		self.Vs_Notes = "Flow Rate at Zero Pressure[m3/h]"

		# Primary Parameters
		self.Ws_Value = "0"
		self.Ws_Notes = "Power at Zero Pressure[kW]"

		# Primary Parameters
		self.Pmax_Value = "5300"
		self.Pmax_Notes = "Max. Discharge Pressure[kPa]"

		# Primary Parameters
		self.tstart_Value = "2"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "2"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.dd_Value = "672"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.stopfl_Value = "0"
		self.stopfl_Notes = "Flow when Stopped(0:No,1:Yes)"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.chkfail_Value = "0"
		self.chkfail_Notes = "Check Valve Fail Flag(0:Normal,1:Fail)"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Stroke Start Value[-]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_P2104B:
	def __init__(self):
		self.ID = 1146
		self.Name = "P2104B"
		self.Model = "PUMP_RC"
		self.Notes = "Pump with Check Valve"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.tmove_Value = "5"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.Pd_Value = "5000"
		self.Pd_Notes = "Design Discharge Pressure[kPa]"

		# Primary Parameters
		self.Vd_Value = "0.0377"
		self.Vd_Notes = "Design Flow Rate[m3/h]"

		# Primary Parameters
		self.Wd_Value = "0.02"
		self.Wd_Notes = "Design Power[kW]"

		# Primary Parameters
		self.Vs_Value = "0.04147"
		self.Vs_Notes = "Flow Rate at Zero Pressure[m3/h]"

		# Primary Parameters
		self.Ws_Value = "0"
		self.Ws_Notes = "Power at Zero Pressure[kW]"

		# Primary Parameters
		self.Pmax_Value = "5300"
		self.Pmax_Notes = "Max. Discharge Pressure[kPa]"

		# Primary Parameters
		self.tstart_Value = "2"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "2"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.dd_Value = "672"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.stopfl_Value = "0"
		self.stopfl_Notes = "Flow when Stopped(0:No,1:Yes)"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.chkfail_Value = "0"
		self.chkfail_Notes = "Check Valve Fail Flag(0:Normal,1:Fail)"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Stroke Start Value[-]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_P2104C:
	def __init__(self):
		self.ID = 1147
		self.Name = "P2104C"
		self.Model = "PUMP_RC"
		self.Notes = "Pump with Check Valve"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.tmove_Value = "5"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.Pd_Value = "5000"
		self.Pd_Notes = "Design Discharge Pressure[kPa]"

		# Primary Parameters
		self.Vd_Value = "0.0377"
		self.Vd_Notes = "Design Flow Rate[m3/h]"

		# Primary Parameters
		self.Wd_Value = "0.02"
		self.Wd_Notes = "Design Power[kW]"

		# Primary Parameters
		self.Vs_Value = "0.04147"
		self.Vs_Notes = "Flow Rate at Zero Pressure[m3/h]"

		# Primary Parameters
		self.Ws_Value = "0"
		self.Ws_Notes = "Power at Zero Pressure[kW]"

		# Primary Parameters
		self.Pmax_Value = "5300"
		self.Pmax_Notes = "Max. Discharge Pressure[kPa]"

		# Primary Parameters
		self.tstart_Value = "2"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "2"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.dd_Value = "672"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.stopfl_Value = "0"
		self.stopfl_Notes = "Flow when Stopped(0:No,1:Yes)"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.chkfail_Value = "0"
		self.chkfail_Notes = "Check Valve Fail Flag(0:Normal,1:Fail)"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Stroke Start Value[-]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_P2105A:
	def __init__(self):
		self.ID = 1148
		self.Name = "P2105A"
		self.Model = "PUMP_RC"
		self.Notes = "Pump with Check Valve"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.tmove_Value = "5"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.Pd_Value = "5200"
		self.Pd_Notes = "Design Discharge Pressure[kPa]"

		# Primary Parameters
		self.Vd_Value = "0.0006"
		self.Vd_Notes = "Design Flow Rate[m3/h]"

		# Primary Parameters
		self.Wd_Value = "0.001"
		self.Wd_Notes = "Design Power[kW]"

		# Primary Parameters
		self.Vs_Value = "0.00066"
		self.Vs_Notes = "Flow Rate at Zero Pressure[m3/h]"

		# Primary Parameters
		self.Ws_Value = "0.0001"
		self.Ws_Notes = "Power at Zero Pressure[kW]"

		# Primary Parameters
		self.Pmax_Value = "5500"
		self.Pmax_Notes = "Max. Discharge Pressure[kPa]"

		# Primary Parameters
		self.tstart_Value = "2"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "2"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.dd_Value = "947"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.stopfl_Value = "0"
		self.stopfl_Notes = "Flow when Stopped(0:No,1:Yes)"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.chkfail_Value = "0"
		self.chkfail_Notes = "Check Valve Fail Flag(0:Normal,1:Fail)"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Stroke Start Value[-]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_P2105B:
	def __init__(self):
		self.ID = 1149
		self.Name = "P2105B"
		self.Model = "PUMP_RC"
		self.Notes = "Pump with Check Valve"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.tmove_Value = "5"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.Pd_Value = "5200"
		self.Pd_Notes = "Design Discharge Pressure[kPa]"

		# Primary Parameters
		self.Vd_Value = "0.0006"
		self.Vd_Notes = "Design Flow Rate[m3/h]"

		# Primary Parameters
		self.Wd_Value = "0.001"
		self.Wd_Notes = "Design Power[kW]"

		# Primary Parameters
		self.Vs_Value = "0.00066"
		self.Vs_Notes = "Flow Rate at Zero Pressure[m3/h]"

		# Primary Parameters
		self.Ws_Value = "0"
		self.Ws_Notes = "Power at Zero Pressure[kW]"

		# Primary Parameters
		self.Pmax_Value = "5500"
		self.Pmax_Notes = "Max. Discharge Pressure[kPa]"

		# Primary Parameters
		self.tstart_Value = "2"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "2"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.dd_Value = "947"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.stopfl_Value = "0"
		self.stopfl_Notes = "Flow when Stopped(0:No,1:Yes)"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.chkfail_Value = "0"
		self.chkfail_Notes = "Check Valve Fail Flag(0:Normal,1:Fail)"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Stroke Start Value[-]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_P2107:
	def __init__(self):
		self.ID = 1150
		self.Name = "P2107"
		self.Model = "PUMP_S_N"
		self.Notes = "Pump with Check Valve"

		# General Parameters
		self._NDT_Value = "0"
		self._NDT_Notes = "No. of Performance Curve Data Points"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.Vd_Value = "20"
		self.Vd_Notes = "Design Flow Rate[m3/h]"

		# Primary Parameters
		self.Hd_Value = "60"
		self.Hd_Notes = "Design Head[m]"

		# Primary Parameters
		self.Wd_Value = "5"
		self.Wd_Notes = "Design Power[kW]"

		# Primary Parameters
		self.Hs_Value = "66"
		self.Hs_Notes = "Head at Shutoff[m]"

		# Primary Parameters
		self.Ws_Value = "0"
		self.Ws_Notes = "Power at Shutoff[kW]"

		# Primary Parameters
		self.tstart_Value = "2"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "2"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.dd_Value = "650"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.qatm_Value = "12"
		self.qatm_Notes = "Heat Loss Coefficient[W/K]"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.chkfail_Value = "0"
		self.chkfail_Notes = "Check Valve Fail Flag(0:Normal,1:Fail)"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_P2107B:
	def __init__(self):
		self.ID = 1151
		self.Name = "P2107B"
		self.Model = "PUMP_S_N"
		self.Notes = "Pump with Check Valve"

		# General Parameters
		self._NDT_Value = "0"
		self._NDT_Notes = "No. of Performance Curve Data Points"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.Vd_Value = "20"
		self.Vd_Notes = "Design Flow Rate[m3/h]"

		# Primary Parameters
		self.Hd_Value = "60"
		self.Hd_Notes = "Design Head[m]"

		# Primary Parameters
		self.Wd_Value = "5"
		self.Wd_Notes = "Design Power[kW]"

		# Primary Parameters
		self.Hs_Value = "66"
		self.Hs_Notes = "Head at Shutoff[m]"

		# Primary Parameters
		self.Ws_Value = "0"
		self.Ws_Notes = "Power at Shutoff[kW]"

		# Primary Parameters
		self.tstart_Value = "2"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "2"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.dd_Value = "650"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.qatm_Value = "12"
		self.qatm_Notes = "Heat Loss Coefficient[W/K]"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.chkfail_Value = "0"
		self.chkfail_Notes = "Check Valve Fail Flag(0:Normal,1:Fail)"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_P2109:
	def __init__(self):
		self.ID = 1152
		self.Name = "P2109"
		self.Model = "PUMP_S_N"
		self.Notes = "Pump with Check Valve"

		# General Parameters
		self._NDT_Value = "16"
		self._NDT_Notes = "No. of Performance Curve Data Points"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.Vd_Value = "(16)"
		self.Vd_Notes = "Performance Curve Flow Rate Data[m3/h]"

		# Primary Parameters List Value
		self.Vd_List_Value = array([ 0.     ,  1.9115 ,  3.45133,  3.87611,  5.     ,  5.89381,
        6.69027,  7.85841,  9.07965,  9.82301, 11.8407 , 12.9027 ,
       13.8584 , 15.9292 , 17.9469 , 20.1239 ])
		# Primary Parameters
		self.Hd_Value = "(16)"
		self.Hd_Notes = "Performance Curve Head Data[m]"

		# Primary Parameters List Value
		self.Hd_List_Value = array([46.6677, 46.3443, 46.3288, 46.0215, 45.    , 44.98  , 44.93  ,
       44.4661, 43.8477, 42.9311, 41.3955, 40.1727, 39.254 , 35.8997,
       32.546 , 27.3725])
		# Primary Parameters
		self.Wd_Value = "(16)"
		self.Wd_Notes = "Performance Curve Power Data[kW]"

		# Primary Parameters List Value
		self.Wd_List_Value = array([1.30769, 1.53846, 1.69231, 1.76923, 1.887  , 2.     , 2.07692,
       2.07692, 2.07692, 2.23077, 2.38462, 2.46154, 2.46154, 2.53846,
       2.84615, 2.92308])
		# Primary Parameters
		self.tstart_Value = "2"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "2"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.dd_Value = "650"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.qatm_Value = "100"
		self.qatm_Notes = "Heat Loss Coefficient[W/K]"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.chkfail_Value = "0"
		self.chkfail_Notes = "Check Valve Fail Flag(0:Normal,1:Fail)"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_P2110:
	def __init__(self):
		self.ID = 1153
		self.Name = "P2110"
		self.Model = "PUMP_S_N"
		self.Notes = "Pump with Check Valve"

		# General Parameters
		self._NDT_Value = "16"
		self._NDT_Notes = "No. of Performance Curve Data Points"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.Vd_Value = "(16)"
		self.Vd_Notes = "Performance Curve Flow Rate Data[m3/h]"

		# Primary Parameters List Value
		self.Vd_List_Value = array([ 0.     ,  5.04146,  9.95025, 14.9917 , 19.7678 , 24.6766 ,
       29.7181 , 34.7595 , 39.801  , 44.8425 , 50.     , 54.9254 ,
       59.9668 , 65.0083 , 70.0498 , 78.6733 ])
		# Primary Parameters
		self.Hd_Value = "(16)"
		self.Hd_Notes = "Performance Curve Head Data[m]"

		# Primary Parameters List Value
		self.Hd_List_Value = array([55.6327, 56.0347, 55.8253, 55.9191, 55.7072, 55.1871, 54.9802,
       54.4626, 53.6444, 52.    , 50.    , 49.2   , 48.4   , 46.4   ,
       44.1   , 38.3   ])
		# Primary Parameters
		self.Wd_Value = "(16)"
		self.Wd_Notes = "Performance Curve Power Data[kW]"

		# Primary Parameters List Value
		self.Wd_List_Value = array([ 5.30303,  5.96638,  6.47671,  7.14006,  7.64888,  8.1592 ,
        8.67104,  9.03136,  9.99774, 10.2065 , 11.13   , 11.3817 ,
       12.0451 , 12.5569 , 12.9172 , 13.7728 ])
		# Primary Parameters
		self.tstart_Value = "2"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "2"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.dd_Value = "650"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.qatm_Value = "12"
		self.qatm_Notes = "Heat Loss Coefficient[W/K]"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_P2203A:
	def __init__(self):
		self.ID = 1154
		self.Name = "P2203A"
		self.Model = "PUMP_S_N"
		self.Notes = "Pump with Check Valve"

		# General Parameters
		self._NDT_Value = "16"
		self._NDT_Notes = "No. of Performance Curve Data Points"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.Vd_Value = "(16)"
		self.Vd_Notes = "Performance Curve Flow Rate Data[m3/h]"

		# Primary Parameters List Value
		self.Vd_List_Value = array([ 0.     ,  5.10204,  7.59637,  9.97732, 12.4717 , 15.0794 ,
       17.5737 , 19.9546 , 22.449  , 24.8299 , 27.3243 , 29.932  ,
       32.3129 , 35.     , 37.3016 , 40.8163 ])
		# Primary Parameters
		self.Hd_Value = "(16)"
		self.Hd_Notes = "Performance Curve Head Data[m]"

		# Primary Parameters List Value
		self.Hd_List_Value = array([502.071, 507.587, 510.35 , 513.107, 516.816, 517.668, 517.572,
       513.679, 509.784, 504.935, 497.233, 486.674, 476.124, 456.5  ,
       445.505, 418.747])
		# Primary Parameters
		self.Wd_Value = "(16)"
		self.Wd_Notes = "Performance Curve Power Data[kW]"

		# Primary Parameters List Value
		self.Wd_List_Value = array([14.6424, 16.077 , 17.5414, 18.7083, 19.8739, 21.6358, 22.8014,
       23.9684, 26.0305, 27.4963, 29.2596, 31.0215, 32.7861, 34.125 ,
       36.0138, 38.3627])
		# Primary Parameters
		self.tstart_Value = "2"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "2"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.dd_Value = "486"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.qatm_Value = "200"
		self.qatm_Notes = "Heat Loss Coefficient[W/K]"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_P2203B:
	def __init__(self):
		self.ID = 1155
		self.Name = "P2203B"
		self.Model = "PUMP_S_N"
		self.Notes = "Pump with Check Valve"

		# General Parameters
		self._NDT_Value = "16"
		self._NDT_Notes = "No. of Performance Curve Data Points"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.Vd_Value = "(16)"
		self.Vd_Notes = "Performance Curve Flow Rate Data[m3/h]"

		# Primary Parameters List Value
		self.Vd_List_Value = array([ 0.     ,  5.10204,  7.59637,  9.97732, 12.4717 , 15.0794 ,
       17.5737 , 19.9546 , 22.449  , 24.8299 , 27.3243 , 29.932  ,
       32.3129 , 35.     , 37.3016 , 40.8163 ])
		# Primary Parameters
		self.Hd_Value = "(16)"
		self.Hd_Notes = "Performance Curve Head Data[m]"

		# Primary Parameters List Value
		self.Hd_List_Value = array([502.071, 507.587, 510.35 , 513.107, 516.816, 517.668, 517.572,
       513.679, 509.784, 504.935, 497.233, 486.674, 476.124, 456.5  ,
       445.505, 418.747])
		# Primary Parameters
		self.Wd_Value = "(16)"
		self.Wd_Notes = "Performance Curve Power Data[kW]"

		# Primary Parameters List Value
		self.Wd_List_Value = array([14.6424, 16.077 , 17.5414, 18.7083, 19.8739, 21.6358, 22.8014,
       23.9684, 26.0305, 27.4963, 29.2596, 31.0215, 32.7861, 34.125 ,
       36.0138, 38.3627])
		# Primary Parameters
		self.tstart_Value = "2"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "2"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.dd_Value = "1000"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.qatm_Value = "200"
		self.qatm_Notes = "Heat Loss Coefficient[W/K]"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_P2208A:
	def __init__(self):
		self.ID = 1156
		self.Name = "P2208A"
		self.Model = "PUMP_S_N"
		self.Notes = "Pump with Check Valve"

		# General Parameters
		self._NDT_Value = "16"
		self._NDT_Notes = "No. of Performance Curve Data Points"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.Vd_Value = "(16)"
		self.Vd_Notes = "Performance Curve Flow Rate Data[m3/h]"

		# Primary Parameters List Value
		self.Vd_List_Value = array([ 0.     ,  5.11364, 10.     , 12.5    , 15.1136 , 17.6136 ,
       20.     , 22.5    , 24.8864 , 27.3864 , 30.     , 32.3864 ,
       35.     , 37.3864 , 40.9091 , 44.3182 ])
		# Primary Parameters
		self.Hd_Value = "(16)"
		self.Hd_Notes = "Performance Curve Head Data[m]"

		# Primary Parameters List Value
		self.Hd_List_Value = array([200.46 , 203.124, 205.793, 207.586, 209.377, 210.711, 211.126,
       212.92 , 213.335, 213.289, 213.241, 212.278, 209.931, 207.588,
       203.386, 196.886])
		# Primary Parameters
		self.Wd_Value = "(16)"
		self.Wd_Notes = "Performance Curve Power Data[kW]"

		# Primary Parameters List Value
		self.Wd_List_Value = array([ 7.84615,  8.74249,  9.64057, 10.0893 , 10.7683 , 11.4478 ,
       11.8971 , 12.5766 , 13.2562 , 13.9363 , 14.6152 , 15.5261 ,
       16.4358 , 17.1159 , 18.0221 , 19.6189 ])
		# Primary Parameters
		self.tstart_Value = "2"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "2"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.dd_Value = "486"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.qatm_Value = "100"
		self.qatm_Notes = "Heat Loss Coefficient[W/K]"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_P2208B:
	def __init__(self):
		self.ID = 1157
		self.Name = "P2208B"
		self.Model = "PUMP_S_N"
		self.Notes = "Pump with Check Valve"

		# General Parameters
		self._NDT_Value = "16"
		self._NDT_Notes = "No. of Performance Curve Data Points"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.Vd_Value = "(16)"
		self.Vd_Notes = "Performance Curve Flow Rate Data[m3/h]"

		# Primary Parameters List Value
		self.Vd_List_Value = array([ 0.     ,  5.11364, 10.     , 12.5    , 15.1136 , 17.6136 ,
       20.     , 22.5    , 24.8864 , 27.3864 , 30.     , 32.3864 ,
       35.     , 37.3864 , 40.9091 , 44.3182 ])
		# Primary Parameters
		self.Hd_Value = "(16)"
		self.Hd_Notes = "Performance Curve Head Data[m]"

		# Primary Parameters List Value
		self.Hd_List_Value = array([200.46 , 203.124, 205.793, 207.586, 209.377, 210.711, 211.126,
       212.92 , 213.335, 213.289, 213.241, 212.278, 209.931, 207.588,
       203.386, 196.886])
		# Primary Parameters
		self.Wd_Value = "(16)"
		self.Wd_Notes = "Performance Curve Power Data[kW]"

		# Primary Parameters List Value
		self.Wd_List_Value = array([ 7.84615,  8.74249,  9.64057, 10.0893 , 10.7683 , 11.4478 ,
       11.8971 , 12.5766 , 13.2562 , 13.9363 , 14.6152 , 15.5261 ,
       16.4358 , 17.1159 , 18.0221 , 19.6189 ])
		# Primary Parameters
		self.tstart_Value = "2"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "2"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.dd_Value = "486"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.qatm_Value = "100"
		self.qatm_Notes = "Heat Loss Coefficient[W/K]"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_P2209A:
	def __init__(self):
		self.ID = 1158
		self.Name = "P2209A"
		self.Model = "PUMP_S_N"
		self.Notes = "Pump with Check Valve"

		# General Parameters
		self._NDT_Value = "16"
		self._NDT_Notes = "No. of Performance Curve Data Points"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.Vd_Value = "(16)"
		self.Vd_Notes = "Performance Curve Flow Rate Data[m3/h]"

		# Primary Parameters List Value
		self.Vd_List_Value = array([ 0.     ,  2.0251 ,  3.97518,  6.01576,  7.96532,  9.91514,
       11.9555 , 13.905  , 15.9002 , 16.8977 , 17.9403 , 18.8924 ,
       20.     , 20.8873 , 21.8845 , 22.882  ])
		# Primary Parameters
		self.Hd_Value = "(16)"
		self.Hd_Notes = "Performance Curve Head Data[m]"

		# Primary Parameters List Value
		self.Hd_List_Value = array([449.134, 451.622, 458.701, 463.488, 467.112, 471.891, 473.224,
       472.249, 468.971, 465.601, 461.087, 455.413, 450.   , 440.619,
       431.494, 420.067])
		# Primary Parameters
		self.Wd_Value = "(16)"
		self.Wd_Notes = "Performance Curve Power Data[kW]"

		# Primary Parameters List Value
		self.Wd_List_Value = array([12.4855, 13.3179, 14.1503, 15.1907, 16.4393, 17.4798, 18.7283,
       19.9768, 21.0173, 21.6416, 22.474 , 23.0982, 23.7226, 24.3468,
       25.1792, 25.8035])
		# Primary Parameters
		self.tstart_Value = "2"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "2"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.dd_Value = "486"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.qatm_Value = "200"
		self.qatm_Notes = "Heat Loss Coefficient[W/K]"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.chkfail_Value = "0"
		self.chkfail_Notes = "Check Valve Fail Flag(0:Normal,1:Fail)"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_P2209B:
	def __init__(self):
		self.ID = 1159
		self.Name = "P2209B"
		self.Model = "PUMP_S_N"
		self.Notes = "Pump with Check Valve"

		# General Parameters
		self._NDT_Value = "16"
		self._NDT_Notes = "No. of Performance Curve Data Points"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.Vd_Value = "(16)"
		self.Vd_Notes = "Performance Curve Flow Rate Data[m3/h]"

		# Primary Parameters List Value
		self.Vd_List_Value = array([ 0.     ,  2.0251 ,  3.97518,  6.01576,  7.96532,  9.91514,
       11.9555 , 13.905  , 15.9002 , 16.8977 , 17.9403 , 18.8924 ,
       20.     , 20.8873 , 21.8845 , 22.882  ])
		# Primary Parameters
		self.Hd_Value = "(16)"
		self.Hd_Notes = "Performance Curve Head Data[m]"

		# Primary Parameters List Value
		self.Hd_List_Value = array([449.134, 451.622, 458.701, 463.488, 467.112, 471.891, 473.224,
       472.249, 468.971, 465.601, 461.087, 455.413, 450.   , 440.619,
       431.494, 420.067])
		# Primary Parameters
		self.Wd_Value = "(16)"
		self.Wd_Notes = "Performance Curve Power Data[kW]"

		# Primary Parameters List Value
		self.Wd_List_Value = array([12.4855, 13.3179, 14.1503, 15.1907, 16.4393, 17.4798, 18.7283,
       19.9768, 21.0173, 21.6416, 22.474 , 23.0982, 23.7226, 24.3468,
       25.1792, 25.8035])
		# Primary Parameters
		self.tstart_Value = "2"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "2"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.dd_Value = "486"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.qatm_Value = "200"
		self.qatm_Notes = "Heat Loss Coefficient[W/K]"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.chkfail_Value = "0"
		self.chkfail_Notes = "Check Valve Fail Flag(0:Normal,1:Fail)"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_P2211A:
	def __init__(self):
		self.ID = 1160
		self.Name = "P2211A"
		self.Model = "PUMP_S_N"
		self.Notes = "Pump with Check Valve"

		# General Parameters
		self._NDT_Value = "16"
		self._NDT_Notes = "No. of Performance Curve Data Points"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.Vd_Value = "(16)"
		self.Vd_Notes = "Performance Curve Flow Rate Data[m3/h]"

		# Primary Parameters List Value
		self.Vd_List_Value = array([ 0.     ,  2.02602,  3.97289,  6.01035,  7.91147,  9.85878,
       11.8061 , 13.7992 , 15.7931 , 17.8338 , 18.7863 , 19.8291 ,
       20.8279 , 21.8267 , 22.8259 , 24.8706 ])
		# Primary Parameters
		self.Hd_Value = "(16)"
		self.Hd_Notes = "Performance Curve Head Data[m]"

		# Primary Parameters List Value
		self.Hd_List_Value = array([105.116 , 106.01  , 106.906 , 107.799 , 109.161 , 109.591 ,
       110.021 , 109.986 , 109.02  , 106.658 , 105.245 , 104.296 ,
       101.953 ,  99.6095,  96.801 ,  90.2528])
		# Primary Parameters
		self.Wd_Value = "(16)"
		self.Wd_Notes = "Performance Curve Power Data[kW]"

		# Primary Parameters List Value
		self.Wd_List_Value = array([2.74421, 3.01963, 3.20219, 3.4311 , 3.66009, 4.02878, 4.35079,
       4.71931, 4.9949 , 5.36334, 5.50109, 5.63884, 5.8231 , 5.96085,
       6.0986 , 6.42054])
		# Primary Parameters
		self.tstart_Value = "2"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "2"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.dd_Value = "427"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.qatm_Value = "100"
		self.qatm_Notes = "Heat Loss Coefficient[W/K]"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.chkfail_Value = "0"
		self.chkfail_Notes = "Check Valve Fail Flag(0:Normal,1:Fail)"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_P2211B:
	def __init__(self):
		self.ID = 1161
		self.Name = "P2211B"
		self.Model = "PUMP_S_N"
		self.Notes = "Pump with Check Valve"

		# General Parameters
		self._NDT_Value = "16"
		self._NDT_Notes = "No. of Performance Curve Data Points"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.Vd_Value = "(16)"
		self.Vd_Notes = "Performance Curve Flow Rate Data[m3/h]"

		# Primary Parameters List Value
		self.Vd_List_Value = array([ 0.     ,  2.02602,  3.97289,  6.01035,  7.91147,  9.85878,
       11.8061 , 13.7992 , 15.7931 , 17.8338 , 18.7863 , 19.8291 ,
       20.8279 , 21.8267 , 22.8259 , 24.8706 ])
		# Primary Parameters
		self.Hd_Value = "(16)"
		self.Hd_Notes = "Performance Curve Head Data[m]"

		# Primary Parameters List Value
		self.Hd_List_Value = array([105.116 , 106.01  , 106.906 , 107.799 , 109.161 , 109.591 ,
       110.021 , 109.986 , 109.02  , 106.658 , 105.245 , 104.296 ,
       101.953 ,  99.6095,  96.801 ,  90.2528])
		# Primary Parameters
		self.Wd_Value = "(16)"
		self.Wd_Notes = "Performance Curve Power Data[kW]"

		# Primary Parameters List Value
		self.Wd_List_Value = array([2.74421, 3.01963, 3.20219, 3.4311 , 3.66009, 4.02878, 4.35079,
       4.71931, 4.9949 , 5.36334, 5.50109, 5.63884, 5.8231 , 5.96085,
       6.0986 , 6.42054])
		# Primary Parameters
		self.tstart_Value = "2"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "2"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.dd_Value = "427"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.qatm_Value = "100"
		self.qatm_Notes = "Heat Loss Coefficient[W/K]"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.chkfail_Value = "0"
		self.chkfail_Notes = "Check Valve Fail Flag(0:Normal,1:Fail)"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_P2501A:
	def __init__(self):
		self.ID = 1162
		self.Name = "P2501A"
		self.Model = "PUMP_S_N"
		self.Notes = "Pump with Check Valve"

		# General Parameters
		self._NDT_Value = "0"
		self._NDT_Notes = "No. of Performance Curve Data Points"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.Vd_Value = "6"
		self.Vd_Notes = "Design Flow Rate[m3/h]"

		# Primary Parameters
		self.Hd_Value = "60"
		self.Hd_Notes = "Design Head[m]"

		# Primary Parameters
		self.Wd_Value = "10"
		self.Wd_Notes = "Design Power[kW]"

		# Primary Parameters
		self.Hs_Value = "66"
		self.Hs_Notes = "Head at Shutoff[m]"

		# Primary Parameters
		self.Ws_Value = "0"
		self.Ws_Notes = "Power at Shutoff[kW]"

		# Primary Parameters
		self.tstart_Value = "2"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "2"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.dd_Value = "1000"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.qatm_Value = "12"
		self.qatm_Notes = "Heat Loss Coefficient[W/K]"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.chkfail_Value = "0"
		self.chkfail_Notes = "Check Valve Fail Flag(0:Normal,1:Fail)"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_P2501B:
	def __init__(self):
		self.ID = 1163
		self.Name = "P2501B"
		self.Model = "PUMP_S_N"
		self.Notes = "Pump with Check Valve"

		# General Parameters
		self._NDT_Value = "0"
		self._NDT_Notes = "No. of Performance Curve Data Points"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.Vd_Value = "6"
		self.Vd_Notes = "Design Flow Rate[m3/h]"

		# Primary Parameters
		self.Hd_Value = "60"
		self.Hd_Notes = "Design Head[m]"

		# Primary Parameters
		self.Wd_Value = "10"
		self.Wd_Notes = "Design Power[kW]"

		# Primary Parameters
		self.Hs_Value = "66"
		self.Hs_Notes = "Head at Shutoff[m]"

		# Primary Parameters
		self.Ws_Value = "0"
		self.Ws_Notes = "Power at Shutoff[kW]"

		# Primary Parameters
		self.tstart_Value = "2"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "2"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.dd_Value = "1000"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.qatm_Value = "12"
		self.qatm_Notes = "Heat Loss Coefficient[W/K]"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.chkfail_Value = "0"
		self.chkfail_Notes = "Check Valve Fail Flag(0:Normal,1:Fail)"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_P2502A:
	def __init__(self):
		self.ID = 1164
		self.Name = "P2502A"
		self.Model = "PUMP_S_N"
		self.Notes = "Pump with Check Valve"

		# General Parameters
		self._NDT_Value = "16"
		self._NDT_Notes = "No. of Performance Curve Data Points"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.Vd_Value = "(16)"
		self.Vd_Notes = "Performance Curve Flow Rate Data[m3/h]"

		# Primary Parameters List Value
		self.Vd_List_Value = array([  0.    ,  11.6159,  23.5083,  35.4008,  47.5698,  59.4622,
        71.0784,  83.247 ,  95.4162, 107.585 , 119.477 , 125.04  ,
       131.37  , 143.539 , 155.431 , 167.324 ])
		# Primary Parameters
		self.Hd_Value = "(16)"
		self.Hd_Notes = "Performance Curve Head Data[m]"

		# Primary Parameters List Value
		self.Hd_List_Value = array([46.0837, 45.8555, 45.6274, 44.943 , 44.4867, 44.0304, 42.8897,
       41.9772, 41.0646, 39.6958, 38.0989, 37.4144, 36.5019, 35.1331,
       33.308 , 31.4829])
		# Primary Parameters
		self.Wd_Value = "(16)"
		self.Wd_Notes = "Performance Curve Power Data[kW]"

		# Primary Parameters List Value
		self.Wd_List_Value = array([ 7.5    ,  8.16176,  9.92647, 11.0294 , 11.6912 , 13.2353 ,
       14.1176 , 15.4412 , 16.1029 , 17.2059 , 18.3088 , 18.3088 ,
       18.9706 , 19.8529 , 20.5147 , 21.3971 ])
		# Primary Parameters
		self.tstart_Value = "2"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "2"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.dd_Value = "800"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.qatm_Value = "12"
		self.qatm_Notes = "Heat Loss Coefficient[W/K]"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.chkfail_Value = "0"
		self.chkfail_Notes = "Check Valve Fail Flag(0:Normal,1:Fail)"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_P2502B:
	def __init__(self):
		self.ID = 1165
		self.Name = "P2502B"
		self.Model = "PUMP_S_N"
		self.Notes = "Pump with Check Valve"

		# General Parameters
		self._NDT_Value = "16"
		self._NDT_Notes = "No. of Performance Curve Data Points"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.Vd_Value = "(16)"
		self.Vd_Notes = "Performance Curve Flow Rate Data[m3/h]"

		# Primary Parameters List Value
		self.Vd_List_Value = array([  0.    ,  11.6159,  23.5083,  35.4008,  47.5698,  59.4622,
        71.0784,  83.247 ,  95.4162, 107.585 , 119.477 , 125.04  ,
       131.37  , 143.539 , 155.431 , 167.324 ])
		# Primary Parameters
		self.Hd_Value = "(16)"
		self.Hd_Notes = "Performance Curve Head Data[m]"

		# Primary Parameters List Value
		self.Hd_List_Value = array([46.0837, 45.8555, 45.6274, 44.943 , 44.4867, 44.0304, 42.8897,
       41.9772, 41.0646, 39.6958, 38.0989, 37.4144, 36.5019, 35.1331,
       33.308 , 31.4829])
		# Primary Parameters
		self.Wd_Value = "(16)"
		self.Wd_Notes = "Performance Curve Power Data[kW]"

		# Primary Parameters List Value
		self.Wd_List_Value = array([ 7.5    ,  8.16176,  9.92647, 11.0294 , 11.6912 , 13.2353 ,
       14.1176 , 15.4412 , 16.1029 , 17.2059 , 18.3088 , 18.3088 ,
       18.9706 , 19.8529 , 20.5147 , 21.3971 ])
		# Primary Parameters
		self.tstart_Value = "2"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "2"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.dd_Value = "1000"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.qatm_Value = "12"
		self.qatm_Notes = "Heat Loss Coefficient[W/K]"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.chkfail_Value = "0"
		self.chkfail_Notes = "Check Valve Fail Flag(0:Normal,1:Fail)"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_P2511A:
	def __init__(self):
		self.ID = 1166
		self.Name = "P2511A"
		self.Model = "PUMP_RC"
		self.Notes = "Pump with Check Valve"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.tmove_Value = "5"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.Pd_Value = "591.658"
		self.Pd_Notes = "Design Discharge Pressure[kPa]"

		# Primary Parameters
		self.Vd_Value = "0.012"
		self.Vd_Notes = "Design Flow Rate[m3/h]"

		# Primary Parameters
		self.Wd_Value = "0.4446"
		self.Wd_Notes = "Design Power[kW]"

		# Primary Parameters
		self.Vs_Value = "0.0144"
		self.Vs_Notes = "Flow Rate at Zero Pressure[m3/h]"

		# Primary Parameters
		self.Ws_Value = "0"
		self.Ws_Notes = "Power at Zero Pressure[kW]"

		# Primary Parameters
		self.Pmax_Value = "650"
		self.Pmax_Notes = "Max. Discharge Pressure[kPa]"

		# Primary Parameters
		self.tstart_Value = "2"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "2"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.dd_Value = "960"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.stopfl_Value = "0"
		self.stopfl_Notes = "Flow when Stopped(0:No,1:Yes)"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.chkfail_Value = "0"
		self.chkfail_Notes = "Check Valve Fail Flag(0:Normal,1:Fail)"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Stroke Start Value[-]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_P2511B:
	def __init__(self):
		self.ID = 1167
		self.Name = "P2511B"
		self.Model = "PUMP_RC"
		self.Notes = "Pump with Check Valve"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.tmove_Value = "5"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.Pd_Value = "591.658"
		self.Pd_Notes = "Design Discharge Pressure[kPa]"

		# Primary Parameters
		self.Vd_Value = "0.012"
		self.Vd_Notes = "Design Flow Rate[m3/h]"

		# Primary Parameters
		self.Wd_Value = "0.4446"
		self.Wd_Notes = "Design Power[kW]"

		# Primary Parameters
		self.Vs_Value = "0.0144"
		self.Vs_Notes = "Flow Rate at Zero Pressure[m3/h]"

		# Primary Parameters
		self.Ws_Value = "0"
		self.Ws_Notes = "Power at Zero Pressure[kW]"

		# Primary Parameters
		self.Pmax_Value = "650"
		self.Pmax_Notes = "Max. Discharge Pressure[kPa]"

		# Primary Parameters
		self.tstart_Value = "2"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "2"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.dd_Value = "960"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.stopfl_Value = "0"
		self.stopfl_Notes = "Flow when Stopped(0:No,1:Yes)"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.chkfail_Value = "0"
		self.chkfail_Notes = "Check Valve Fail Flag(0:Normal,1:Fail)"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Stroke Start Value[-]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_P2911A:
	def __init__(self):
		self.ID = 1168
		self.Name = "P2911A"
		self.Model = "PUMP_S_N"
		self.Notes = "Pump with Check Valve"

		# General Parameters
		self._NDT_Value = "16"
		self._NDT_Notes = "No. of Performance Curve Data Points"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.Vd_Value = "(16)"
		self.Vd_Notes = "Performance Curve Flow Rate Data[m3/h]"

		# Primary Parameters List Value
		self.Vd_List_Value = array([ 0.     ,  5.19069, 10.0827 , 15.2081 , 19.9975 , 24.9008 ,
       29.9216 , 32.32   , 34.8323 , 37.3446 , 40.     , 42.2591 ,
       44.8871 , 49.8034 , 54.7216 , 59.8712 ])
		# Primary Parameters
		self.Hd_Value = "(16)"
		self.Hd_Notes = "Performance Curve Head Data[m]"

		# Primary Parameters List Value
		self.Hd_List_Value = array([62.7632, 62.9774, 63.4267, 63.1725, 62.217 , 61.2611, 59.8364,
       58.8902, 57.9437, 56.9971, 56.0505, 54.636 , 53.4548, 50.8595,
       48.03  , 44.7312])
		# Primary Parameters
		self.Wd_Value = "(16)"
		self.Wd_Notes = "Performance Curve Power Data[kW]"

		# Primary Parameters List Value
		self.Wd_List_Value = array([ 5.76957,  6.55753,  7.34593,  8.13432,  8.92316,  9.59661,
       10.1542 , 10.6061 , 10.9431 , 11.1637 , 11.5007 , 11.8372 ,
       12.0578 , 12.7313 , 13.0586 , 13.5004 ])
		# Primary Parameters
		self.tstart_Value = "2"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "2"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.dd_Value = "1000"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.qatm_Value = "12"
		self.qatm_Notes = "Heat Loss Coefficient[W/K]"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.chkfail_Value = "0"
		self.chkfail_Notes = "Check Valve Fail Flag(0:Normal,1:Fail)"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_P2911B:
	def __init__(self):
		self.ID = 1169
		self.Name = "P2911B"
		self.Model = "PUMP_S_N"
		self.Notes = "Pump with Check Valve"

		# General Parameters
		self._NDT_Value = "16"
		self._NDT_Notes = "No. of Performance Curve Data Points"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.Vd_Value = "(16)"
		self.Vd_Notes = "Performance Curve Flow Rate Data[m3/h]"

		# Primary Parameters List Value
		self.Vd_List_Value = array([ 0.     ,  5.19069, 10.0827 , 15.2081 , 19.9975 , 24.9008 ,
       29.9216 , 32.32   , 34.8323 , 37.3446 , 40.     , 42.2591 ,
       44.8871 , 49.8034 , 54.7216 , 59.8712 ])
		# Primary Parameters
		self.Hd_Value = "(16)"
		self.Hd_Notes = "Performance Curve Head Data[m]"

		# Primary Parameters List Value
		self.Hd_List_Value = array([62.7632, 62.9774, 63.4267, 63.1725, 62.217 , 61.2611, 59.8364,
       58.8902, 57.9437, 56.9971, 56.0505, 54.636 , 53.4548, 50.8595,
       48.03  , 44.7312])
		# Primary Parameters
		self.Wd_Value = "(16)"
		self.Wd_Notes = "Performance Curve Power Data[kW]"

		# Primary Parameters List Value
		self.Wd_List_Value = array([ 5.76957,  6.55753,  7.34593,  8.13432,  8.92316,  9.59661,
       10.1542 , 10.6061 , 10.9431 , 11.1637 , 11.5007 , 11.8372 ,
       12.0578 , 12.7313 , 13.0586 , 13.5004 ])
		# Primary Parameters
		self.tstart_Value = "2"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "2"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.dd_Value = "1000"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.qatm_Value = "12"
		self.qatm_Notes = "Heat Loss Coefficient[W/K]"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.chkfail_Value = "0"
		self.chkfail_Notes = "Check Valve Fail Flag(0:Normal,1:Fail)"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_P2921A:
	def __init__(self):
		self.ID = 1170
		self.Name = "P2921A"
		self.Model = "PUMP_S_N"
		self.Notes = "Pump with Check Valve"

		# General Parameters
		self._NDT_Value = "16"
		self._NDT_Notes = "No. of Performance Curve Data Points"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.Vd_Value = "(16)"
		self.Vd_Notes = "Performance Curve Flow Rate Data[m3/h]"

		# Primary Parameters List Value
		self.Vd_List_Value = array([ 0.     ,  1.00917,  2.01835,  3.00459,  3.50917,  3.99083,
        4.51835,  4.97706,  5.48165,  5.98624,  6.46789,  6.97248,
        7.47706,  7.98165,  8.99083, 10.0229 ])
		# Primary Parameters
		self.Hd_Value = "(16)"
		self.Hd_Notes = "Performance Curve Head Data[m]"

		# Primary Parameters List Value
		self.Hd_List_Value = array([123.016 , 122.557 , 122.098 , 120.262 , 118.885 , 117.508 ,
       115.672 , 114.295 , 112.459 , 110.164 , 108.328 , 105.574 ,
       102.82  , 100.066 ,  94.0984,  87.2131])
		# Primary Parameters
		self.Wd_Value = "(16)"
		self.Wd_Notes = "Performance Curve Power Data[kW]"

		# Primary Parameters List Value
		self.Wd_List_Value = array([11.7919, 12.1387, 12.4855, 12.8324, 12.948 , 13.1792, 13.1792,
       13.4104, 13.526 , 13.6416, 13.8728, 13.9884, 14.2197, 14.2197,
       14.5665, 14.6821])
		# Primary Parameters
		self.tstart_Value = "2"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "2"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.dd_Value = "835"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.qatm_Value = "12"
		self.qatm_Notes = "Heat Loss Coefficient[W/K]"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.chkfail_Value = "0"
		self.chkfail_Notes = "Check Valve Fail Flag(0:Normal,1:Fail)"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_P2921B:
	def __init__(self):
		self.ID = 1171
		self.Name = "P2921B"
		self.Model = "PUMP_S_N"
		self.Notes = "Pump with Check Valve"

		# General Parameters
		self._NDT_Value = "16"
		self._NDT_Notes = "No. of Performance Curve Data Points"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.Vd_Value = "(16)"
		self.Vd_Notes = "Performance Curve Flow Rate Data[m3/h]"

		# Primary Parameters List Value
		self.Vd_List_Value = array([ 0.     ,  1.00917,  2.01835,  3.00459,  3.50917,  3.99083,
        4.51835,  4.97706,  5.48165,  5.98624,  6.46789,  6.97248,
        7.47706,  7.98165,  8.99083, 10.0229 ])
		# Primary Parameters
		self.Hd_Value = "(16)"
		self.Hd_Notes = "Performance Curve Head Data[m]"

		# Primary Parameters List Value
		self.Hd_List_Value = array([123.016 , 122.557 , 122.098 , 120.262 , 118.885 , 117.508 ,
       115.672 , 114.295 , 112.459 , 110.164 , 108.328 , 105.574 ,
       102.82  , 100.066 ,  94.0984,  87.2131])
		# Primary Parameters
		self.Wd_Value = "(16)"
		self.Wd_Notes = "Performance Curve Power Data[kW]"

		# Primary Parameters List Value
		self.Wd_List_Value = array([11.7919, 12.1387, 12.4855, 12.8324, 12.948 , 13.1792, 13.1792,
       13.4104, 13.526 , 13.6416, 13.8728, 13.9884, 14.2197, 14.2197,
       14.5665, 14.6821])
		# Primary Parameters
		self.tstart_Value = "2"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "2"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.dd_Value = "835"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.qatm_Value = "12"
		self.qatm_Notes = "Heat Loss Coefficient[W/K]"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.chkfail_Value = "0"
		self.chkfail_Notes = "Check Valve Fail Flag(0:Normal,1:Fail)"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_P2922A:
	def __init__(self):
		self.ID = 1172
		self.Name = "P2922A"
		self.Model = "PUMP_S_N"
		self.Notes = "Pump with Check Valve"

		# General Parameters
		self._NDT_Value = "16"
		self._NDT_Notes = "No. of Performance Curve Data Points"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.Vd_Value = "(16)"
		self.Vd_Notes = "Performance Curve Flow Rate Data[m3/h]"

		# Primary Parameters List Value
		self.Vd_List_Value = array([  0.    ,  51.5655,  75.5708, 100.722 , 124.727 , 151.02  ,
       176.174 , 200.182 , 224.192 , 248.203 , 274.502 , 299.658 ,
       324.814 , 348.827 , 372.843 , 398.001 ])
		# Primary Parameters
		self.Hd_Value = "(16)"
		self.Hd_Notes = "Performance Curve Head Data[m]"

		# Primary Parameters List Value
		self.Hd_List_Value = array([44.3548, 44.0092, 43.7788, 43.4332, 43.2028, 42.8571, 42.3963,
       42.0507, 41.5899, 41.129 , 40.553 , 39.977 , 39.4009, 38.8249,
       38.1336, 37.4424])
		# Primary Parameters
		self.Wd_Value = "(16)"
		self.Wd_Notes = "Performance Curve Power Data[kW]"

		# Primary Parameters List Value
		self.Wd_List_Value = array([2.04651, 2.32558, 2.51163, 2.65116, 2.83721, 2.93023, 3.06977,
       3.2093 , 3.34884, 3.53488, 3.67442, 3.81395, 3.90698, 4.04651,
       4.18605, 4.27907])
		# Primary Parameters
		self.tstart_Value = "2"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "2"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.dd_Value = "835"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.qatm_Value = "12"
		self.qatm_Notes = "Heat Loss Coefficient[W/K]"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.chkfail_Value = "0"
		self.chkfail_Notes = "Check Valve Fail Flag(0:Normal,1:Fail)"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_P2922B:
	def __init__(self):
		self.ID = 1173
		self.Name = "P2922B"
		self.Model = "PUMP_S_N"
		self.Notes = "Pump with Check Valve"

		# General Parameters
		self._NDT_Value = "16"
		self._NDT_Notes = "No. of Performance Curve Data Points"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.Vd_Value = "(16)"
		self.Vd_Notes = "Performance Curve Flow Rate Data[m3/h]"

		# Primary Parameters List Value
		self.Vd_List_Value = array([  0.    ,  51.5655,  75.5708, 100.722 , 124.727 , 151.02  ,
       176.174 , 200.182 , 224.192 , 248.203 , 274.502 , 299.658 ,
       324.814 , 348.827 , 372.843 , 398.001 ])
		# Primary Parameters
		self.Hd_Value = "(16)"
		self.Hd_Notes = "Performance Curve Head Data[m]"

		# Primary Parameters List Value
		self.Hd_List_Value = array([44.3548, 44.0092, 43.7788, 43.4332, 43.2028, 42.8571, 42.3963,
       42.0507, 41.5899, 41.129 , 40.553 , 39.977 , 39.4009, 38.8249,
       38.1336, 37.4424])
		# Primary Parameters
		self.Wd_Value = "(16)"
		self.Wd_Notes = "Performance Curve Power Data[kW]"

		# Primary Parameters List Value
		self.Wd_List_Value = array([2.04651, 2.32558, 2.51163, 2.65116, 2.83721, 2.93023, 3.06977,
       3.2093 , 3.34884, 3.53488, 3.67442, 3.81395, 3.90698, 4.04651,
       4.18605, 4.27907])
		# Primary Parameters
		self.tstart_Value = "2"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "2"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.dd_Value = "835"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.qatm_Value = "12"
		self.qatm_Notes = "Heat Loss Coefficient[W/K]"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.chkfail_Value = "0"
		self.chkfail_Notes = "Check Valve Fail Flag(0:Normal,1:Fail)"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_P2923A:
	def __init__(self):
		self.ID = 1174
		self.Name = "P2923A"
		self.Model = "PUMP_S_N"
		self.Notes = "Pump with Check Valve"

		# General Parameters
		self._NDT_Value = "16"
		self._NDT_Notes = "No. of Performance Curve Data Points"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.Vd_Value = "(16)"
		self.Vd_Notes = "Performance Curve Flow Rate Data[m3/h]"

		# Primary Parameters List Value
		self.Vd_List_Value = array([0.     , 1.21379, 1.79311, 2.4    , 3.00689, 3.61379, 4.22069,
       4.8    , 5.40689, 5.98621, 6.5931 , 7.2276 , 7.8069 , 8.4138 ,
       8.9931 , 9.5724 ])
		# Primary Parameters
		self.Hd_Value = "(16)"
		self.Hd_Notes = "Performance Curve Head Data[m]"

		# Primary Parameters List Value
		self.Hd_List_Value = array([48.8761, 49.6849, 50.0315, 50.1471, 50.1471, 49.916 , 49.6849,
       49.2227, 48.645 , 47.9517, 47.0273, 45.7563, 44.3697, 42.9832,
       41.3655, 39.5168])
		# Primary Parameters
		self.Wd_Value = "(16)"
		self.Wd_Notes = "Performance Curve Power Data[kW]"

		# Primary Parameters List Value
		self.Wd_List_Value = array([1.74422, 1.92726, 2.04207, 2.13369, 2.2253 , 2.29353, 2.40834,
       2.52321, 2.63802, 2.70638, 2.79794, 2.91274, 3.00429, 3.09591,
       3.18746, 3.30227])
		# Primary Parameters
		self.tstart_Value = "2"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "2"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.dd_Value = "835"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.qatm_Value = "12"
		self.qatm_Notes = "Heat Loss Coefficient[W/K]"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.chkfail_Value = "0"
		self.chkfail_Notes = "Check Valve Fail Flag(0:Normal,1:Fail)"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_P2923B:
	def __init__(self):
		self.ID = 1175
		self.Name = "P2923B"
		self.Model = "PUMP_S_N"
		self.Notes = "Pump with Check Valve"

		# General Parameters
		self._NDT_Value = "16"
		self._NDT_Notes = "No. of Performance Curve Data Points"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.Vd_Value = "(16)"
		self.Vd_Notes = "Performance Curve Flow Rate Data[m3/h]"

		# Primary Parameters List Value
		self.Vd_List_Value = array([0.     , 1.21379, 1.79311, 2.4    , 3.00689, 3.61379, 4.22069,
       4.8    , 5.40689, 5.98621, 6.5931 , 7.2276 , 7.8069 , 8.4138 ,
       8.9931 , 9.5724 ])
		# Primary Parameters
		self.Hd_Value = "(16)"
		self.Hd_Notes = "Performance Curve Head Data[m]"

		# Primary Parameters List Value
		self.Hd_List_Value = array([48.8761, 49.6849, 50.0315, 50.1471, 50.1471, 49.916 , 49.6849,
       49.2227, 48.645 , 47.9517, 47.0273, 45.7563, 44.3697, 42.9832,
       41.3655, 39.5168])
		# Primary Parameters
		self.Wd_Value = "(16)"
		self.Wd_Notes = "Performance Curve Power Data[kW]"

		# Primary Parameters List Value
		self.Wd_List_Value = array([1.74422, 1.92726, 2.04207, 2.13369, 2.2253 , 2.29353, 2.40834,
       2.52321, 2.63802, 2.70638, 2.79794, 2.91274, 3.00429, 3.09591,
       3.18746, 3.30227])
		# Primary Parameters
		self.tstart_Value = "2"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "2"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.dd_Value = "835"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.qatm_Value = "12"
		self.qatm_Notes = "Heat Loss Coefficient[W/K]"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.chkfail_Value = "0"
		self.chkfail_Notes = "Check Valve Fail Flag(0:Normal,1:Fail)"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_P2924:
	def __init__(self):
		self.ID = 1176
		self.Name = "P2924"
		self.Model = "PUMP_RC"
		self.Notes = "Pump with Check Valve"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.tmove_Value = "5"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.Pd_Value = "5495"
		self.Pd_Notes = "Design Discharge Pressure[kPa]"

		# Primary Parameters
		self.Vd_Value = "0.498"
		self.Vd_Notes = "Design Flow Rate[m3/h]"

		# Primary Parameters
		self.Wd_Value = "4.104"
		self.Wd_Notes = "Design Power[kW]"

		# Primary Parameters
		self.Vs_Value = "0.5976"
		self.Vs_Notes = "Flow Rate at Zero Pressure[m3/h]"

		# Primary Parameters
		self.Ws_Value = "0"
		self.Ws_Notes = "Power at Zero Pressure[kW]"

		# Primary Parameters
		self.Pmax_Value = "6045"
		self.Pmax_Notes = "Max. Discharge Pressure[kPa]"

		# Primary Parameters
		self.tstart_Value = "2"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "2"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.dd_Value = "835"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.stopfl_Value = "0"
		self.stopfl_Notes = "Flow when Stopped(0:No,1:Yes)"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.chkfail_Value = "0"
		self.chkfail_Notes = "Check Valve Fail Flag(0:Normal,1:Fail)"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Stroke Start Value[-]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_P2931A:
	def __init__(self):
		self.ID = 1177
		self.Name = "P2931A"
		self.Model = "PUMP_S_N"
		self.Notes = "Pump with Check Valve"

		# General Parameters
		self._NDT_Value = "16"
		self._NDT_Notes = "No. of Performance Curve Data Points"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.Vd_Value = "(16)"
		self.Vd_Notes = "Performance Curve Flow Rate Data[m3/h]"

		# Primary Parameters List Value
		self.Vd_List_Value = array([ 0.     ,  2.4532 ,  4.9727 ,  7.4259 ,  8.95086, 10.6084 ,
       12.3986 , 14.8518 , 17.3713 , 19.8908 , 22.4103 , 24.9961 ,
       27.4493 , 32.4883 , 37.461  , 41.9696 ])
		# Primary Parameters
		self.Hd_Value = "(16)"
		self.Hd_Notes = "Performance Curve Head Data[m]"

		# Primary Parameters List Value
		self.Hd_List_Value = array([60.7673, 60.8403, 60.6055, 60.3689, 60.1054, 59.9995, 59.7437,
       59.1993, 58.5031, 57.8068, 57.1105, 55.8008, 54.4872, 51.4024,
       47.7002, 43.9846])
		# Primary Parameters
		self.Wd_Value = "(16)"
		self.Wd_Notes = "Performance Curve Power Data[kW]"

		# Primary Parameters List Value
		self.Wd_List_Value = array([3.93825, 4.12578, 4.46486, 4.80299, 4.97537, 5.30498, 5.32866,
       5.81928, 6.15836, 6.4965 , 6.83557, 7.02311, 7.21065, 7.58572,
       8.11138, 8.47983])
		# Primary Parameters
		self.tstart_Value = "2"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "2"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.dd_Value = "1000"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.qatm_Value = "12"
		self.qatm_Notes = "Heat Loss Coefficient[W/K]"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_P2931B:
	def __init__(self):
		self.ID = 1178
		self.Name = "P2931B"
		self.Model = "PUMP_S_N"
		self.Notes = "Pump with Check Valve"

		# General Parameters
		self._NDT_Value = "16"
		self._NDT_Notes = "No. of Performance Curve Data Points"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.Vd_Value = "(16)"
		self.Vd_Notes = "Performance Curve Flow Rate Data[m3/h]"

		# Primary Parameters List Value
		self.Vd_List_Value = array([ 0.     ,  2.4532 ,  4.9727 ,  7.4259 ,  8.95086, 10.6084 ,
       12.3986 , 14.8518 , 17.3713 , 19.8908 , 22.4103 , 24.9961 ,
       27.4493 , 32.4883 , 37.461  , 41.9696 ])
		# Primary Parameters
		self.Hd_Value = "(16)"
		self.Hd_Notes = "Performance Curve Head Data[m]"

		# Primary Parameters List Value
		self.Hd_List_Value = array([60.7673, 60.8403, 60.6055, 60.3689, 60.1054, 59.9995, 59.7437,
       59.1993, 58.5031, 57.8068, 57.1105, 55.8008, 54.4872, 51.4024,
       47.7002, 43.9846])
		# Primary Parameters
		self.Wd_Value = "(16)"
		self.Wd_Notes = "Performance Curve Power Data[kW]"

		# Primary Parameters List Value
		self.Wd_List_Value = array([3.93825, 4.12578, 4.46486, 4.80299, 4.97537, 5.30498, 5.32866,
       5.81928, 6.15836, 6.4965 , 6.83557, 7.02311, 7.21065, 7.58572,
       8.11138, 8.47983])
		# Primary Parameters
		self.tstart_Value = "2"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "2"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.dd_Value = "1000"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.qatm_Value = "12"
		self.qatm_Notes = "Heat Loss Coefficient[W/K]"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_P2941:
	def __init__(self):
		self.ID = 1179
		self.Name = "P2941"
		self.Model = "PUMP_S_N"
		self.Notes = "Pump with Check Valve"

		# General Parameters
		self._NDT_Value = "16"
		self._NDT_Notes = "No. of Performance Curve Data Points"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.Vd_Value = "(16)"
		self.Vd_Notes = "Performance Curve Flow Rate Data[m3/h]"

		# Primary Parameters List Value
		self.Vd_List_Value = array([  0.    ,  20.0272,  39.6705,  59.8481,  79.4882,  99.1251,
       118.765 , 128.848 , 138.927 , 149.54  , 159.088 , 169.168 ,
       179.237 , 199.386 , 219.525 , 239.655 ])
		# Primary Parameters
		self.Hd_Value = "(16)"
		self.Hd_Notes = "Performance Curve Head Data[m]"

		# Primary Parameters List Value
		self.Hd_List_Value = array([35.8443, 35.8936, 35.6417, 35.6924, 35.1393, 34.285 , 33.7318,
       33.1547, 32.2764, 31.7007, 30.821 , 29.9427, 28.1607, 25.5005,
       21.9366, 17.469 ])
		# Primary Parameters
		self.Wd_Value = "(16)"
		self.Wd_Notes = "Performance Curve Power Data[kW]"

		# Primary Parameters List Value
		self.Wd_List_Value = array([ 8.7, 10.2, 12. , 13.5, 14.7, 15.9, 16.8, 17.7, 18. , 18.3, 18.6,
       19.2, 19.5, 20.1, 20.7, 21.3])
		# Primary Parameters
		self.tstart_Value = "2"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "2"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.dd_Value = "1000"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.qatm_Value = "12"
		self.qatm_Notes = "Heat Loss Coefficient[W/K]"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.chkfail_Value = "0"
		self.chkfail_Notes = "Check Valve Fail Flag(0:Normal,1:Fail)"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_P2942A:
	def __init__(self):
		self.ID = 1180
		self.Name = "P2942A"
		self.Model = "PUMP_S_N"
		self.Notes = "Pump with Check Valve"

		# General Parameters
		self._NDT_Value = "16"
		self._NDT_Notes = "No. of Performance Curve Data Points"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.Vd_Value = "(16)"
		self.Vd_Notes = "Performance Curve Flow Rate Data[m3/h]"

		# Primary Parameters List Value
		self.Vd_List_Value = array([ 0.     ,  2.52344,  4.98047,  7.50391,  9.96094, 12.418  ,
       14.875  , 17.3984 , 19.9883 , 22.5117 , 24.9688 , 27.4922 ,
       30.0156 , 32.5391 , 37.5859 , 41.9688 ])
		# Primary Parameters
		self.Hd_Value = "(16)"
		self.Hd_Notes = "Performance Curve Head Data[m]"

		# Primary Parameters List Value
		self.Hd_List_Value = array([41.4508, 41.3415, 41.0755, 40.8108, 40.0785, 39.968 , 39.5466,
       38.971 , 38.3966, 37.6656, 36.9333, 36.0468, 34.8494, 33.652 ,
       31.1018, 28.0732])
		# Primary Parameters
		self.Wd_Value = "(16)"
		self.Wd_Notes = "Performance Curve Power Data[kW]"

		# Primary Parameters List Value
		self.Wd_List_Value = array([2.09991, 2.25442, 2.55893, 2.63831, 2.8677 , 3.02209, 3.25159,
       3.4811 , 3.7106 , 3.86511, 4.0945 , 4.249  , 4.40351, 4.55801,
       4.7919 , 5.02508])
		# Primary Parameters
		self.tstart_Value = "2"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "2"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.dd_Value = "1000"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.qatm_Value = "12"
		self.qatm_Notes = "Heat Loss Coefficient[W/K]"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.chkfail_Value = "0"
		self.chkfail_Notes = "Check Valve Fail Flag(0:Normal,1:Fail)"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_P2942B:
	def __init__(self):
		self.ID = 1181
		self.Name = "P2942B"
		self.Model = "PUMP_S_N"
		self.Notes = "Pump with Check Valve"

		# General Parameters
		self._NDT_Value = "16"
		self._NDT_Notes = "No. of Performance Curve Data Points"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.Vd_Value = "(16)"
		self.Vd_Notes = "Performance Curve Flow Rate Data[m3/h]"

		# Primary Parameters List Value
		self.Vd_List_Value = array([ 0.     ,  2.52344,  4.98047,  7.50391,  9.96094, 12.418  ,
       14.875  , 17.3984 , 19.9883 , 22.5117 , 24.9688 , 27.4922 ,
       30.0156 , 32.5391 , 37.5859 , 41.9688 ])
		# Primary Parameters
		self.Hd_Value = "(16)"
		self.Hd_Notes = "Performance Curve Head Data[m]"

		# Primary Parameters List Value
		self.Hd_List_Value = array([41.4508, 41.3415, 41.0755, 40.8108, 40.0785, 39.968 , 39.5466,
       38.971 , 38.3966, 37.6656, 36.9333, 36.0468, 34.8494, 33.652 ,
       31.1018, 28.0732])
		# Primary Parameters
		self.Wd_Value = "(16)"
		self.Wd_Notes = "Performance Curve Power Data[kW]"

		# Primary Parameters List Value
		self.Wd_List_Value = array([2.09991, 2.25442, 2.55893, 2.63831, 2.8677 , 3.02209, 3.25159,
       3.4811 , 3.7106 , 3.86511, 4.0945 , 4.249  , 4.40351, 4.55801,
       4.7919 , 5.02508])
		# Primary Parameters
		self.tstart_Value = "2"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "2"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.dd_Value = "1000"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.qatm_Value = "12"
		self.qatm_Notes = "Heat Loss Coefficient[W/K]"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.chkfail_Value = "0"
		self.chkfail_Notes = "Check Valve Fail Flag(0:Normal,1:Fail)"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_P2943A:
	def __init__(self):
		self.ID = 1182
		self.Name = "P2943A"
		self.Model = "PUMP_S_N"
		self.Notes = "Pump with Check Valve"

		# General Parameters
		self._NDT_Value = "16"
		self._NDT_Notes = "No. of Performance Curve Data Points"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.Vd_Value = "(16)"
		self.Vd_Notes = "Performance Curve Flow Rate Data[m3/h]"

		# Primary Parameters List Value
		self.Vd_List_Value = array([  0.     ,   9.89395,  19.7354 ,  29.8444 ,  39.4231 ,  49.2678 ,
        59.3801 ,  69.4908 ,  79.6031 ,  89.7153 ,  99.5633 , 109.677  ,
       120.059  , 129.907  , 140.024  , 146.681  ])
		# Primary Parameters
		self.Hd_Value = "(16)"
		self.Hd_Notes = "Performance Curve Head Data[m]"

		# Primary Parameters List Value
		self.Hd_List_Value = array([40.1208, 39.937 , 39.7498, 39.2573, 38.4497, 37.6453, 36.5356,
       35.7345, 34.6247, 33.515 , 32.0934, 30.675 , 28.9513, 27.5297,
       25.4941, 24.0331])
		# Primary Parameters
		self.Wd_Value = "(16)"
		self.Wd_Notes = "Performance Curve Power Data[kW]"

		# Primary Parameters List Value
		self.Wd_List_Value = array([ 5.66327,  6.28584,  6.60202,  7.07154,  7.38745,  7.85669,
        8.3262 ,  8.79572,  9.11217,  9.58142,  9.89787, 10.2143 ,
       10.5308 , 10.8472 , 10.8576 , 11.0177 ])
		# Primary Parameters
		self.tstart_Value = "2"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "2"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.dd_Value = "1000"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.qatm_Value = "12"
		self.qatm_Notes = "Heat Loss Coefficient[W/K]"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.chkfail_Value = "0"
		self.chkfail_Notes = "Check Valve Fail Flag(0:Normal,1:Fail)"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_P2943B:
	def __init__(self):
		self.ID = 1183
		self.Name = "P2943B"
		self.Model = "PUMP_S_N"
		self.Notes = "Pump with Check Valve"

		# General Parameters
		self._NDT_Value = "16"
		self._NDT_Notes = "No. of Performance Curve Data Points"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.Vd_Value = "(16)"
		self.Vd_Notes = "Performance Curve Flow Rate Data[m3/h]"

		# Primary Parameters List Value
		self.Vd_List_Value = array([  0.     ,   9.89395,  19.7354 ,  29.8444 ,  39.4231 ,  49.2678 ,
        59.3801 ,  69.4908 ,  79.6031 ,  89.7153 ,  99.5633 , 109.677  ,
       120.059  , 129.907  , 140.024  , 146.681  ])
		# Primary Parameters
		self.Hd_Value = "(16)"
		self.Hd_Notes = "Performance Curve Head Data[m]"

		# Primary Parameters List Value
		self.Hd_List_Value = array([40.1208, 39.937 , 39.7498, 39.2573, 38.4497, 37.6453, 36.5356,
       35.7345, 34.6247, 33.515 , 32.0934, 30.675 , 28.9513, 27.5297,
       25.4941, 24.0331])
		# Primary Parameters
		self.Wd_Value = "(16)"
		self.Wd_Notes = "Performance Curve Power Data[kW]"

		# Primary Parameters List Value
		self.Wd_List_Value = array([ 5.66327,  6.28584,  6.60202,  7.07154,  7.38745,  7.85669,
        8.3262 ,  8.79572,  9.11217,  9.58142,  9.89787, 10.2143 ,
       10.5308 , 10.8472 , 10.8576 , 11.0177 ])
		# Primary Parameters
		self.tstart_Value = "2"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "2"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.dd_Value = "1000"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.qatm_Value = "12"
		self.qatm_Notes = "Heat Loss Coefficient[W/K]"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.chkfail_Value = "0"
		self.chkfail_Notes = "Check Valve Fail Flag(0:Normal,1:Fail)"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_PC2001:
	def __init__(self):
		self.ID = 1184
		self.Name = "PC2001"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "50"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "80"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([36.,  0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "0"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_PC2120:
	def __init__(self):
		self.ID = 1185
		self.Name = "PC2120"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "100"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "300"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([1., 0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "0"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_PC21201A:
	def __init__(self):
		self.ID = 1186
		self.Name = "PC21201A"
		self.Model = "_DMHVC"
		self.Notes = "Manual Manipulator"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([1., 0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "0"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_PC21202A:
	def __init__(self):
		self.ID = 1187
		self.Name = "PC21202A"
		self.Model = "_DMHVC"
		self.Notes = "Manual Manipulator"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([1., 0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "0"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_PC2140:
	def __init__(self):
		self.ID = 1188
		self.Name = "PC2140"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "100"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "200"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([1., 0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "0"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_PC21401A:
	def __init__(self):
		self.ID = 1189
		self.Name = "PC21401A"
		self.Model = "_DMHVC"
		self.Notes = "Manual Manipulator"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([1., 0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "0"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_PC21402A:
	def __init__(self):
		self.ID = 1190
		self.Name = "PC21402A"
		self.Model = "_DMHVC"
		self.Notes = "Manual Manipulator"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([1., 0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "0"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_PC2150:
	def __init__(self):
		self.ID = 1191
		self.Name = "PC2150"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "50"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "80"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([1., 0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "0"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_PC2170:
	def __init__(self):
		self.ID = 1192
		self.Name = "PC2170"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "50"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "80"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([2., 0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_PC2180:
	def __init__(self):
		self.ID = 1193
		self.Name = "PC2180"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "30"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "50"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([2., 0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_PC2190:
	def __init__(self):
		self.ID = 1194
		self.Name = "PC2190"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "50"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "80"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([2., 0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_PC2205:
	def __init__(self):
		self.ID = 1195
		self.Name = "PC2205"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "50"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "80"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([50.,  0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_PC2211:
	def __init__(self):
		self.ID = 1196
		self.Name = "PC2211"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "30"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "80"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([70.,  0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "1"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_PC2230:
	def __init__(self):
		self.ID = 1197
		self.Name = "PC2230"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "35"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "50"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([35.,  0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "0"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_PC2260A:
	def __init__(self):
		self.ID = 1198
		self.Name = "PC2260A"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "35"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "60"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([1., 0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_PC2260B:
	def __init__(self):
		self.ID = 1199
		self.Name = "PC2260B"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "35"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "80"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([1., 0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "0"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_PC2263:
	def __init__(self):
		self.ID = 1200
		self.Name = "PC2263"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "35"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "80"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([10.,  0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_PC2280:
	def __init__(self):
		self.ID = 1201
		self.Name = "PC2280"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "30"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "80"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([35.,  0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "0"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_PC2281:
	def __init__(self):
		self.ID = 1202
		self.Name = "PC2281"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "100"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "300"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([50.,  0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "0"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_PC2282:
	def __init__(self):
		self.ID = 1203
		self.Name = "PC2282"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "100"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "200"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([35.,  0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "0"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_PC2291:
	def __init__(self):
		self.ID = 1204
		self.Name = "PC2291"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "30"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "80"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([35.,  0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_PC2292:
	def __init__(self):
		self.ID = 1205
		self.Name = "PC2292"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "50"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "80"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([35.,  0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_PC2310:
	def __init__(self):
		self.ID = 1206
		self.Name = "PC2310"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "35"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "100"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([0.5, 0. ])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "0"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_PC2311:
	def __init__(self):
		self.ID = 1207
		self.Name = "PC2311"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "35"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "100"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([2., 0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_PC2320:
	def __init__(self):
		self.ID = 1208
		self.Name = "PC2320"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "50"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "100"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([0.5, 0. ])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "0"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_PC2324:
	def __init__(self):
		self.ID = 1209
		self.Name = "PC2324"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "100"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "200"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([3000.,    0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "0"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_PC2500:
	def __init__(self):
		self.ID = 1210
		self.Name = "PC2500"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "100"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "200"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([1000.,    0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_PC25001A:
	def __init__(self):
		self.ID = 1211
		self.Name = "PC25001A"
		self.Model = "_DMHVC"
		self.Notes = "Manual Manipulator"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([1., 0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "0"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_PC25002A:
	def __init__(self):
		self.ID = 1212
		self.Name = "PC25002A"
		self.Model = "_DMHVC"
		self.Notes = "Manual Manipulator"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([1., 0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "0"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_PC2554:
	def __init__(self):
		self.ID = 1213
		self.Name = "PC2554"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "30"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "60"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([10.,  0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "0"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_PC2591:
	def __init__(self):
		self.ID = 1214
		self.Name = "PC2591"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "30"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "50"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([10.,  0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_PC2901:
	def __init__(self):
		self.ID = 1215
		self.Name = "PC2901"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "35"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "80"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([2000.,    0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_PC2902:
	def __init__(self):
		self.ID = 1216
		self.Name = "PC2902"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "50"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "100"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([2., 0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "0"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_PC2903:
	def __init__(self):
		self.ID = 1217
		self.Name = "PC2903"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "100"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "300"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([2000.,    0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "0"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_PC2911:
	def __init__(self):
		self.ID = 1218
		self.Name = "PC2911"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "100"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "200"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([15.,  0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0.05"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_PC2912:
	def __init__(self):
		self.ID = 1219
		self.Name = "PC2912"
		self.Model = "_DONOFFC"
		self.Notes = "ON/OFF Controller"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([15.,  0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.EHL_Value = "1"
		self.EHL_Notes = "Upper Limit of Deviation[%]"

		# Primary Parameters
		self.ELL_Value = "1"
		self.ELL_Notes = "Lower Limit of Deviation[%]"

		# Primary Parameters
		self.CS_Value = "0"
		self.CS_Notes = "On/Off Hysteresis[%]"

		# Primary Parameters
		self.PVTRK_Value = "0"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.MVTYPE_Value = "0"
		self.MVTYPE_Notes = "Output Type(0:2-position,1:3-position)"

		# Primary Parameters
		self.INCDEC_Value = "0"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.MVSPAN_Value = "1"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

class Block_PC2924:
	def __init__(self):
		self.ID = 1220
		self.Name = "PC2924"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "30"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "60"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([200.,   0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "1"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_PC2925:
	def __init__(self):
		self.ID = 1221
		self.Name = "PC2925"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "100"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "200"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([200.,   0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "1"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_PC2926:
	def __init__(self):
		self.ID = 1222
		self.Name = "PC2926"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "100"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "200"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([250.,   0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "1"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_PC2932:
	def __init__(self):
		self.ID = 1223
		self.Name = "PC2932"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "100"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "300"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([6., 0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_PC2952:
	def __init__(self):
		self.ID = 1224
		self.Name = "PC2952"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "30"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "50"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([5., 0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_PC2953:
	def __init__(self):
		self.ID = 1225
		self.Name = "PC2953"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "30"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "50"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([2., 0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_PC2957:
	def __init__(self):
		self.ID = 1226
		self.Name = "PC2957"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "30"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "50"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([2., 0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "0"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_PDT2231:
	def __init__(self):
		self.ID = 1227
		self.Name = "PDT2231"
		self.Model = "TRANSPUD"
		self.Notes = "Pressure Gauge(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.dPl_Value = "0"
		self.dPl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.dPh_Value = "1"
		self.dPh_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.dPfail_Value = "0"
		self.dPfail_Notes = "DP on Failure(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "5"
		self.unit_Notes = "Unit of Indication(MPa,kPa,bar,mbar,..)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.dPD_Value = "0"
		self.dPD_Notes = "Display dP(0:Normal,1:Absolute value)"

class Block_PDT2236A:
	def __init__(self):
		self.ID = 1228
		self.Name = "PDT2236A"
		self.Model = "TRANSPSD"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.dPl_Value = "-0.5"
		self.dPl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.dPh_Value = "1.5"
		self.dPh_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.dPfail_Value = "0"
		self.dPfail_Notes = "DP on Failure(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "5"
		self.unit_Notes = "Unit of Indication(MPa,kPa,bar,mbar,..)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.dPD_Value = "0"
		self.dPD_Notes = "Display dP(0:Normal,1:Absolute value)"

class Block_PDT2236B:
	def __init__(self):
		self.ID = 1229
		self.Name = "PDT2236B"
		self.Model = "TRANSPSD"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.dPl_Value = "-0.5"
		self.dPl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.dPh_Value = "1.5"
		self.dPh_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.dPfail_Value = "0"
		self.dPfail_Notes = "DP on Failure(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "5"
		self.unit_Notes = "Unit of Indication(MPa,kPa,bar,mbar,..)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.dPD_Value = "0"
		self.dPD_Notes = "Display dP(0:Normal,1:Absolute value)"

class Block_PDT2264:
	def __init__(self):
		self.ID = 1230
		self.Name = "PDT2264"
		self.Model = "TRANSPSD"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.dPl_Value = "0"
		self.dPl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.dPh_Value = "1000"
		self.dPh_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.dPfail_Value = "0"
		self.dPfail_Notes = "DP on Failure(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "7"
		self.unit_Notes = "Unit of Indication(MPa,kPa,bar,mbar,..)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.dPD_Value = "0"
		self.dPD_Notes = "Display dP(0:Normal,1:Absolute value)"

class Block_PDT2265A:
	def __init__(self):
		self.ID = 1231
		self.Name = "PDT2265A"
		self.Model = "TRANSPSD"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.dPl_Value = "0"
		self.dPl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.dPh_Value = "1"
		self.dPh_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.dPfail_Value = "0"
		self.dPfail_Notes = "DP on Failure(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "5"
		self.unit_Notes = "Unit of Indication(MPa,kPa,bar,mbar,..)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.dPD_Value = "0"
		self.dPD_Notes = "Display dP(0:Normal,1:Absolute value)"

class Block_PDT2265B:
	def __init__(self):
		self.ID = 1232
		self.Name = "PDT2265B"
		self.Model = "TRANSPSD"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.dPl_Value = "0"
		self.dPl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.dPh_Value = "1"
		self.dPh_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.dPfail_Value = "0"
		self.dPfail_Notes = "DP on Failure(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "5"
		self.unit_Notes = "Unit of Indication(MPa,kPa,bar,mbar,..)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.dPD_Value = "0"
		self.dPD_Notes = "Display dP(0:Normal,1:Absolute value)"

class Block_PDT2283:
	def __init__(self):
		self.ID = 1233
		self.Name = "PDT2283"
		self.Model = "TRANSPUD"
		self.Notes = "Pressure Gauge(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.dPl_Value = "0"
		self.dPl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.dPh_Value = "1000"
		self.dPh_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.dPfail_Value = "0"
		self.dPfail_Notes = "DP on Failure(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "7"
		self.unit_Notes = "Unit of Indication(MPa,kPa,bar,mbar,..)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.dPD_Value = "0"
		self.dPD_Notes = "Display dP(0:Normal,1:Absolute value)"

class Block_PDT2312:
	def __init__(self):
		self.ID = 1234
		self.Name = "PDT2312"
		self.Model = "TRANSPSD"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.dPl_Value = "0"
		self.dPl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.dPh_Value = "1000"
		self.dPh_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.dPfail_Value = "0"
		self.dPfail_Notes = "DP on Failure(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "7"
		self.unit_Notes = "Unit of Indication(MPa,kPa,bar,mbar,..)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.dPD_Value = "0"
		self.dPD_Notes = "Display dP(0:Normal,1:Absolute value)"

class Block_PDT2313:
	def __init__(self):
		self.ID = 1235
		self.Name = "PDT2313"
		self.Model = "TRANSPSD"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.dPl_Value = "0"
		self.dPl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.dPh_Value = "1000"
		self.dPh_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.dPfail_Value = "0"
		self.dPfail_Notes = "DP on Failure(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "7"
		self.unit_Notes = "Unit of Indication(MPa,kPa,bar,mbar,..)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.dPD_Value = "0"
		self.dPD_Notes = "Display dP(0:Normal,1:Absolute value)"

class Block_PDT2324:
	def __init__(self):
		self.ID = 1236
		self.Name = "PDT2324"
		self.Model = "TRANSPUD"
		self.Notes = "Pressure Gauge(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.dPl_Value = "0"
		self.dPl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.dPh_Value = "3000"
		self.dPh_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.dPfail_Value = "0"
		self.dPfail_Notes = "DP on Failure(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "7"
		self.unit_Notes = "Unit of Indication(MPa,kPa,bar,mbar,..)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.dPD_Value = "0"
		self.dPD_Notes = "Display dP(0:Normal,1:Absolute value)"

class Block_PDT2512:
	def __init__(self):
		self.ID = 1237
		self.Name = "PDT2512"
		self.Model = "TRANSPSD"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.dPl_Value = "0"
		self.dPl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.dPh_Value = "1000"
		self.dPh_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.dPfail_Value = "0"
		self.dPfail_Notes = "DP on Failure(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "7"
		self.unit_Notes = "Unit of Indication(MPa,kPa,bar,mbar,..)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.dPD_Value = "0"
		self.dPD_Notes = "Display dP(0:Normal,1:Absolute value)"

class Block_PDT2557:
	def __init__(self):
		self.ID = 1238
		self.Name = "PDT2557"
		self.Model = "TRANSPSD"
		self.Notes = "DP Gauge(for Streams)"

		# Primary Parameters
		self.dPl_Value = "0"
		self.dPl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.dPh_Value = "350"
		self.dPh_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.dPfail_Value = "0"
		self.dPfail_Notes = "DP on Failure(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "5"
		self.unit_Notes = "Unit of Indication(MPa,kPa,bar,mbar,..)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.dPD_Value = "0"
		self.dPD_Notes = "Display dP(0:Normal,1:Absolute value)"

class Block_PDT2913:
	def __init__(self):
		self.ID = 1239
		self.Name = "PDT2913"
		self.Model = "TRANSPSD"
		self.Notes = "DP Gauge(for Streams)"

		# Primary Parameters
		self.dPl_Value = "0"
		self.dPl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.dPh_Value = "20"
		self.dPh_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.dPfail_Value = "0"
		self.dPfail_Notes = "DP on Failure(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "5"
		self.unit_Notes = "Unit of Indication(MPa,kPa,bar,mbar,..)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.dPD_Value = "0"
		self.dPD_Notes = "Display dP(0:Normal,1:Absolute value)"

class Block_PDT2923:
	def __init__(self):
		self.ID = 1240
		self.Name = "PDT2923"
		self.Model = "TRANSPSD"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.dPl_Value = "0"
		self.dPl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.dPh_Value = "5"
		self.dPh_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.dPfail_Value = "0"
		self.dPfail_Notes = "DP on Failure(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "5"
		self.unit_Notes = "Unit of Indication(MPa,kPa,bar,mbar,..)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.dPD_Value = "0"
		self.dPD_Notes = "Display dP(0:Normal,1:Absolute value)"

class Block_PDT2925:
	def __init__(self):
		self.ID = 1241
		self.Name = "PDT2925"
		self.Model = "TRANSPSD"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.dPl_Value = "0"
		self.dPl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.dPh_Value = "5"
		self.dPh_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.dPfail_Value = "0"
		self.dPfail_Notes = "DP on Failure(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "5"
		self.unit_Notes = "Unit of Indication(MPa,kPa,bar,mbar,..)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.dPD_Value = "0"
		self.dPD_Notes = "Display dP(0:Normal,1:Absolute value)"

class Block_PG2001:
	def __init__(self):
		self.ID = 1242
		self.Name = "PG2001"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "36"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2003A:
	def __init__(self):
		self.ID = 1243
		self.Name = "PG2003A"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "50"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2003B:
	def __init__(self):
		self.ID = 1244
		self.Name = "PG2003B"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "50"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2004:
	def __init__(self):
		self.ID = 1245
		self.Name = "PG2004"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "20"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2005A:
	def __init__(self):
		self.ID = 1246
		self.Name = "PG2005A"
		self.Model = "TRANSPUG"
		self.Notes = "Pressure Gauge(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "30"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2005B:
	def __init__(self):
		self.ID = 1247
		self.Name = "PG2005B"
		self.Model = "TRANSPUG"
		self.Notes = "Pressure Gauge(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "30"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2006A:
	def __init__(self):
		self.ID = 1248
		self.Name = "PG2006A"
		self.Model = "TRANSPUG"
		self.Notes = "Pressure Gauge(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "30"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2006B:
	def __init__(self):
		self.ID = 1249
		self.Name = "PG2006B"
		self.Model = "TRANSPUG"
		self.Notes = "Pressure Gauge(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "30"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2007:
	def __init__(self):
		self.ID = 1250
		self.Name = "PG2007"
		self.Model = "TRANSPUG"
		self.Notes = "Pressure Gauge(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "30"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2111:
	def __init__(self):
		self.ID = 1251
		self.Name = "PG2111"
		self.Model = "TRANSPUG"
		self.Notes = "Pressure Gauge(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "2"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2121:
	def __init__(self):
		self.ID = 1252
		self.Name = "PG2121"
		self.Model = "TRANSPUG"
		self.Notes = "Pressure Gauge(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "2"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2132A:
	def __init__(self):
		self.ID = 1253
		self.Name = "PG2132A"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "70"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2132B:
	def __init__(self):
		self.ID = 1254
		self.Name = "PG2132B"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "70"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2143:
	def __init__(self):
		self.ID = 1255
		self.Name = "PG2143"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "2"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2144A:
	def __init__(self):
		self.ID = 1256
		self.Name = "PG2144A"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "70"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2144B:
	def __init__(self):
		self.ID = 1257
		self.Name = "PG2144B"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "70"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2144C:
	def __init__(self):
		self.ID = 1258
		self.Name = "PG2144C"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "0"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2151:
	def __init__(self):
		self.ID = 1259
		self.Name = "PG2151"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "2"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2153A:
	def __init__(self):
		self.ID = 1260
		self.Name = "PG2153A"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "70"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2153B:
	def __init__(self):
		self.ID = 1261
		self.Name = "PG2153B"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "70"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2162:
	def __init__(self):
		self.ID = 1262
		self.Name = "PG2162"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "6"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2172:
	def __init__(self):
		self.ID = 1263
		self.Name = "PG2172"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "6"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2172B:
	def __init__(self):
		self.ID = 1264
		self.Name = "PG2172B"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "0"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2211:
	def __init__(self):
		self.ID = 1265
		self.Name = "PG2211"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "70"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2212A:
	def __init__(self):
		self.ID = 1266
		self.Name = "PG2212A"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "70"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2212B:
	def __init__(self):
		self.ID = 1267
		self.Name = "PG2212B"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "70"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2213:
	def __init__(self):
		self.ID = 1268
		self.Name = "PG2213"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "70"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2218:
	def __init__(self):
		self.ID = 1269
		self.Name = "PG2218"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "150"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2232A:
	def __init__(self):
		self.ID = 1270
		self.Name = "PG2232A"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "35"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2232B:
	def __init__(self):
		self.ID = 1271
		self.Name = "PG2232B"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "35"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2233A:
	def __init__(self):
		self.ID = 1272
		self.Name = "PG2233A"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "35"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2233B:
	def __init__(self):
		self.ID = 1273
		self.Name = "PG2233B"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "35"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2234A:
	def __init__(self):
		self.ID = 1274
		self.Name = "PG2234A"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "4"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2234B:
	def __init__(self):
		self.ID = 1275
		self.Name = "PG2234B"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "4"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2235:
	def __init__(self):
		self.ID = 1276
		self.Name = "PG2235"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "35"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2238:
	def __init__(self):
		self.ID = 1277
		self.Name = "PG2238"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "150"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2239:
	def __init__(self):
		self.ID = 1278
		self.Name = "PG2239"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "70"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2262:
	def __init__(self):
		self.ID = 1279
		self.Name = "PG2262"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "1"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2263:
	def __init__(self):
		self.ID = 1280
		self.Name = "PG2263"
		self.Model = "TRANSPUG"
		self.Notes = "Pressure Gauge(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "10"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2267:
	def __init__(self):
		self.ID = 1281
		self.Name = "PG2267"
		self.Model = "TRANSPUG"
		self.Notes = "Pressure Gauge(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "35"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2269:
	def __init__(self):
		self.ID = 1282
		self.Name = "PG2269"
		self.Model = "TRANSPUG"
		self.Notes = "Pressure Gauge(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "4"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2272A:
	def __init__(self):
		self.ID = 1283
		self.Name = "PG2272A"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "100"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2272B:
	def __init__(self):
		self.ID = 1284
		self.Name = "PG2272B"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "100"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2273:
	def __init__(self):
		self.ID = 1285
		self.Name = "PG2273"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "150"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2282A:
	def __init__(self):
		self.ID = 1286
		self.Name = "PG2282A"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "100"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2282B:
	def __init__(self):
		self.ID = 1287
		self.Name = "PG2282B"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "100"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2283A:
	def __init__(self):
		self.ID = 1288
		self.Name = "PG2283A"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "50"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2283B:
	def __init__(self):
		self.ID = 1289
		self.Name = "PG2283B"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "50"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2285:
	def __init__(self):
		self.ID = 1290
		self.Name = "PG2285"
		self.Model = "TRANSPUG"
		self.Notes = "Pressure Gauge(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "70"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2286:
	def __init__(self):
		self.ID = 1291
		self.Name = "PG2286"
		self.Model = "TRANSPUG"
		self.Notes = "Pressure Gauge(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "35"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2289:
	def __init__(self):
		self.ID = 1292
		self.Name = "PG2289"
		self.Model = "TRANSPUG"
		self.Notes = "Pressure Gauge(for Streams)"

		# General Parameters
		self._VTYPE_Value = "1"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "35"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.jv_Value = "11"
		self.jv_Notes = "Element Number (>=1)"

class Block_PG2290:
	def __init__(self):
		self.ID = 1293
		self.Name = "PG2290"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "50"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2293A:
	def __init__(self):
		self.ID = 1294
		self.Name = "PG2293A"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "100"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2293B:
	def __init__(self):
		self.ID = 1295
		self.Name = "PG2293B"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "100"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2294:
	def __init__(self):
		self.ID = 1296
		self.Name = "PG2294"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "35"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2295:
	def __init__(self):
		self.ID = 1297
		self.Name = "PG2295"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "6"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2297:
	def __init__(self):
		self.ID = 1298
		self.Name = "PG2297"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "100"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2321:
	def __init__(self):
		self.ID = 1299
		self.Name = "PG2321"
		self.Model = "TRANSPUG"
		self.Notes = "Pressure Gauge(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "0.4"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2322:
	def __init__(self):
		self.ID = 1300
		self.Name = "PG2322"
		self.Model = "TRANSPUG"
		self.Notes = "Pressure Gauge(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "0.4"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2325:
	def __init__(self):
		self.ID = 1301
		self.Name = "PG2325"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "6"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2326:
	def __init__(self):
		self.ID = 1302
		self.Name = "PG2326"
		self.Model = "TRANSPUG"
		self.Notes = "Pressure Gauge(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "4"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2328:
	def __init__(self):
		self.ID = 1303
		self.Name = "PG2328"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "6"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2502:
	def __init__(self):
		self.ID = 1304
		self.Name = "PG2502"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "2"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2511A:
	def __init__(self):
		self.ID = 1305
		self.Name = "PG2511A"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "10"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2511B:
	def __init__(self):
		self.ID = 1306
		self.Name = "PG2511B"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "10"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2551A:
	def __init__(self):
		self.ID = 1307
		self.Name = "PG2551A"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "10"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2551B:
	def __init__(self):
		self.ID = 1308
		self.Name = "PG2551B"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "10"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2552A:
	def __init__(self):
		self.ID = 1309
		self.Name = "PG2552A"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "6"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2552B:
	def __init__(self):
		self.ID = 1310
		self.Name = "PG2552B"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "6"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2901A:
	def __init__(self):
		self.ID = 1311
		self.Name = "PG2901A"
		self.Model = "TRANSPUG"
		self.Notes = "Pressure Gauge(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "6"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2901B:
	def __init__(self):
		self.ID = 1312
		self.Name = "PG2901B"
		self.Model = "TRANSPUG"
		self.Notes = "Pressure Gauge(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "4"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2904:
	def __init__(self):
		self.ID = 1313
		self.Name = "PG2904"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "2"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2911A:
	def __init__(self):
		self.ID = 1314
		self.Name = "PG2911A"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "6"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2911B:
	def __init__(self):
		self.ID = 1315
		self.Name = "PG2911B"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "6"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2912:
	def __init__(self):
		self.ID = 1316
		self.Name = "PG2912"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "15"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2913:
	def __init__(self):
		self.ID = 1317
		self.Name = "PG2913"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "15"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2914:
	def __init__(self):
		self.ID = 1318
		self.Name = "PG2914"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "15"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2921A:
	def __init__(self):
		self.ID = 1319
		self.Name = "PG2921A"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "15"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2921B:
	def __init__(self):
		self.ID = 1320
		self.Name = "PG2921B"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "15"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2922:
	def __init__(self):
		self.ID = 1321
		self.Name = "PG2922"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "100"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2923:
	def __init__(self):
		self.ID = 1322
		self.Name = "PG2923"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "200"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2924:
	def __init__(self):
		self.ID = 1323
		self.Name = "PG2924"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "200"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2926A:
	def __init__(self):
		self.ID = 1324
		self.Name = "PG2926A"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "70"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2926B:
	def __init__(self):
		self.ID = 1325
		self.Name = "PG2926B"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "70"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2927:
	def __init__(self):
		self.ID = 1326
		self.Name = "PG2927"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "250"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2929A:
	def __init__(self):
		self.ID = 1327
		self.Name = "PG2929A"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "100"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2929B:
	def __init__(self):
		self.ID = 1328
		self.Name = "PG2929B"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "100"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2935A:
	def __init__(self):
		self.ID = 1329
		self.Name = "PG2935A"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "10"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2935B:
	def __init__(self):
		self.ID = 1330
		self.Name = "PG2935B"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "10"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2937:
	def __init__(self):
		self.ID = 1331
		self.Name = "PG2937"
		self.Model = "TRANSPUG"
		self.Notes = "Pressure Gauge(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "1"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2943:
	def __init__(self):
		self.ID = 1332
		self.Name = "PG2943"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "15"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2945:
	def __init__(self):
		self.ID = 1333
		self.Name = "PG2945"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "6"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2946A:
	def __init__(self):
		self.ID = 1334
		self.Name = "PG2946A"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "10"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2946B:
	def __init__(self):
		self.ID = 1335
		self.Name = "PG2946B"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "10"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2947A:
	def __init__(self):
		self.ID = 1336
		self.Name = "PG2947A"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "6"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PG2947B:
	def __init__(self):
		self.ID = 1337
		self.Name = "PG2947B"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "6"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PM2002A:
	def __init__(self):
		self.ID = 1338
		self.Name = "PM2002A"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_PM2002B:
	def __init__(self):
		self.ID = 1339
		self.Name = "PM2002B"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_PM2103A:
	def __init__(self):
		self.ID = 1340
		self.Name = "PM2103A"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_PM2103B:
	def __init__(self):
		self.ID = 1341
		self.Name = "PM2103B"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_PM2104A:
	def __init__(self):
		self.ID = 1342
		self.Name = "PM2104A"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_PM2104B:
	def __init__(self):
		self.ID = 1343
		self.Name = "PM2104B"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_PM2104C:
	def __init__(self):
		self.ID = 1344
		self.Name = "PM2104C"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_PM2105A:
	def __init__(self):
		self.ID = 1345
		self.Name = "PM2105A"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_PM2105B:
	def __init__(self):
		self.ID = 1346
		self.Name = "PM2105B"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_PM2107:
	def __init__(self):
		self.ID = 1347
		self.Name = "PM2107"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_PM2107B:
	def __init__(self):
		self.ID = 1348
		self.Name = "PM2107B"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_PM2109:
	def __init__(self):
		self.ID = 1349
		self.Name = "PM2109"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_PM2110:
	def __init__(self):
		self.ID = 1350
		self.Name = "PM2110"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_PM2203A:
	def __init__(self):
		self.ID = 1351
		self.Name = "PM2203A"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_PM2203B:
	def __init__(self):
		self.ID = 1352
		self.Name = "PM2203B"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_PM2208A:
	def __init__(self):
		self.ID = 1353
		self.Name = "PM2208A"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_PM2208B:
	def __init__(self):
		self.ID = 1354
		self.Name = "PM2208B"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_PM2209A:
	def __init__(self):
		self.ID = 1355
		self.Name = "PM2209A"
		self.Model = "MotorUTIL"
		self.Notes = "motor operated valve utility"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_PM2209B:
	def __init__(self):
		self.ID = 1356
		self.Name = "PM2209B"
		self.Model = "MotorUTIL"
		self.Notes = "motor operated valve utility"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_PM2211A:
	def __init__(self):
		self.ID = 1357
		self.Name = "PM2211A"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_PM2211B:
	def __init__(self):
		self.ID = 1358
		self.Name = "PM2211B"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_PM2501A:
	def __init__(self):
		self.ID = 1359
		self.Name = "PM2501A"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_PM2501B:
	def __init__(self):
		self.ID = 1360
		self.Name = "PM2501B"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_PM2502A:
	def __init__(self):
		self.ID = 1361
		self.Name = "PM2502A"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_PM2502B:
	def __init__(self):
		self.ID = 1362
		self.Name = "PM2502B"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_PM2511A:
	def __init__(self):
		self.ID = 1363
		self.Name = "PM2511A"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_PM2511B:
	def __init__(self):
		self.ID = 1364
		self.Name = "PM2511B"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_PM2911A:
	def __init__(self):
		self.ID = 1365
		self.Name = "PM2911A"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_PM2911B:
	def __init__(self):
		self.ID = 1366
		self.Name = "PM2911B"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_PM2921A:
	def __init__(self):
		self.ID = 1367
		self.Name = "PM2921A"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_PM2921B:
	def __init__(self):
		self.ID = 1368
		self.Name = "PM2921B"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_PM2922A:
	def __init__(self):
		self.ID = 1369
		self.Name = "PM2922A"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_PM2922B:
	def __init__(self):
		self.ID = 1370
		self.Name = "PM2922B"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_PM2923A:
	def __init__(self):
		self.ID = 1371
		self.Name = "PM2923A"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_PM2923B:
	def __init__(self):
		self.ID = 1372
		self.Name = "PM2923B"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_PM2924:
	def __init__(self):
		self.ID = 1373
		self.Name = "PM2924"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_PM2931A:
	def __init__(self):
		self.ID = 1374
		self.Name = "PM2931A"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_PM2931B:
	def __init__(self):
		self.ID = 1375
		self.Name = "PM2931B"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_PM2941:
	def __init__(self):
		self.ID = 1376
		self.Name = "PM2941"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_PM2942A:
	def __init__(self):
		self.ID = 1377
		self.Name = "PM2942A"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_PM2942B:
	def __init__(self):
		self.ID = 1378
		self.Name = "PM2942B"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_PM2943A:
	def __init__(self):
		self.ID = 1379
		self.Name = "PM2943A"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_PM2943B:
	def __init__(self):
		self.ID = 1380
		self.Name = "PM2943B"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_PT2001:
	def __init__(self):
		self.ID = 1381
		self.Name = "PT2001"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "36"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2110:
	def __init__(self):
		self.ID = 1382
		self.Name = "PT2110"
		self.Model = "TRANSPUG"
		self.Notes = "Pressure Gauge(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "4"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2120:
	def __init__(self):
		self.ID = 1383
		self.Name = "PT2120"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "1"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2130A:
	def __init__(self):
		self.ID = 1384
		self.Name = "PT2130A"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "70"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2130B:
	def __init__(self):
		self.ID = 1385
		self.Name = "PT2130B"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "70"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2140:
	def __init__(self):
		self.ID = 1386
		self.Name = "PT2140"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "1"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2150:
	def __init__(self):
		self.ID = 1387
		self.Name = "PT2150"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "1"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2170:
	def __init__(self):
		self.ID = 1388
		self.Name = "PT2170"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "2"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2180:
	def __init__(self):
		self.ID = 1389
		self.Name = "PT2180"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "2"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2190:
	def __init__(self):
		self.ID = 1390
		self.Name = "PT2190"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "2"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2201:
	def __init__(self):
		self.ID = 1391
		self.Name = "PT2201"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "70"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2203:
	def __init__(self):
		self.ID = 1392
		self.Name = "PT2203"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "50"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2205:
	def __init__(self):
		self.ID = 1393
		self.Name = "PT2205"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "50"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2210:
	def __init__(self):
		self.ID = 1394
		self.Name = "PT2210"
		self.Model = "TRANSPUG"
		self.Notes = "Pressure Gauge(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "50"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2211:
	def __init__(self):
		self.ID = 1395
		self.Name = "PT2211"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "70"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2230:
	def __init__(self):
		self.ID = 1396
		self.Name = "PT2230"
		self.Model = "TRANSPUG"
		self.Notes = "Pressure Gauge(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "35"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2260A:
	def __init__(self):
		self.ID = 1397
		self.Name = "PT2260A"
		self.Model = "TRANSPUG"
		self.Notes = "Pressure Gauge(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "1"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2260B:
	def __init__(self):
		self.ID = 1398
		self.Name = "PT2260B"
		self.Model = "TRANSPUG"
		self.Notes = "Pressure Gauge(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "1"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2261:
	def __init__(self):
		self.ID = 1399
		self.Name = "PT2261"
		self.Model = "TRANSPUG"
		self.Notes = "Pressure Gauge(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "1"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2262:
	def __init__(self):
		self.ID = 1400
		self.Name = "PT2262"
		self.Model = "TRANSPUG"
		self.Notes = "Pressure Gauge(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "35"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2263:
	def __init__(self):
		self.ID = 1401
		self.Name = "PT2263"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "10"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2270:
	def __init__(self):
		self.ID = 1402
		self.Name = "PT2270"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "50"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2280:
	def __init__(self):
		self.ID = 1403
		self.Name = "PT2280"
		self.Model = "TRANSPUG"
		self.Notes = "Pressure Gauge(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "35"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2281:
	def __init__(self):
		self.ID = 1404
		self.Name = "PT2281"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "50"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2282:
	def __init__(self):
		self.ID = 1405
		self.Name = "PT2282"
		self.Model = "TRANSPUG"
		self.Notes = "Pressure Gauge(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "35"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2291:
	def __init__(self):
		self.ID = 1406
		self.Name = "PT2291"
		self.Model = "TRANSPUG"
		self.Notes = "Pressure Gauge(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "35"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2292:
	def __init__(self):
		self.ID = 1407
		self.Name = "PT2292"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "35"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2310:
	def __init__(self):
		self.ID = 1408
		self.Name = "PT2310"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "0.5"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2311:
	def __init__(self):
		self.ID = 1409
		self.Name = "PT2311"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "2"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2320:
	def __init__(self):
		self.ID = 1410
		self.Name = "PT2320"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "0.5"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2500:
	def __init__(self):
		self.ID = 1411
		self.Name = "PT2500"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "1000"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "12"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2501A:
	def __init__(self):
		self.ID = 1412
		self.Name = "PT2501A"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "1"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2501B:
	def __init__(self):
		self.ID = 1413
		self.Name = "PT2501B"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "1"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2554:
	def __init__(self):
		self.ID = 1414
		self.Name = "PT2554"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "10"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2555:
	def __init__(self):
		self.ID = 1415
		self.Name = "PT2555"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "350"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2556:
	def __init__(self):
		self.ID = 1416
		self.Name = "PT2556"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "350"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2901:
	def __init__(self):
		self.ID = 1417
		self.Name = "PT2901"
		self.Model = "TRANSPUG"
		self.Notes = "Pressure Gauge(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "2000"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "12"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2902:
	def __init__(self):
		self.ID = 1418
		self.Name = "PT2902"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "2"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2903:
	def __init__(self):
		self.ID = 1419
		self.Name = "PT2903"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "2000"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "12"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2904:
	def __init__(self):
		self.ID = 1420
		self.Name = "PT2904"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "1"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2911:
	def __init__(self):
		self.ID = 1421
		self.Name = "PT2911"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "15"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2921:
	def __init__(self):
		self.ID = 1422
		self.Name = "PT2921"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "10"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2922:
	def __init__(self):
		self.ID = 1423
		self.Name = "PT2922"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "35"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2924:
	def __init__(self):
		self.ID = 1424
		self.Name = "PT2924"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "55"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2931:
	def __init__(self):
		self.ID = 1425
		self.Name = "PT2931"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "70"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2932:
	def __init__(self):
		self.ID = 1426
		self.Name = "PT2932"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "6"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2941:
	def __init__(self):
		self.ID = 1427
		self.Name = "PT2941"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "6"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2942:
	def __init__(self):
		self.ID = 1428
		self.Name = "PT2942"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "6"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2951:
	def __init__(self):
		self.ID = 1429
		self.Name = "PT2951"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "10"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2952:
	def __init__(self):
		self.ID = 1430
		self.Name = "PT2952"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "5"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2953:
	def __init__(self):
		self.ID = 1431
		self.Name = "PT2953"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "2"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PT2957:
	def __init__(self):
		self.ID = 1432
		self.Name = "PT2957"
		self.Model = "TRANSPSG"
		self.Notes = "Pressure Gauge(for Streams)"

		# Primary Parameters
		self.Pl_Value = "0"
		self.Pl_Notes = "Lower Limit(in ind. unit)"

		# Primary Parameters
		self.Ph_Value = "2"
		self.Ph_Notes = "Upper Limit(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "9"
		self.unit_Notes = "Unit of Indication(MPaG,kPaG,MPa,kPa,..)"

		# Primary Parameters
		self.Pfail_Value = "0"
		self.Pfail_Notes = "Pressure on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.PSt_Value = "0"
		self.PSt_Notes = "Pressure Start Value(in ind. unit)"

class Block_PU2001:
	def __init__(self):
		self.ID = 1433
		self.Name = "PU2001"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_PU21201:
	def __init__(self):
		self.ID = 1434
		self.Name = "PU21201"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_PU21202:
	def __init__(self):
		self.ID = 1435
		self.Name = "PU21202"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_PU21401:
	def __init__(self):
		self.ID = 1436
		self.Name = "PU21401"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_PU21402:
	def __init__(self):
		self.ID = 1437
		self.Name = "PU21402"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_PU21501:
	def __init__(self):
		self.ID = 1438
		self.Name = "PU21501"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_PU21502:
	def __init__(self):
		self.ID = 1439
		self.Name = "PU21502"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_PU21701:
	def __init__(self):
		self.ID = 1440
		self.Name = "PU21701"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_PU21702:
	def __init__(self):
		self.ID = 1441
		self.Name = "PU21702"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_PU21801:
	def __init__(self):
		self.ID = 1442
		self.Name = "PU21801"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_PU21802:
	def __init__(self):
		self.ID = 1443
		self.Name = "PU21802"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_PU21901:
	def __init__(self):
		self.ID = 1444
		self.Name = "PU21901"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_PU21902:
	def __init__(self):
		self.ID = 1445
		self.Name = "PU21902"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_PU2205:
	def __init__(self):
		self.ID = 1446
		self.Name = "PU2205"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_PU2230:
	def __init__(self):
		self.ID = 1447
		self.Name = "PU2230"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_PU2260A:
	def __init__(self):
		self.ID = 1448
		self.Name = "PU2260A"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_PU2260B:
	def __init__(self):
		self.ID = 1449
		self.Name = "PU2260B"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_PU2263:
	def __init__(self):
		self.ID = 1450
		self.Name = "PU2263"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_PU2280:
	def __init__(self):
		self.ID = 1451
		self.Name = "PU2280"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_PU22821:
	def __init__(self):
		self.ID = 1452
		self.Name = "PU22821"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_PU22822:
	def __init__(self):
		self.ID = 1453
		self.Name = "PU22822"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_PU2291:
	def __init__(self):
		self.ID = 1454
		self.Name = "PU2291"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_PU2292:
	def __init__(self):
		self.ID = 1455
		self.Name = "PU2292"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_PU2310:
	def __init__(self):
		self.ID = 1456
		self.Name = "PU2310"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_PU2311:
	def __init__(self):
		self.ID = 1457
		self.Name = "PU2311"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_PU2320:
	def __init__(self):
		self.ID = 1458
		self.Name = "PU2320"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_PU2324:
	def __init__(self):
		self.ID = 1459
		self.Name = "PU2324"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_PU25001:
	def __init__(self):
		self.ID = 1460
		self.Name = "PU25001"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_PU25002:
	def __init__(self):
		self.ID = 1461
		self.Name = "PU25002"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_PU2901:
	def __init__(self):
		self.ID = 1462
		self.Name = "PU2901"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_PU2902:
	def __init__(self):
		self.ID = 1463
		self.Name = "PU2902"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_PU2903:
	def __init__(self):
		self.ID = 1464
		self.Name = "PU2903"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_PU2932:
	def __init__(self):
		self.ID = 1465
		self.Name = "PU2932"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_PU2951:
	def __init__(self):
		self.ID = 1466
		self.Name = "PU2951"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_PU2952:
	def __init__(self):
		self.ID = 1467
		self.Name = "PU2952"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_PU2953:
	def __init__(self):
		self.ID = 1468
		self.Name = "PU2953"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_PU2957:
	def __init__(self):
		self.ID = 1469
		self.Name = "PU2957"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_PV2001:
	def __init__(self):
		self.ID = 1470
		self.Name = "PV2001"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "4"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "40"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "40"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_PV21201:
	def __init__(self):
		self.ID = 1471
		self.Name = "PV21201"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1.6"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "1.6"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "16"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "16"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_PV21202:
	def __init__(self):
		self.ID = 1472
		self.Name = "PV21202"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "10"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "10"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "100"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "100"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_PV21401:
	def __init__(self):
		self.ID = 1473
		self.Name = "PV21401"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1.6"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "1.6"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "16"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "16"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_PV21402:
	def __init__(self):
		self.ID = 1474
		self.Name = "PV21402"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "10"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "10"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "100"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "100"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_PV21501:
	def __init__(self):
		self.ID = 1475
		self.Name = "PV21501"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.25"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "0.25"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "2.5"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "2.5"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_PV21502:
	def __init__(self):
		self.ID = 1476
		self.Name = "PV21502"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.25"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "0.25"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "2.5"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "2.5"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_PV21701:
	def __init__(self):
		self.ID = 1477
		self.Name = "PV21701"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "1"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "10"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "10"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_PV21702:
	def __init__(self):
		self.ID = 1478
		self.Name = "PV21702"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "6.3"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "6.3"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "63"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "63"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_PV21801:
	def __init__(self):
		self.ID = 1479
		self.Name = "PV21801"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "1"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "10"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "10"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_PV21802:
	def __init__(self):
		self.ID = 1480
		self.Name = "PV21802"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "10"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "10"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "100"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "100"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_PV21901:
	def __init__(self):
		self.ID = 1481
		self.Name = "PV21901"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "1"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "10"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "10"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_PV21902:
	def __init__(self):
		self.ID = 1482
		self.Name = "PV21902"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "10"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "10"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "100"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "100"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_PV2205:
	def __init__(self):
		self.ID = 1483
		self.Name = "PV2205"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.003"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "2"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "0.003"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "0.03"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "0.03"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_PV2211:
	def __init__(self):
		self.ID = 1484
		self.Name = "PV2211"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.15"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "0.15"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "1.5"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "1.5"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_PV2230:
	def __init__(self):
		self.ID = 1485
		self.Name = "PV2230"
		self.Model = "AVALVE_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "250"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_PV2260A:
	def __init__(self):
		self.ID = 1486
		self.Name = "PV2260A"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "6.3"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "6.3"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "63"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "63"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_PV2260B:
	def __init__(self):
		self.ID = 1487
		self.Name = "PV2260B"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "6.3"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "6.3"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "63"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "63"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_PV2263:
	def __init__(self):
		self.ID = 1488
		self.Name = "PV2263"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1.6"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "1.6"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "16"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "16"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_PV2280:
	def __init__(self):
		self.ID = 1489
		self.Name = "PV2280"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1000"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "1000"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "10000"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "10000"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_PV2281:
	def __init__(self):
		self.ID = 1490
		self.Name = "PV2281"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "11"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "11"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "110"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "110"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_PV22821:
	def __init__(self):
		self.ID = 1491
		self.Name = "PV22821"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1.6"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "1.6"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "16"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "16"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_PV22822:
	def __init__(self):
		self.ID = 1492
		self.Name = "PV22822"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "4"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "40"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "40"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_PV2291:
	def __init__(self):
		self.ID = 1493
		self.Name = "PV2291"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "10"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "10"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "100"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "100"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_PV2292:
	def __init__(self):
		self.ID = 1494
		self.Name = "PV2292"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.4"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "0.4"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "10"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "10"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_PV2310:
	def __init__(self):
		self.ID = 1495
		self.Name = "PV2310"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "250"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "250"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "2500"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "2500"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_PV2311:
	def __init__(self):
		self.ID = 1496
		self.Name = "PV2311"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "24"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "24"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "240"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "240"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_PV2320:
	def __init__(self):
		self.ID = 1497
		self.Name = "PV2320"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "240"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "240"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "2400"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "2400"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_PV2324:
	def __init__(self):
		self.ID = 1498
		self.Name = "PV2324"
		self.Model = "AVALVE_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "160"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_PV25001:
	def __init__(self):
		self.ID = 1499
		self.Name = "PV25001"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "17"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "17"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "170"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "170"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_PV25002:
	def __init__(self):
		self.ID = 1500
		self.Name = "PV25002"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "250"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "250"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "2500"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "2500"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_PV2901:
	def __init__(self):
		self.ID = 1501
		self.Name = "PV2901"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "44"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "44"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "440"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "440"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_PV2902:
	def __init__(self):
		self.ID = 1502
		self.Name = "PV2902"
		self.Model = "AVALVE_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "44"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_PV2903:
	def __init__(self):
		self.ID = 1503
		self.Name = "PV2903"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "400"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "400"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "4000"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "4000"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_PV2932:
	def __init__(self):
		self.ID = 1504
		self.Name = "PV2932"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "11"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "2"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "11"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "110"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "110"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_PV2951:
	def __init__(self):
		self.ID = 1505
		self.Name = "PV2951"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "44"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "44"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "440"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "440"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_PV2952:
	def __init__(self):
		self.ID = 1506
		self.Name = "PV2952"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "17"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "17"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "170"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "170"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_PV2953:
	def __init__(self):
		self.ID = 1507
		self.Name = "PV2953"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1.6"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "1.6"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "16"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "16"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_PV2957:
	def __init__(self):
		self.ID = 1508
		self.Name = "PV2957"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "100"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "100"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "1000"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "1000"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_PY2120:
	def __init__(self):
		self.ID = 1509
		self.Name = "PY2120"
		self.Model = "SIGNBR2"
		self.Notes = "Signal Split(1-input/2-output)"

		# Primary Parameters
		self.SWITCH_Value = "0"
		self.SWITCH_Notes = "0=signal branch, 1-2=switch"

		# Primary Parameters
		self.MVTRK_Value = "1"
		self.MVTRK_Notes = "Output Tracking Point(1-2)"

		# Primary Parameters
		self.PVSPAN1_Value = "(2)"
		self.PVSPAN1_Notes = "Input 1 Span/Base"

		# Primary Parameters List Value
		self.PVSPAN1_List_Value = array([1., 0.])
		# Primary Parameters
		self.MVSPAN_Value = "1"
		self.MVSPAN_Notes = "MV Span"

class Block_PY21201:
	def __init__(self):
		self.ID = 1510
		self.Name = "PY21201"
		self.Model = "_DRNGTRNS"
		self.Notes = "Range Converter"

		# General Parameters
		self._n_Value = "2"
		self._n_Notes = "Number of segments(n<=16)"

		# Primary Parameters
		self.PVRANGE_Value = "(2,2)"
		self.PVRANGE_Notes = "Conversion Table"

		# Primary Parameters List Value
		self.PVRANGE_List_Value = array([[0. , 1. ],
       [0.5, 0. ]])
		# Primary Parameters
		self.BADRANGE_Value = "5"
		self.BADRANGE_Notes = "Check Band for Invalid Input[%]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

class Block_PY21202:
	def __init__(self):
		self.ID = 1511
		self.Name = "PY21202"
		self.Model = "_DRNGTRNS"
		self.Notes = "Range Converter"

		# General Parameters
		self._n_Value = "2"
		self._n_Notes = "Number of segments(n<=16)"

		# Primary Parameters
		self.PVRANGE_Value = "(2,2)"
		self.PVRANGE_Notes = "Conversion Table"

		# Primary Parameters List Value
		self.PVRANGE_List_Value = array([[0.5, 0. ],
       [1. , 1. ]])
		# Primary Parameters
		self.BADRANGE_Value = "5"
		self.BADRANGE_Notes = "Check Band for Invalid Input[%]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

class Block_PY2140:
	def __init__(self):
		self.ID = 1512
		self.Name = "PY2140"
		self.Model = "SIGNBR2"
		self.Notes = "Signal Split(1-input/2-output)"

		# Primary Parameters
		self.SWITCH_Value = "0"
		self.SWITCH_Notes = "0=signal branch, 1-2=switch"

		# Primary Parameters
		self.MVTRK_Value = "1"
		self.MVTRK_Notes = "Output Tracking Point(1-2)"

		# Primary Parameters
		self.PVSPAN1_Value = "(2)"
		self.PVSPAN1_Notes = "Input 1 Span/Base"

		# Primary Parameters List Value
		self.PVSPAN1_List_Value = array([1., 0.])
		# Primary Parameters
		self.MVSPAN_Value = "1"
		self.MVSPAN_Notes = "MV Span"

class Block_PY21401:
	def __init__(self):
		self.ID = 1513
		self.Name = "PY21401"
		self.Model = "_DRNGTRNS"
		self.Notes = "Range Converter"

		# General Parameters
		self._n_Value = "2"
		self._n_Notes = "Number of segments(n<=16)"

		# Primary Parameters
		self.PVRANGE_Value = "(2,2)"
		self.PVRANGE_Notes = "Conversion Table"

		# Primary Parameters List Value
		self.PVRANGE_List_Value = array([[0. , 1. ],
       [0.5, 0. ]])
		# Primary Parameters
		self.BADRANGE_Value = "5"
		self.BADRANGE_Notes = "Check Band for Invalid Input[%]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

class Block_PY21402:
	def __init__(self):
		self.ID = 1514
		self.Name = "PY21402"
		self.Model = "_DRNGTRNS"
		self.Notes = "Range Converter"

		# General Parameters
		self._n_Value = "2"
		self._n_Notes = "Number of segments(n<=16)"

		# Primary Parameters
		self.PVRANGE_Value = "(2,2)"
		self.PVRANGE_Notes = "Conversion Table"

		# Primary Parameters List Value
		self.PVRANGE_List_Value = array([[0.5, 0. ],
       [1. , 1. ]])
		# Primary Parameters
		self.BADRANGE_Value = "5"
		self.BADRANGE_Notes = "Check Band for Invalid Input[%]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

class Block_PY2150:
	def __init__(self):
		self.ID = 1515
		self.Name = "PY2150"
		self.Model = "SIGNBR2"
		self.Notes = "Signal Split(1-input/2-output)"

		# Primary Parameters
		self.SWITCH_Value = "0"
		self.SWITCH_Notes = "0=signal branch, 1-2=switch"

		# Primary Parameters
		self.MVTRK_Value = "1"
		self.MVTRK_Notes = "Output Tracking Point(1-2)"

		# Primary Parameters
		self.PVSPAN1_Value = "(2)"
		self.PVSPAN1_Notes = "Input 1 Span/Base"

		# Primary Parameters List Value
		self.PVSPAN1_List_Value = array([1., 0.])
		# Primary Parameters
		self.MVSPAN_Value = "1"
		self.MVSPAN_Notes = "MV Span"

class Block_PY21501:
	def __init__(self):
		self.ID = 1516
		self.Name = "PY21501"
		self.Model = "_DRNGTRNS"
		self.Notes = "Range Converter"

		# General Parameters
		self._n_Value = "2"
		self._n_Notes = "Number of segments(n<=16)"

		# Primary Parameters
		self.PVRANGE_Value = "(2,2)"
		self.PVRANGE_Notes = "Conversion Table"

		# Primary Parameters List Value
		self.PVRANGE_List_Value = array([[0. , 1. ],
       [0.5, 0. ]])
		# Primary Parameters
		self.BADRANGE_Value = "5"
		self.BADRANGE_Notes = "Check Band for Invalid Input[%]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

class Block_PY21502:
	def __init__(self):
		self.ID = 1517
		self.Name = "PY21502"
		self.Model = "_DRNGTRNS"
		self.Notes = "Range Converter"

		# General Parameters
		self._n_Value = "2"
		self._n_Notes = "Number of segments(n<=16)"

		# Primary Parameters
		self.PVRANGE_Value = "(2,2)"
		self.PVRANGE_Notes = "Conversion Table"

		# Primary Parameters List Value
		self.PVRANGE_List_Value = array([[0.5, 0. ],
       [1. , 1. ]])
		# Primary Parameters
		self.BADRANGE_Value = "5"
		self.BADRANGE_Notes = "Check Band for Invalid Input[%]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

class Block_PY2170:
	def __init__(self):
		self.ID = 1518
		self.Name = "PY2170"
		self.Model = "SIGNBR2"
		self.Notes = "Signal Split(1-input/2-output)"

		# Primary Parameters
		self.SWITCH_Value = "0"
		self.SWITCH_Notes = "0=signal branch, 1-2=switch"

		# Primary Parameters
		self.MVTRK_Value = "1"
		self.MVTRK_Notes = "Output Tracking Point(1-2)"

		# Primary Parameters
		self.PVSPAN1_Value = "(2)"
		self.PVSPAN1_Notes = "Input 1 Span/Base"

		# Primary Parameters List Value
		self.PVSPAN1_List_Value = array([1., 0.])
		# Primary Parameters
		self.MVSPAN_Value = "1"
		self.MVSPAN_Notes = "MV Span"

class Block_PY21701:
	def __init__(self):
		self.ID = 1519
		self.Name = "PY21701"
		self.Model = "_DRNGTRNS"
		self.Notes = "Range Converter"

		# General Parameters
		self._n_Value = "2"
		self._n_Notes = "Number of segments(n<=16)"

		# Primary Parameters
		self.PVRANGE_Value = "(2,2)"
		self.PVRANGE_Notes = "Conversion Table"

		# Primary Parameters List Value
		self.PVRANGE_List_Value = array([[0.5, 0. ],
       [1. , 1. ]])
		# Primary Parameters
		self.BADRANGE_Value = "5"
		self.BADRANGE_Notes = "Check Band for Invalid Input[%]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

class Block_PY21702:
	def __init__(self):
		self.ID = 1520
		self.Name = "PY21702"
		self.Model = "_DRNGTRNS"
		self.Notes = "Range Converter"

		# General Parameters
		self._n_Value = "2"
		self._n_Notes = "Number of segments(n<=16)"

		# Primary Parameters
		self.PVRANGE_Value = "(2,2)"
		self.PVRANGE_Notes = "Conversion Table"

		# Primary Parameters List Value
		self.PVRANGE_List_Value = array([[0. , 1. ],
       [0.5, 0. ]])
		# Primary Parameters
		self.BADRANGE_Value = "5"
		self.BADRANGE_Notes = "Check Band for Invalid Input[%]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

class Block_PY2180:
	def __init__(self):
		self.ID = 1521
		self.Name = "PY2180"
		self.Model = "SIGNBR2"
		self.Notes = "Signal Split(1-input/2-output)"

		# Primary Parameters
		self.SWITCH_Value = "0"
		self.SWITCH_Notes = "0=signal branch, 1-2=switch"

		# Primary Parameters
		self.MVTRK_Value = "1"
		self.MVTRK_Notes = "Output Tracking Point(1-2)"

		# Primary Parameters
		self.PVSPAN1_Value = "(2)"
		self.PVSPAN1_Notes = "Input 1 Span/Base"

		# Primary Parameters List Value
		self.PVSPAN1_List_Value = array([1., 0.])
		# Primary Parameters
		self.MVSPAN_Value = "1"
		self.MVSPAN_Notes = "MV Span"

class Block_PY21801:
	def __init__(self):
		self.ID = 1522
		self.Name = "PY21801"
		self.Model = "_DRNGTRNS"
		self.Notes = "Range Converter"

		# General Parameters
		self._n_Value = "2"
		self._n_Notes = "Number of segments(n<=16)"

		# Primary Parameters
		self.PVRANGE_Value = "(2,2)"
		self.PVRANGE_Notes = "Conversion Table"

		# Primary Parameters List Value
		self.PVRANGE_List_Value = array([[0.5, 0. ],
       [1. , 1. ]])
		# Primary Parameters
		self.BADRANGE_Value = "5"
		self.BADRANGE_Notes = "Check Band for Invalid Input[%]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

class Block_PY21802:
	def __init__(self):
		self.ID = 1523
		self.Name = "PY21802"
		self.Model = "_DRNGTRNS"
		self.Notes = "Range Converter"

		# General Parameters
		self._n_Value = "2"
		self._n_Notes = "Number of segments(n<=16)"

		# Primary Parameters
		self.PVRANGE_Value = "(2,2)"
		self.PVRANGE_Notes = "Conversion Table"

		# Primary Parameters List Value
		self.PVRANGE_List_Value = array([[0. , 1. ],
       [0.5, 0. ]])
		# Primary Parameters
		self.BADRANGE_Value = "5"
		self.BADRANGE_Notes = "Check Band for Invalid Input[%]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

class Block_PY2190:
	def __init__(self):
		self.ID = 1524
		self.Name = "PY2190"
		self.Model = "SIGNBR2"
		self.Notes = "Signal Split(1-input/2-output)"

		# Primary Parameters
		self.SWITCH_Value = "0"
		self.SWITCH_Notes = "0=signal branch, 1-2=switch"

		# Primary Parameters
		self.MVTRK_Value = "1"
		self.MVTRK_Notes = "Output Tracking Point(1-2)"

		# Primary Parameters
		self.PVSPAN1_Value = "(2)"
		self.PVSPAN1_Notes = "Input 1 Span/Base"

		# Primary Parameters List Value
		self.PVSPAN1_List_Value = array([1., 0.])
		# Primary Parameters
		self.MVSPAN_Value = "1"
		self.MVSPAN_Notes = "MV Span"

class Block_PY21901:
	def __init__(self):
		self.ID = 1525
		self.Name = "PY21901"
		self.Model = "_DRNGTRNS"
		self.Notes = "Range Converter"

		# General Parameters
		self._n_Value = "2"
		self._n_Notes = "Number of segments(n<=16)"

		# Primary Parameters
		self.PVRANGE_Value = "(2,2)"
		self.PVRANGE_Notes = "Conversion Table"

		# Primary Parameters List Value
		self.PVRANGE_List_Value = array([[0.5, 0. ],
       [1. , 1. ]])
		# Primary Parameters
		self.BADRANGE_Value = "5"
		self.BADRANGE_Notes = "Check Band for Invalid Input[%]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

class Block_PY21902:
	def __init__(self):
		self.ID = 1526
		self.Name = "PY21902"
		self.Model = "_DRNGTRNS"
		self.Notes = "Range Converter"

		# General Parameters
		self._n_Value = "2"
		self._n_Notes = "Number of segments(n<=16)"

		# Primary Parameters
		self.PVRANGE_Value = "(2,2)"
		self.PVRANGE_Notes = "Conversion Table"

		# Primary Parameters List Value
		self.PVRANGE_List_Value = array([[0. , 1. ],
       [0.5, 0. ]])
		# Primary Parameters
		self.BADRANGE_Value = "5"
		self.BADRANGE_Notes = "Check Band for Invalid Input[%]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

class Block_PY2282:
	def __init__(self):
		self.ID = 1527
		self.Name = "PY2282"
		self.Model = "SIGNBR2"
		self.Notes = "Signal Split(1-input/2-output)"

		# Primary Parameters
		self.SWITCH_Value = "0"
		self.SWITCH_Notes = "0=signal branch, 1-2=switch"

		# Primary Parameters
		self.MVTRK_Value = "1"
		self.MVTRK_Notes = "Output Tracking Point(1-2)"

		# Primary Parameters
		self.PVSPAN1_Value = "(2)"
		self.PVSPAN1_Notes = "Input 1 Span/Base"

		# Primary Parameters List Value
		self.PVSPAN1_List_Value = array([1., 0.])
		# Primary Parameters
		self.MVSPAN_Value = "1"
		self.MVSPAN_Notes = "MV Span"

class Block_PY22821:
	def __init__(self):
		self.ID = 1528
		self.Name = "PY22821"
		self.Model = "_DRNGTRNS"
		self.Notes = "Range Converter"

		# General Parameters
		self._n_Value = "2"
		self._n_Notes = "Number of segments(n<=16)"

		# Primary Parameters
		self.PVRANGE_Value = "(2,2)"
		self.PVRANGE_Notes = "Conversion Table"

		# Primary Parameters List Value
		self.PVRANGE_List_Value = array([[0. , 1. ],
       [0.5, 0. ]])
		# Primary Parameters
		self.BADRANGE_Value = "5"
		self.BADRANGE_Notes = "Check Band for Invalid Input[%]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

class Block_PY22822:
	def __init__(self):
		self.ID = 1529
		self.Name = "PY22822"
		self.Model = "_DRNGTRNS"
		self.Notes = "Range Converter"

		# General Parameters
		self._n_Value = "2"
		self._n_Notes = "Number of segments(n<=16)"

		# Primary Parameters
		self.PVRANGE_Value = "(2,2)"
		self.PVRANGE_Notes = "Conversion Table"

		# Primary Parameters List Value
		self.PVRANGE_List_Value = array([[0.5, 0. ],
       [1. , 1. ]])
		# Primary Parameters
		self.BADRANGE_Value = "5"
		self.BADRANGE_Notes = "Check Band for Invalid Input[%]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

class Block_PY2500:
	def __init__(self):
		self.ID = 1530
		self.Name = "PY2500"
		self.Model = "SIGNBR2"
		self.Notes = "Signal Split(1-input/2-output)"

		# Primary Parameters
		self.SWITCH_Value = "0"
		self.SWITCH_Notes = "0=signal branch, 1-2=switch"

		# Primary Parameters
		self.MVTRK_Value = "1"
		self.MVTRK_Notes = "Output Tracking Point(1-2)"

		# Primary Parameters
		self.PVSPAN1_Value = "(2)"
		self.PVSPAN1_Notes = "Input 1 Span/Base"

		# Primary Parameters List Value
		self.PVSPAN1_List_Value = array([1., 0.])
		# Primary Parameters
		self.MVSPAN_Value = "1"
		self.MVSPAN_Notes = "MV Span"

class Block_PY25001:
	def __init__(self):
		self.ID = 1531
		self.Name = "PY25001"
		self.Model = "_DRNGTRNS"
		self.Notes = "Range Converter"

		# General Parameters
		self._n_Value = "2"
		self._n_Notes = "Number of segments(n<=16)"

		# Primary Parameters
		self.PVRANGE_Value = "(2,2)"
		self.PVRANGE_Notes = "Conversion Table"

		# Primary Parameters List Value
		self.PVRANGE_List_Value = array([[0.5, 0. ],
       [1. , 1. ]])
		# Primary Parameters
		self.BADRANGE_Value = "5"
		self.BADRANGE_Notes = "Check Band for Invalid Input[%]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

class Block_PY25002:
	def __init__(self):
		self.ID = 1532
		self.Name = "PY25002"
		self.Model = "_DRNGTRNS"
		self.Notes = "Range Converter"

		# General Parameters
		self._n_Value = "2"
		self._n_Notes = "Number of segments(n<=16)"

		# Primary Parameters
		self.PVRANGE_Value = "(2,2)"
		self.PVRANGE_Notes = "Conversion Table"

		# Primary Parameters List Value
		self.PVRANGE_List_Value = array([[0. , 1. ],
       [0.5, 0. ]])
		# Primary Parameters
		self.BADRANGE_Value = "5"
		self.BADRANGE_Notes = "Check Band for Invalid Input[%]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

class Block_QTD2110:
	def __init__(self):
		self.ID = 1533
		self.Name = "QTD2110"
		self.Model = "TRANSQ"
		self.Notes = "Conc. Meter(for Streams)"

		# Primary Parameters
		self.Ql_Value = "0"
		self.Ql_Notes = "Lower Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.Qh_Value = "10000"
		self.Qh_Notes = "Upper Limit Concentration(in ind. unit)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.ncomp_Value = "22"
		self.ncomp_Notes = "Measurement Component No.[-]"

		# Primary Parameters
		self.unit_Value = "3"
		self.unit_Notes = "Unit of Indication(1:-,2:%,3:ppm)"

		# Primary Parameters
		self.basis_Value = "1"
		self.basis_Notes = "Basis(1:Molar,2:Mass,3:Volume)"

		# Primary Parameters
		self.Qfail_Value = "0"
		self.Qfail_Notes = "Indicated Conc. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.QSt_Value = "0"
		self.QSt_Notes = "Indicated Conc. Start Value[%,ppm]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_QTD2110HX:
	def __init__(self):
		self.ID = 1534
		self.Name = "QTD2110HX"
		self.Model = "LIMSW"
		self.Notes = "Limit Switch"

		# Primary Parameters
		self.X0_Value = "9.9"
		self.X0_Notes = "x0"

		# Primary Parameters
		self.X1_Value = "10"
		self.X1_Notes = "x1"

		# Primary Parameters
		self.rev_Value = "0"
		self.rev_Notes = "Reverse Switch(0:Normal,1:Reverse)"

		# Primary Parameters
		self.yfail_Value = "0"
		self.yfail_Notes = "Output on Failure"

class Block_RCV2911:
	def __init__(self):
		self.ID = 1535
		self.Name = "RCV2911"
		self.Model = "AVALVE_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "99"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "5"
		self.s1_Notes = "System No."

class Block_RCV2924:
	def __init__(self):
		self.ID = 1536
		self.Name = "RCV2924"
		self.Model = "AVALVE_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "6.3"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "2"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_RCV2925:
	def __init__(self):
		self.ID = 1537
		self.Name = "RCV2925"
		self.Model = "AVALVE_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "6.3"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "2"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_RCV2926:
	def __init__(self):
		self.ID = 1538
		self.Name = "RCV2926"
		self.Model = "AVALVE_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "6.3"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "2"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SC2232:
	def __init__(self):
		self.ID = 1539
		self.Name = "SC2232"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "100"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "30"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([1500.,    0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_SC2320:
	def __init__(self):
		self.ID = 1540
		self.Name = "SC2320"
		self.Model = "_DPIDVC"
		self.Notes = "Manual Manipulator"

		# Primary Parameters
		self.PB_Value = "100"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "30"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([34.,  0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_SDU2110:
	def __init__(self):
		self.ID = 1541
		self.Name = "SDU2110"
		self.Model = "EVUTIL"
		self.Notes = "emergency valve utility"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.mvrev_Value = "0"
		self.mvrev_Notes = "Reverse Flag of mv, 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd, 1:reverse"

class Block_SDU2201:
	def __init__(self):
		self.ID = 1542
		self.Name = "SDU2201"
		self.Model = "EVUTIL"
		self.Notes = "emergency valve utility"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.mvrev_Value = "0"
		self.mvrev_Notes = "Reverse Flag of mv, 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd, 1:reverse"

class Block_SDU2203:
	def __init__(self):
		self.ID = 1543
		self.Name = "SDU2203"
		self.Model = "EVUTIL"
		self.Notes = "emergency valve utility"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.mvrev_Value = "0"
		self.mvrev_Notes = "Reverse Flag of mv, 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd, 1:reverse"

class Block_SDU2212A:
	def __init__(self):
		self.ID = 1544
		self.Name = "SDU2212A"
		self.Model = "EVUTIL"
		self.Notes = "emergency valve utility"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.mvrev_Value = "0"
		self.mvrev_Notes = "Reverse Flag of mv, 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd, 1:reverse"

class Block_SDU2212B:
	def __init__(self):
		self.ID = 1545
		self.Name = "SDU2212B"
		self.Model = "EVUTIL"
		self.Notes = "emergency valve utility"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.mvrev_Value = "0"
		self.mvrev_Notes = "Reverse Flag of mv, 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd, 1:reverse"

class Block_SDU22151:
	def __init__(self):
		self.ID = 1546
		self.Name = "SDU22151"
		self.Model = "EVUTIL"
		self.Notes = "emergency valve utility"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.mvrev_Value = "0"
		self.mvrev_Notes = "Reverse Flag of mv, 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd, 1:reverse"

class Block_SDU22152:
	def __init__(self):
		self.ID = 1547
		self.Name = "SDU22152"
		self.Model = "EVUTIL"
		self.Notes = "emergency valve utility"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.mvrev_Value = "0"
		self.mvrev_Notes = "Reverse Flag of mv, 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd, 1:reverse"

class Block_SDU2216:
	def __init__(self):
		self.ID = 1548
		self.Name = "SDU2216"
		self.Model = "EVUTIL"
		self.Notes = "emergency valve utility"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.mvrev_Value = "0"
		self.mvrev_Notes = "Reverse Flag of mv, 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd, 1:reverse"

class Block_SDU2232:
	def __init__(self):
		self.ID = 1549
		self.Name = "SDU2232"
		self.Model = "EVUTIL"
		self.Notes = "emergency valve utility"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.mvrev_Value = "0"
		self.mvrev_Notes = "Reverse Flag of mv, 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd, 1:reverse"

class Block_SDU2233A:
	def __init__(self):
		self.ID = 1550
		self.Name = "SDU2233A"
		self.Model = "EVUTIL"
		self.Notes = "emergency valve utility"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.mvrev_Value = "0"
		self.mvrev_Notes = "Reverse Flag of mv, 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd, 1:reverse"

class Block_SDU2233B:
	def __init__(self):
		self.ID = 1551
		self.Name = "SDU2233B"
		self.Model = "EVUTIL"
		self.Notes = "emergency valve utility"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.mvrev_Value = "0"
		self.mvrev_Notes = "Reverse Flag of mv, 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd, 1:reverse"

class Block_SDU2234A:
	def __init__(self):
		self.ID = 1552
		self.Name = "SDU2234A"
		self.Model = "EVUTIL"
		self.Notes = "emergency valve utility"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.mvrev_Value = "0"
		self.mvrev_Notes = "Reverse Flag of mv, 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd, 1:reverse"

class Block_SDU2234B:
	def __init__(self):
		self.ID = 1553
		self.Name = "SDU2234B"
		self.Model = "EVUTIL"
		self.Notes = "emergency valve utility"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.mvrev_Value = "0"
		self.mvrev_Notes = "Reverse Flag of mv, 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd, 1:reverse"

class Block_SDU2235A:
	def __init__(self):
		self.ID = 1554
		self.Name = "SDU2235A"
		self.Model = "EVUTIL"
		self.Notes = "emergency valve utility"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.mvrev_Value = "0"
		self.mvrev_Notes = "Reverse Flag of mv, 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd, 1:reverse"

class Block_SDU2235B:
	def __init__(self):
		self.ID = 1555
		self.Name = "SDU2235B"
		self.Model = "EVUTIL"
		self.Notes = "emergency valve utility"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.mvrev_Value = "0"
		self.mvrev_Notes = "Reverse Flag of mv, 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd, 1:reverse"

class Block_SDU2236:
	def __init__(self):
		self.ID = 1556
		self.Name = "SDU2236"
		self.Model = "EVUTIL"
		self.Notes = "emergency valve utility"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.mvrev_Value = "0"
		self.mvrev_Notes = "Reverse Flag of mv, 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd, 1:reverse"

class Block_SDU22501:
	def __init__(self):
		self.ID = 1557
		self.Name = "SDU22501"
		self.Model = "EVUTIL"
		self.Notes = "emergency valve utility"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.mvrev_Value = "0"
		self.mvrev_Notes = "Reverse Flag of mv, 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd, 1:reverse"

class Block_SDU22502:
	def __init__(self):
		self.ID = 1558
		self.Name = "SDU22502"
		self.Model = "EVUTIL"
		self.Notes = "emergency valve utility"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.mvrev_Value = "0"
		self.mvrev_Notes = "Reverse Flag of mv, 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd, 1:reverse"

class Block_SDU2251:
	def __init__(self):
		self.ID = 1559
		self.Name = "SDU2251"
		self.Model = "EVUTIL"
		self.Notes = "emergency valve utility"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.mvrev_Value = "0"
		self.mvrev_Notes = "Reverse Flag of mv, 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd, 1:reverse"

class Block_SDV2110:
	def __init__(self):
		self.ID = 1560
		self.Name = "SDV2110"
		self.Model = "SVALVE_S"
		self.Notes = "Shutoff Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV_Value = "10000"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.topen_Value = "5"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "5"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close,1:Open) on Air Fail"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SDV2201:
	def __init__(self):
		self.ID = 1561
		self.Name = "SDV2201"
		self.Model = "SVALVE_S"
		self.Notes = "Shutoff Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV_Value = "24"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.topen_Value = "5"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "5"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close,1:Open) on Air Fail"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SDV2203:
	def __init__(self):
		self.ID = 1562
		self.Name = "SDV2203"
		self.Model = "SVALVE_S"
		self.Notes = "Shutoff Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV_Value = "216"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.topen_Value = "5"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "5"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close,1:Open) on Air Fail"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SDV2212A:
	def __init__(self):
		self.ID = 1563
		self.Name = "SDV2212A"
		self.Model = "SVALVE_S"
		self.Notes = "Shutoff Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV_Value = "1000"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.topen_Value = "5"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "5"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close,1:Open) on Air Fail"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SDV2212B:
	def __init__(self):
		self.ID = 1564
		self.Name = "SDV2212B"
		self.Model = "SVALVE_S"
		self.Notes = "Shutoff Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV_Value = "10000"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.topen_Value = "5"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "5"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close,1:Open) on Air Fail"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SDV22151:
	def __init__(self):
		self.ID = 1565
		self.Name = "SDV22151"
		self.Model = "SVALVE_S"
		self.Notes = "Shutoff Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV_Value = "8.5"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.topen_Value = "5"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "5"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close,1:Open) on Air Fail"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SDV22152:
	def __init__(self):
		self.ID = 1566
		self.Name = "SDV22152"
		self.Model = "SVALVE_S"
		self.Notes = "Shutoff Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV_Value = "8.5"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.topen_Value = "5"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "5"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close,1:Open) on Air Fail"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SDV2216:
	def __init__(self):
		self.ID = 1567
		self.Name = "SDV2216"
		self.Model = "SVALVE_S"
		self.Notes = "Shutoff Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV_Value = "8.5"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.topen_Value = "5"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "5"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close,1:Open) on Air Fail"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SDV22301:
	def __init__(self):
		self.ID = 1568
		self.Name = "SDV22301"
		self.Model = "SVALVE_S"
		self.Notes = "Shutoff Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV_Value = "8.5"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.topen_Value = "5"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "5"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close,1:Open) on Air Fail"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SDV22302:
	def __init__(self):
		self.ID = 1569
		self.Name = "SDV22302"
		self.Model = "SVALVE_S"
		self.Notes = "Shutoff Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV_Value = "8.5"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.topen_Value = "5"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "5"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close,1:Open) on Air Fail"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SDV2231:
	def __init__(self):
		self.ID = 1570
		self.Name = "SDV2231"
		self.Model = "SVALVE_S"
		self.Notes = "Shutoff Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV_Value = "8.5"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.topen_Value = "5"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "5"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close,1:Open) on Air Fail"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SDV2232:
	def __init__(self):
		self.ID = 1571
		self.Name = "SDV2232"
		self.Model = "SVALVE_S"
		self.Notes = "Shutoff Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV_Value = "24"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.topen_Value = "5"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "5"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close,1:Open) on Air Fail"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SDV2233A:
	def __init__(self):
		self.ID = 1572
		self.Name = "SDV2233A"
		self.Model = "SVALVE_S"
		self.Notes = "Shutoff Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV_Value = "216"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.topen_Value = "5"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "5"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close,1:Open) on Air Fail"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SDV2233B:
	def __init__(self):
		self.ID = 1573
		self.Name = "SDV2233B"
		self.Model = "SVALVE_S"
		self.Notes = "Shutoff Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV_Value = "216"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.topen_Value = "5"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "5"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close,1:Open) on Air Fail"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SDV2234A:
	def __init__(self):
		self.ID = 1574
		self.Name = "SDV2234A"
		self.Model = "SVALVE_S"
		self.Notes = "Shutoff Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV_Value = "3600"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.topen_Value = "5"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "5"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close,1:Open) on Air Fail"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SDV2234B:
	def __init__(self):
		self.ID = 1575
		self.Name = "SDV2234B"
		self.Model = "SVALVE_S"
		self.Notes = "Shutoff Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV_Value = "3600"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.topen_Value = "5"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "5"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close,1:Open) on Air Fail"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SDV2235A:
	def __init__(self):
		self.ID = 1576
		self.Name = "SDV2235A"
		self.Model = "SVALVE_S"
		self.Notes = "Shutoff Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV_Value = "216"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.topen_Value = "5"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "5"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close,1:Open) on Air Fail"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SDV2235B:
	def __init__(self):
		self.ID = 1577
		self.Name = "SDV2235B"
		self.Model = "SVALVE_S"
		self.Notes = "Shutoff Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV_Value = "216"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.topen_Value = "5"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "5"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close,1:Open) on Air Fail"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SDV2236:
	def __init__(self):
		self.ID = 1578
		self.Name = "SDV2236"
		self.Model = "SVALVE_S"
		self.Notes = "Shutoff Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV_Value = "875"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.topen_Value = "5"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "5"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close,1:Open) on Air Fail"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SDV22501:
	def __init__(self):
		self.ID = 1579
		self.Name = "SDV22501"
		self.Model = "SVALVE_S"
		self.Notes = "Shutoff Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV_Value = "8.5"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.topen_Value = "5"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "5"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close,1:Open) on Air Fail"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SDV22502:
	def __init__(self):
		self.ID = 1580
		self.Name = "SDV22502"
		self.Model = "SVALVE_S"
		self.Notes = "Shutoff Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV_Value = "8.5"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.topen_Value = "5"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "5"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close,1:Open) on Air Fail"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SDV2251:
	def __init__(self):
		self.ID = 1581
		self.Name = "SDV2251"
		self.Model = "SVALVE_S"
		self.Notes = "Shutoff Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV_Value = "8.5"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.topen_Value = "5"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "5"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close,1:Open) on Air Fail"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SOU2911:
	def __init__(self):
		self.ID = 1582
		self.Name = "SOU2911"
		self.Model = "EVUTIL"
		self.Notes = "emergency valve utility"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.mvrev_Value = "0"
		self.mvrev_Notes = "Reverse Flag of mv, 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd, 1:reverse"

class Block_SOU2912:
	def __init__(self):
		self.ID = 1583
		self.Name = "SOU2912"
		self.Model = "EVUTIL"
		self.Notes = "emergency valve utility"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.mvrev_Value = "0"
		self.mvrev_Notes = "Reverse Flag of mv, 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd, 1:reverse"

class Block_SOU2913:
	def __init__(self):
		self.ID = 1584
		self.Name = "SOU2913"
		self.Model = "EVUTIL"
		self.Notes = "emergency valve utility"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.mvrev_Value = "0"
		self.mvrev_Notes = "Reverse Flag of mv, 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd, 1:reverse"

class Block_SOU2914:
	def __init__(self):
		self.ID = 1585
		self.Name = "SOU2914"
		self.Model = "EVUTIL"
		self.Notes = "emergency valve utility"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.mvrev_Value = "0"
		self.mvrev_Notes = "Reverse Flag of mv, 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd, 1:reverse"

class Block_SOU2915:
	def __init__(self):
		self.ID = 1586
		self.Name = "SOU2915"
		self.Model = "EVUTIL"
		self.Notes = "emergency valve utility"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.mvrev_Value = "0"
		self.mvrev_Notes = "Reverse Flag of mv, 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd, 1:reverse"

class Block_SOU2916:
	def __init__(self):
		self.ID = 1587
		self.Name = "SOU2916"
		self.Model = "EVUTIL"
		self.Notes = "emergency valve utility"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.mvrev_Value = "0"
		self.mvrev_Notes = "Reverse Flag of mv, 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd, 1:reverse"

class Block_SOU2917:
	def __init__(self):
		self.ID = 1588
		self.Name = "SOU2917"
		self.Model = "EVUTIL"
		self.Notes = "emergency valve utility"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.mvrev_Value = "0"
		self.mvrev_Notes = "Reverse Flag of mv, 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd, 1:reverse"

class Block_SOV2911:
	def __init__(self):
		self.ID = 1589
		self.Name = "SOV2911"
		self.Model = "SVALVE_S"
		self.Notes = "Shutoff Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV_Value = "999"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.topen_Value = "5"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "5"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close,1:Open) on Air Fail"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "5"
		self.s1_Notes = "System No."

class Block_SOV2912:
	def __init__(self):
		self.ID = 1590
		self.Name = "SOV2912"
		self.Model = "SVALVE_S"
		self.Notes = "Shutoff Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV_Value = "999"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.topen_Value = "5"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "5"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close,1:Open) on Air Fail"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "5"
		self.s1_Notes = "System No."

class Block_SOV2913:
	def __init__(self):
		self.ID = 1591
		self.Name = "SOV2913"
		self.Model = "SVALVE_S"
		self.Notes = "Shutoff Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV_Value = "5"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.topen_Value = "5"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "5"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close,1:Open) on Air Fail"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "5"
		self.s1_Notes = "System No."

class Block_SOV2914:
	def __init__(self):
		self.ID = 1592
		self.Name = "SOV2914"
		self.Model = "SVALVE_S"
		self.Notes = "Shutoff Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV_Value = "2"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.topen_Value = "5"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "5"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close,1:Open) on Air Fail"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "5"
		self.s1_Notes = "System No."

class Block_SOV2914AUTO:
	def __init__(self):
		self.ID = 1593
		self.Name = "SOV2914AUTO"
		self.Model = "HSEL2"
		self.Notes = "High-Selector(2-input)"

		# Primary Parameters
		self.revcal_Value = "0"
		self.revcal_Notes = "Calc. Reverse(1:Rev.in1,2:Rev.in2)"

class Block_SOV2915:
	def __init__(self):
		self.ID = 1594
		self.Name = "SOV2915"
		self.Model = "SVALVE_S"
		self.Notes = "Shutoff Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV_Value = "199"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.topen_Value = "5"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "5"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close,1:Open) on Air Fail"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "5"
		self.s1_Notes = "System No."

class Block_SOV2916:
	def __init__(self):
		self.ID = 1595
		self.Name = "SOV2916"
		self.Model = "SVALVE_S"
		self.Notes = "Shutoff Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV_Value = "1"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.topen_Value = "5"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "5"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close,1:Open) on Air Fail"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SOV2917:
	def __init__(self):
		self.ID = 1596
		self.Name = "SOV2917"
		self.Model = "SVALVE_S"
		self.Notes = "Shutoff Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV_Value = "999"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.topen_Value = "5"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "5"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close,1:Open) on Air Fail"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "5"
		self.s1_Notes = "System No."

class Block_ST2212:
	def __init__(self):
		self.ID = 1597
		self.Name = "ST2212"
		self.Model = "TRANSAGU"
		self.Notes = "Tachometer"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:rpm,2:rps)"

		# Primary Parameters
		self.Agfail_Value = "0"
		self.Agfail_Notes = "Indicated Number of Rev. on Failure"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

class Block_ST2232:
	def __init__(self):
		self.ID = 1598
		self.Name = "ST2232"
		self.Model = "TRANSAGU"
		self.Notes = "Tachometer"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:rpm,2:rps)"

		# Primary Parameters
		self.Agfail_Value = "0"
		self.Agfail_Notes = "Indicated Number of Rev. on Failure"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

class Block_ST2300201:
	def __init__(self):
		self.ID = 1599
		self.Name = "ST2300201"
		self.Model = "MIX2"
		self.Notes = "2 to 4 Flow Header"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_ST2320:
	def __init__(self):
		self.ID = 1600
		self.Name = "ST2320"
		self.Model = "TRANSAGU"
		self.Notes = "Tachometer"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:rpm,2:rps)"

		# Primary Parameters
		self.Agfail_Value = "0"
		self.Agfail_Notes = "Indicated Number of Rev. on Failure"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

class Block_ST3101:
	def __init__(self):
		self.ID = 1601
		self.Name = "ST3101"
		self.Model = "_TRAP_S"
		self.Notes = "Inline Trap"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "Discharge Criteria (0:F,1:L,2:P)"

		# Primary Parameters
		self.Ld_Value = "0.1"
		self.Ld_Notes = "Discharge Level[m]"

		# Primary Parameters
		self.Wd_Value = "300"
		self.Wd_Notes = "Discharge Capacity[kg/h]"

		# Primary Parameters
		self.rWd_Value = "0.5"
		self.rWd_Notes = "Margin for Discharge Capacity[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_ST3104:
	def __init__(self):
		self.ID = 1602
		self.Name = "ST3104"
		self.Model = "_TRAP_S"
		self.Notes = "Inline Trap"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "Discharge Criteria (0:F,1:L,2:P)"

		# Primary Parameters
		self.Ld_Value = "0.1"
		self.Ld_Notes = "Discharge Level[m]"

		# Primary Parameters
		self.Wd_Value = "100"
		self.Wd_Notes = "Discharge Capacity[kg/h]"

		# Primary Parameters
		self.rWd_Value = "0.5"
		self.rWd_Notes = "Margin for Discharge Capacity[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SUV22301:
	def __init__(self):
		self.ID = 1603
		self.Name = "SUV22301"
		self.Model = "EVUTIL"
		self.Notes = "emergency valve utility"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.mvrev_Value = "0"
		self.mvrev_Notes = "Reverse Flag of mv, 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd, 1:reverse"

class Block_SUV22302:
	def __init__(self):
		self.ID = 1604
		self.Name = "SUV22302"
		self.Model = "EVUTIL"
		self.Notes = "emergency valve utility"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.mvrev_Value = "0"
		self.mvrev_Notes = "Reverse Flag of mv, 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd, 1:reverse"

class Block_SUV2231:
	def __init__(self):
		self.ID = 1605
		self.Name = "SUV2231"
		self.Model = "EVUTIL"
		self.Notes = "emergency valve utility"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.mvrev_Value = "0"
		self.mvrev_Notes = "Reverse Flag of mv, 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd, 1:reverse"

class Block_SV2001:
	def __init__(self):
		self.ID = 1606
		self.Name = "SV2001"
		self.Model = "SFVALVE"
		self.Notes = "Relief Valve(Inline)"

		# Primary Parameters
		self.Wd_Value = "4935"
		self.Wd_Notes = "Design Blow-off Quantity[kg/h]"

		# Primary Parameters
		self.dd_Value = "0"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.Pb_Value = "3236.19"
		self.Pb_Notes = "Blow Start Pressure[kPa]"

		# Primary Parameters
		self.Pe_Value = "2736.06"
		self.Pe_Notes = "Blow Stop Pressure[kPa]"

		# Primary Parameters
		self.Pa_Value = "0"
		self.Pa_Notes = "Pressure Set Adjustment[kPa]"

		# Primary Parameters
		self.rcrit_Value = "0"
		self.rcrit_Notes = "Blow Stop Characteristic Coef.(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SV2003A:
	def __init__(self):
		self.ID = 1607
		self.Name = "SV2003A"
		self.Model = "SFVALVE"
		self.Notes = "Relief Valve(Inline)"

		# Primary Parameters
		self.Wd_Value = "4935"
		self.Wd_Notes = "Design Blow-off Quantity[kg/h]"

		# Primary Parameters
		self.dd_Value = "0"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.Pb_Value = "3236.19"
		self.Pb_Notes = "Blow Start Pressure[kPa]"

		# Primary Parameters
		self.Pe_Value = "2736.06"
		self.Pe_Notes = "Blow Stop Pressure[kPa]"

		# Primary Parameters
		self.Pa_Value = "0"
		self.Pa_Notes = "Pressure Set Adjustment[kPa]"

		# Primary Parameters
		self.rcrit_Value = "0"
		self.rcrit_Notes = "Blow Stop Characteristic Coef.(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SV2003B:
	def __init__(self):
		self.ID = 1608
		self.Name = "SV2003B"
		self.Model = "SFVALVE"
		self.Notes = "Relief Valve(Inline)"

		# Primary Parameters
		self.Wd_Value = "4935"
		self.Wd_Notes = "Design Blow-off Quantity[kg/h]"

		# Primary Parameters
		self.dd_Value = "0"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.Pb_Value = "3236.19"
		self.Pb_Notes = "Blow Start Pressure[kPa]"

		# Primary Parameters
		self.Pe_Value = "2736.06"
		self.Pe_Notes = "Blow Stop Pressure[kPa]"

		# Primary Parameters
		self.Pa_Value = "0"
		self.Pa_Notes = "Pressure Set Adjustment[kPa]"

		# Primary Parameters
		self.rcrit_Value = "0"
		self.rcrit_Notes = "Blow Stop Characteristic Coef.(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SV2005A:
	def __init__(self):
		self.ID = 1609
		self.Name = "SV2005A"
		self.Model = "SFVALVE"
		self.Notes = "Relief Valve(Inline)"

		# Primary Parameters
		self.Wd_Value = "20483"
		self.Wd_Notes = "Design Blow-off Quantity[kg/h]"

		# Primary Parameters
		self.dd_Value = "0"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.Pb_Value = "3236.19"
		self.Pb_Notes = "Blow Start Pressure[kPa]"

		# Primary Parameters
		self.Pe_Value = "2736.06"
		self.Pe_Notes = "Blow Stop Pressure[kPa]"

		# Primary Parameters
		self.Pa_Value = "0"
		self.Pa_Notes = "Pressure Set Adjustment[kPa]"

		# Primary Parameters
		self.rcrit_Value = "0"
		self.rcrit_Notes = "Blow Stop Characteristic Coef.(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SV2005B:
	def __init__(self):
		self.ID = 1610
		self.Name = "SV2005B"
		self.Model = "SFVALVE"
		self.Notes = "Relief Valve(Inline)"

		# Primary Parameters
		self.Wd_Value = "20483"
		self.Wd_Notes = "Design Blow-off Quantity[kg/h]"

		# Primary Parameters
		self.dd_Value = "0"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.Pb_Value = "3236.19"
		self.Pb_Notes = "Blow Start Pressure[kPa]"

		# Primary Parameters
		self.Pe_Value = "2736.06"
		self.Pe_Notes = "Blow Stop Pressure[kPa]"

		# Primary Parameters
		self.Pa_Value = "0"
		self.Pa_Notes = "Pressure Set Adjustment[kPa]"

		# Primary Parameters
		self.rcrit_Value = "0"
		self.rcrit_Notes = "Blow Stop Characteristic Coef.(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SV2007:
	def __init__(self):
		self.ID = 1611
		self.Name = "SV2007"
		self.Model = "SFVALVE"
		self.Notes = "Relief Valve(Inline)"

		# Primary Parameters
		self.Wd_Value = "20483"
		self.Wd_Notes = "Design Blow-off Quantity[kg/h]"

		# Primary Parameters
		self.dd_Value = "0"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.Pb_Value = "3236.19"
		self.Pb_Notes = "Blow Start Pressure[kPa]"

		# Primary Parameters
		self.Pe_Value = "2736.06"
		self.Pe_Notes = "Blow Stop Pressure[kPa]"

		# Primary Parameters
		self.Pa_Value = "0"
		self.Pa_Notes = "Pressure Set Adjustment[kPa]"

		# Primary Parameters
		self.rcrit_Value = "0"
		self.rcrit_Notes = "Blow Stop Characteristic Coef.(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SV2101:
	def __init__(self):
		self.ID = 1612
		self.Name = "SV2101"
		self.Model = "SFVALVE"
		self.Notes = "Relief Valve(Inline)"

		# Primary Parameters
		self.Wd_Value = "3694"
		self.Wd_Notes = "Design Blow-off Quantity[kg/h]"

		# Primary Parameters
		self.dd_Value = "0"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.Pb_Value = "647.239"
		self.Pb_Notes = "Blow Start Pressure[kPa]"

		# Primary Parameters
		self.Pe_Value = "547.211"
		self.Pe_Notes = "Blow Stop Pressure[kPa]"

		# Primary Parameters
		self.Pa_Value = "0"
		self.Pa_Notes = "Pressure Set Adjustment[kPa]"

		# Primary Parameters
		self.rcrit_Value = "0"
		self.rcrit_Notes = "Blow Stop Characteristic Coef.(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SV2102:
	def __init__(self):
		self.ID = 1613
		self.Name = "SV2102"
		self.Model = "SFVALVE"
		self.Notes = "Relief Valve(Inline)"

		# Primary Parameters
		self.Wd_Value = "3612"
		self.Wd_Notes = "Design Blow-off Quantity[kg/h]"

		# Primary Parameters
		self.dd_Value = "0"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.Pb_Value = "647.239"
		self.Pb_Notes = "Blow Start Pressure[kPa]"

		# Primary Parameters
		self.Pe_Value = "547.211"
		self.Pe_Notes = "Blow Stop Pressure[kPa]"

		# Primary Parameters
		self.Pa_Value = "0"
		self.Pa_Notes = "Pressure Set Adjustment[kPa]"

		# Primary Parameters
		self.rcrit_Value = "0"
		self.rcrit_Notes = "Blow Stop Characteristic Coef.(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SV2103:
	def __init__(self):
		self.ID = 1614
		self.Name = "SV2103"
		self.Model = "SFVALVE"
		self.Notes = "Relief Valve(Inline)"

		# Primary Parameters
		self.Wd_Value = "3612"
		self.Wd_Notes = "Design Blow-off Quantity[kg/h]"

		# Primary Parameters
		self.dd_Value = "0"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.Pb_Value = "647.239"
		self.Pb_Notes = "Blow Start Pressure[kPa]"

		# Primary Parameters
		self.Pe_Value = "547.211"
		self.Pe_Notes = "Blow Stop Pressure[kPa]"

		# Primary Parameters
		self.Pa_Value = "0"
		self.Pa_Notes = "Pressure Set Adjustment[kPa]"

		# Primary Parameters
		self.rcrit_Value = "0"
		self.rcrit_Notes = "Blow Stop Characteristic Coef.(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SV2104:
	def __init__(self):
		self.ID = 1615
		self.Name = "SV2104"
		self.Model = "SFVALVE"
		self.Notes = "Relief Valve(Inline)"

		# Primary Parameters
		self.Wd_Value = "12861"
		self.Wd_Notes = "Design Blow-off Quantity[kg/h]"

		# Primary Parameters
		self.dd_Value = "0"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.Pb_Value = "647.239"
		self.Pb_Notes = "Blow Start Pressure[kPa]"

		# Primary Parameters
		self.Pe_Value = "547.211"
		self.Pe_Notes = "Blow Stop Pressure[kPa]"

		# Primary Parameters
		self.Pa_Value = "0"
		self.Pa_Notes = "Pressure Set Adjustment[kPa]"

		# Primary Parameters
		self.rcrit_Value = "0"
		self.rcrit_Notes = "Blow Stop Characteristic Coef.(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SV2105:
	def __init__(self):
		self.ID = 1616
		self.Name = "SV2105"
		self.Model = "SFVALVE"
		self.Notes = "Relief Valve(Inline)"

		# Primary Parameters
		self.Wd_Value = "3708"
		self.Wd_Notes = "Design Blow-off Quantity[kg/h]"

		# Primary Parameters
		self.dd_Value = "0"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.Pb_Value = "647.239"
		self.Pb_Notes = "Blow Start Pressure[kPa]"

		# Primary Parameters
		self.Pe_Value = "547.211"
		self.Pe_Notes = "Blow Stop Pressure[kPa]"

		# Primary Parameters
		self.Pa_Value = "0"
		self.Pa_Notes = "Pressure Set Adjustment[kPa]"

		# Primary Parameters
		self.rcrit_Value = "0"
		self.rcrit_Notes = "Blow Stop Characteristic Coef.(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SV2106:
	def __init__(self):
		self.ID = 1617
		self.Name = "SV2106"
		self.Model = "SFVALVE"
		self.Notes = "Relief Valve(Inline)"

		# Primary Parameters
		self.Wd_Value = "1301"
		self.Wd_Notes = "Design Blow-off Quantity[kg/h]"

		# Primary Parameters
		self.dd_Value = "0"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.Pb_Value = "647.239"
		self.Pb_Notes = "Blow Start Pressure[kPa]"

		# Primary Parameters
		self.Pe_Value = "547.211"
		self.Pe_Notes = "Blow Stop Pressure[kPa]"

		# Primary Parameters
		self.Pa_Value = "0"
		self.Pa_Notes = "Pressure Set Adjustment[kPa]"

		# Primary Parameters
		self.rcrit_Value = "0"
		self.rcrit_Notes = "Blow Stop Characteristic Coef.(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SV2107:
	def __init__(self):
		self.ID = 1618
		self.Name = "SV2107"
		self.Model = "SFVALVE"
		self.Notes = "Relief Valve(Inline)"

		# Primary Parameters
		self.Wd_Value = "8102"
		self.Wd_Notes = "Design Blow-off Quantity[kg/h]"

		# Primary Parameters
		self.dd_Value = "0"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.Pb_Value = "647.239"
		self.Pb_Notes = "Blow Start Pressure[kPa]"

		# Primary Parameters
		self.Pe_Value = "547.211"
		self.Pe_Notes = "Blow Stop Pressure[kPa]"

		# Primary Parameters
		self.Pa_Value = "0"
		self.Pa_Notes = "Pressure Set Adjustment[kPa]"

		# Primary Parameters
		self.rcrit_Value = "0"
		self.rcrit_Notes = "Blow Stop Characteristic Coef.(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SV2109:
	def __init__(self):
		self.ID = 1619
		self.Name = "SV2109"
		self.Model = "SFVALVE"
		self.Notes = "Relief Valve(Inline)"

		# Primary Parameters
		self.Wd_Value = "8102"
		self.Wd_Notes = "Design Blow-off Quantity[kg/h]"

		# Primary Parameters
		self.dd_Value = "0"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.Pb_Value = "647.239"
		self.Pb_Notes = "Blow Start Pressure[kPa]"

		# Primary Parameters
		self.Pe_Value = "547.211"
		self.Pe_Notes = "Blow Stop Pressure[kPa]"

		# Primary Parameters
		self.Pa_Value = "0"
		self.Pa_Notes = "Pressure Set Adjustment[kPa]"

		# Primary Parameters
		self.rcrit_Value = "0"
		self.rcrit_Notes = "Blow Stop Characteristic Coef.(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SV2110:
	def __init__(self):
		self.ID = 1620
		self.Name = "SV2110"
		self.Model = "SFVALVE"
		self.Notes = "Relief Valve(Inline)"

		# Primary Parameters
		self.Wd_Value = "16796"
		self.Wd_Notes = "Design Blow-off Quantity[kg/h]"

		# Primary Parameters
		self.dd_Value = "0"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.Pb_Value = "647.239"
		self.Pb_Notes = "Blow Start Pressure[kPa]"

		# Primary Parameters
		self.Pe_Value = "547.211"
		self.Pe_Notes = "Blow Stop Pressure[kPa]"

		# Primary Parameters
		self.Pa_Value = "0"
		self.Pa_Notes = "Pressure Set Adjustment[kPa]"

		# Primary Parameters
		self.rcrit_Value = "0"
		self.rcrit_Notes = "Blow Stop Characteristic Coef.(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SV2201:
	def __init__(self):
		self.ID = 1621
		self.Name = "SV2201"
		self.Model = "SFVALVE"
		self.Notes = "Relief Valve(Inline)"

		# Primary Parameters
		self.Wd_Value = "90799"
		self.Wd_Notes = "Design Blow-off Quantity[kg/h]"

		# Primary Parameters
		self.dd_Value = "0"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.Pb_Value = "4843.5"
		self.Pb_Notes = "Blow Start Pressure[kPa]"

		# Primary Parameters
		self.Pe_Value = "4095.26"
		self.Pe_Notes = "Blow Stop Pressure[kPa]"

		# Primary Parameters
		self.Pa_Value = "0"
		self.Pa_Notes = "Pressure Set Adjustment[kPa]"

		# Primary Parameters
		self.rcrit_Value = "0"
		self.rcrit_Notes = "Blow Stop Characteristic Coef.(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SV2203:
	def __init__(self):
		self.ID = 1622
		self.Name = "SV2203"
		self.Model = "SFVALVE"
		self.Notes = "Relief Valve(Inline)"

		# Primary Parameters
		self.Wd_Value = "31519"
		self.Wd_Notes = "Design Blow-off Quantity[kg/h]"

		# Primary Parameters
		self.dd_Value = "0"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.Pb_Value = "2373.21"
		self.Pb_Notes = "Blow Start Pressure[kPa]"

		# Primary Parameters
		self.Pe_Value = "2006.44"
		self.Pe_Notes = "Blow Stop Pressure[kPa]"

		# Primary Parameters
		self.Pa_Value = "0"
		self.Pa_Notes = "Pressure Set Adjustment[kPa]"

		# Primary Parameters
		self.rcrit_Value = "0"
		self.rcrit_Notes = "Blow Stop Characteristic Coef.(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SV2206:
	def __init__(self):
		self.ID = 1623
		self.Name = "SV2206"
		self.Model = "SFVALVE"
		self.Notes = "Relief Valve(Inline)"

		# Primary Parameters
		self.Wd_Value = "5449"
		self.Wd_Notes = "Design Blow-off Quantity[kg/h]"

		# Primary Parameters
		self.dd_Value = "0"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.Pb_Value = "647.239"
		self.Pb_Notes = "Blow Start Pressure[kPa]"

		# Primary Parameters
		self.Pe_Value = "547.211"
		self.Pe_Notes = "Blow Stop Pressure[kPa]"

		# Primary Parameters
		self.Pa_Value = "0"
		self.Pa_Notes = "Pressure Set Adjustment[kPa]"

		# Primary Parameters
		self.rcrit_Value = "0"
		self.rcrit_Notes = "Blow Stop Characteristic Coef.(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SV2208:
	def __init__(self):
		self.ID = 1624
		self.Name = "SV2208"
		self.Model = "SFVALVE"
		self.Notes = "Relief Valve(Inline)"

		# Primary Parameters
		self.Wd_Value = "31704"
		self.Wd_Notes = "Design Blow-off Quantity[kg/h]"

		# Primary Parameters
		self.dd_Value = "0"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.Pb_Value = "2373.21"
		self.Pb_Notes = "Blow Start Pressure[kPa]"

		# Primary Parameters
		self.Pe_Value = "2006.44"
		self.Pe_Notes = "Blow Stop Pressure[kPa]"

		# Primary Parameters
		self.Pa_Value = "0"
		self.Pa_Notes = "Pressure Set Adjustment[kPa]"

		# Primary Parameters
		self.rcrit_Value = "0"
		self.rcrit_Notes = "Blow Stop Characteristic Coef.(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SV2210:
	def __init__(self):
		self.ID = 1625
		self.Name = "SV2210"
		self.Model = "SFBLOCK"
		self.Notes = "Relief Valve(Inline)"

		# Primary Parameters
		self.CVb_Value = "10"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "50"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "1"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.02"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.Wd_Value = "3867"
		self.Wd_Notes = "Design Blow-off Quantity[kg/h]"

		# Primary Parameters
		self.dd_Value = "0"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.Pb_Value = "2696.83"
		self.Pb_Notes = "Blow Start Pressure[kPa]"

		# Primary Parameters
		self.Pe_Value = "2280.05"
		self.Pe_Notes = "Blow Stop Pressure[kPa]"

		# Primary Parameters
		self.Pa_Value = "0"
		self.Pa_Notes = "Pressure Set Adjustment[kPa]"

		# Primary Parameters
		self.rcrit_Value = "0"
		self.rcrit_Notes = "Blow Stop Characteristic Coef.(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SV2211:
	def __init__(self):
		self.ID = 1626
		self.Name = "SV2211"
		self.Model = "SFVALVE"
		self.Notes = "Relief Valve(Inline)"

		# Primary Parameters
		self.Wd_Value = "5890"
		self.Wd_Notes = "Design Blow-off Quantity[kg/h]"

		# Primary Parameters
		self.dd_Value = "0"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.Pb_Value = "4843.5"
		self.Pb_Notes = "Blow Start Pressure[kPa]"

		# Primary Parameters
		self.Pe_Value = "4095.26"
		self.Pe_Notes = "Blow Stop Pressure[kPa]"

		# Primary Parameters
		self.Pa_Value = "0"
		self.Pa_Notes = "Pressure Set Adjustment[kPa]"

		# Primary Parameters
		self.rcrit_Value = "0"
		self.rcrit_Notes = "Blow Stop Characteristic Coef.(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SV2213:
	def __init__(self):
		self.ID = 1627
		self.Name = "SV2213"
		self.Model = "SFVALVE"
		self.Notes = "Relief Valve(Inline)"

		# Primary Parameters
		self.Wd_Value = "3000"
		self.Wd_Notes = "Design Blow-off Quantity[kg/h]"

		# Primary Parameters
		self.dd_Value = "1.81"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.Pb_Value = "1000"
		self.Pb_Notes = "Blow Start Pressure[kPa]"

		# Primary Parameters
		self.Pe_Value = "900"
		self.Pe_Notes = "Blow Stop Pressure[kPa]"

		# Primary Parameters
		self.Pa_Value = "0"
		self.Pa_Notes = "Pressure Set Adjustment[kPa]"

		# Primary Parameters
		self.rcrit_Value = "0"
		self.rcrit_Notes = "Blow Stop Characteristic Coef.(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SV2220:
	def __init__(self):
		self.ID = 1628
		self.Name = "SV2220"
		self.Model = "SFVALVE"
		self.Notes = "Relief Valve(Inline)"

		# Primary Parameters
		self.Wd_Value = "3955"
		self.Wd_Notes = "Design Blow-off Quantity[kg/h]"

		# Primary Parameters
		self.dd_Value = "0"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.Pb_Value = "5177.91"
		self.Pb_Notes = "Blow Start Pressure[kPa]"

		# Primary Parameters
		self.Pe_Value = "4377.69"
		self.Pe_Notes = "Blow Stop Pressure[kPa]"

		# Primary Parameters
		self.Pa_Value = "0"
		self.Pa_Notes = "Pressure Set Adjustment[kPa]"

		# Primary Parameters
		self.rcrit_Value = "0"
		self.rcrit_Notes = "Blow Stop Characteristic Coef.(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SV2226:
	def __init__(self):
		self.ID = 1629
		self.Name = "SV2226"
		self.Model = "SFVALVE"
		self.Notes = "Relief Valve(Inline)"

		# Primary Parameters
		self.Wd_Value = "8993"
		self.Wd_Notes = "Design Blow-off Quantity[kg/h]"

		# Primary Parameters
		self.dd_Value = "0"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.Pb_Value = "722.75"
		self.Pb_Notes = "Blow Start Pressure[kPa]"

		# Primary Parameters
		self.Pe_Value = "611.935"
		self.Pe_Notes = "Blow Stop Pressure[kPa]"

		# Primary Parameters
		self.Pa_Value = "0"
		self.Pa_Notes = "Pressure Set Adjustment[kPa]"

		# Primary Parameters
		self.rcrit_Value = "0"
		self.rcrit_Notes = "Blow Stop Characteristic Coef.(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SV2232:
	def __init__(self):
		self.ID = 1630
		self.Name = "SV2232"
		self.Model = "SFVALVE"
		self.Notes = "Relief Valve(Inline)"

		# Primary Parameters
		self.Wd_Value = "2182"
		self.Wd_Notes = "Design Blow-off Quantity[kg/h]"

		# Primary Parameters
		self.dd_Value = "0"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.Pb_Value = "2373.21"
		self.Pb_Notes = "Blow Start Pressure[kPa]"

		# Primary Parameters
		self.Pe_Value = "2006.44"
		self.Pe_Notes = "Blow Stop Pressure[kPa]"

		# Primary Parameters
		self.Pa_Value = "0"
		self.Pa_Notes = "Pressure Set Adjustment[kPa]"

		# Primary Parameters
		self.rcrit_Value = "0"
		self.rcrit_Notes = "Blow Stop Characteristic Coef.(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SV2265:
	def __init__(self):
		self.ID = 1631
		self.Name = "SV2265"
		self.Model = "SFBLOCK"
		self.Notes = "Relief Valve(Inline)"

		# Primary Parameters
		self.CVb_Value = "2"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "50"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "1"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.02"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.Wd_Value = "1347"
		self.Wd_Notes = "Design Blow-off Quantity[kg/h]"

		# Primary Parameters
		self.dd_Value = "0"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.Pb_Value = "722.75"
		self.Pb_Notes = "Blow Start Pressure[kPa]"

		# Primary Parameters
		self.Pe_Value = "611.935"
		self.Pe_Notes = "Blow Stop Pressure[kPa]"

		# Primary Parameters
		self.Pa_Value = "0"
		self.Pa_Notes = "Pressure Set Adjustment[kPa]"

		# Primary Parameters
		self.rcrit_Value = "0"
		self.rcrit_Notes = "Blow Stop Characteristic Coef.(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SV2912:
	def __init__(self):
		self.ID = 1632
		self.Name = "SV2912"
		self.Model = "SFVALVE"
		self.Notes = "Relief Valve(Inline)"

		# Primary Parameters
		self.Wd_Value = "678"
		self.Wd_Notes = "Design Blow-off Quantity[kg/h]"

		# Primary Parameters
		self.dd_Value = "0"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.Pb_Value = "647.239"
		self.Pb_Notes = "Blow Start Pressure[kPa]"

		# Primary Parameters
		self.Pe_Value = "547.211"
		self.Pe_Notes = "Blow Stop Pressure[kPa]"

		# Primary Parameters
		self.Pa_Value = "0"
		self.Pa_Notes = "Pressure Set Adjustment[kPa]"

		# Primary Parameters
		self.rcrit_Value = "0"
		self.rcrit_Notes = "Blow Stop Characteristic Coef.(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SV2913:
	def __init__(self):
		self.ID = 1633
		self.Name = "SV2913"
		self.Model = "SFVALVE"
		self.Notes = "Relief Valve(Inline)"

		# Primary Parameters
		self.Wd_Value = "1153"
		self.Wd_Notes = "Design Blow-off Quantity[kg/h]"

		# Primary Parameters
		self.dd_Value = "0"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.Pb_Value = "647.239"
		self.Pb_Notes = "Blow Start Pressure[kPa]"

		# Primary Parameters
		self.Pe_Value = "547.211"
		self.Pe_Notes = "Blow Stop Pressure[kPa]"

		# Primary Parameters
		self.Pa_Value = "0"
		self.Pa_Notes = "Pressure Set Adjustment[kPa]"

		# Primary Parameters
		self.rcrit_Value = "0"
		self.rcrit_Notes = "Blow Stop Characteristic Coef.(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SV2921:
	def __init__(self):
		self.ID = 1634
		self.Name = "SV2921"
		self.Model = "SFVALVE"
		self.Notes = "Relief Valve(Inline)"

		# Primary Parameters
		self.Wd_Value = "3762"
		self.Wd_Notes = "Design Blow-off Quantity[kg/h]"

		# Primary Parameters
		self.dd_Value = "0"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.Pb_Value = "3559.81"
		self.Pb_Notes = "Blow Start Pressure[kPa]"

		# Primary Parameters
		self.Pe_Value = "3009.66"
		self.Pe_Notes = "Blow Stop Pressure[kPa]"

		# Primary Parameters
		self.Pa_Value = "0"
		self.Pa_Notes = "Pressure Set Adjustment[kPa]"

		# Primary Parameters
		self.rcrit_Value = "0"
		self.rcrit_Notes = "Blow Stop Characteristic Coef.(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_SV2922:
	def __init__(self):
		self.ID = 1635
		self.Name = "SV2922"
		self.Model = "SFVALVE"
		self.Notes = "Relief Valve(Inline)"

		# Primary Parameters
		self.Wd_Value = "10000"
		self.Wd_Notes = "Design Blow-off Quantity[kg/h]"

		# Primary Parameters
		self.dd_Value = "2"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.Pb_Value = "5500"
		self.Pb_Notes = "Blow Start Pressure[kPa]"

		# Primary Parameters
		self.Pe_Value = "4950"
		self.Pe_Notes = "Blow Stop Pressure[kPa]"

		# Primary Parameters
		self.Pa_Value = "0"
		self.Pa_Notes = "Pressure Set Adjustment[kPa]"

		# Primary Parameters
		self.rcrit_Value = "0"
		self.rcrit_Notes = "Blow Stop Characteristic Coef.(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TC2110:
	def __init__(self):
		self.ID = 1636
		self.Name = "TC2110"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "90"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "150"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([100., -20.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "0"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_TC2210A:
	def __init__(self):
		self.ID = 1637
		self.Name = "TC2210A"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "60"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "90"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([100.,   0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "0"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_TC2210B:
	def __init__(self):
		self.ID = 1638
		self.Name = "TC2210B"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "60"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "90"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([100.,   0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "0"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_TC2233:
	def __init__(self):
		self.ID = 1639
		self.Name = "TC2233"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "30"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "60"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([150.,   0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_TC2262A:
	def __init__(self):
		self.ID = 1640
		self.Name = "TC2262A"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "30"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "100"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([100.,   0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_TC2262B:
	def __init__(self):
		self.ID = 1641
		self.Name = "TC2262B"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "30"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "100"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([100.,   0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_TC2264:
	def __init__(self):
		self.ID = 1642
		self.Name = "TC2264"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "30"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "100"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([150.,   0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "0"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_TC2284:
	def __init__(self):
		self.ID = 1643
		self.Name = "TC2284"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "30"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "100"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([100.,   0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "0"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_TC2312:
	def __init__(self):
		self.ID = 1644
		self.Name = "TC2312"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "30"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "100"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([150.,   0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_TC2557:
	def __init__(self):
		self.ID = 1645
		self.Name = "TC2557"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "50"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "100"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([100.,   0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "0"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_TC2561:
	def __init__(self):
		self.ID = 1646
		self.Name = "TC2561"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "30"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "100"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([100.,   0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "0"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_TC2911:
	def __init__(self):
		self.ID = 1647
		self.Name = "TC2911"
		self.Model = "_DONOFFC"
		self.Notes = "ON/OFF Controller"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([100., -50.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.EHL_Value = "0.5"
		self.EHL_Notes = "Upper Limit of Deviation[%]"

		# Primary Parameters
		self.ELL_Value = "0.5"
		self.ELL_Notes = "Lower Limit of Deviation[%]"

		# Primary Parameters
		self.CS_Value = "0"
		self.CS_Notes = "On/Off Hysteresis[%]"

		# Primary Parameters
		self.PVTRK_Value = "0"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.MVTYPE_Value = "0"
		self.MVTYPE_Notes = "Output Type(0:2-position,1:3-position)"

		# Primary Parameters
		self.INCDEC_Value = "0"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.MVSPAN_Value = "1"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

class Block_TC2912:
	def __init__(self):
		self.ID = 1648
		self.Name = "TC2912"
		self.Model = "_DONOFFC"
		self.Notes = "ON/OFF Controller"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([100., -50.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.EHL_Value = "0.5"
		self.EHL_Notes = "Upper Limit of Deviation[%]"

		# Primary Parameters
		self.ELL_Value = "0.5"
		self.ELL_Notes = "Lower Limit of Deviation[%]"

		# Primary Parameters
		self.CS_Value = "0"
		self.CS_Notes = "On/Off Hysteresis[%]"

		# Primary Parameters
		self.PVTRK_Value = "0"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.MVTYPE_Value = "0"
		self.MVTYPE_Notes = "Output Type(0:2-position,1:3-position)"

		# Primary Parameters
		self.INCDEC_Value = "0"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.MVSPAN_Value = "1"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

class Block_TC2913:
	def __init__(self):
		self.ID = 1649
		self.Name = "TC2913"
		self.Model = "_DMHVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([100., -50.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_TC2914:
	def __init__(self):
		self.ID = 1650
		self.Name = "TC2914"
		self.Model = "_DMHVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([100., -50.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_TC2917:
	def __init__(self):
		self.ID = 1651
		self.Name = "TC2917"
		self.Model = "_DPIDVC"
		self.Notes = "ON/OFF Controller"

		# Primary Parameters
		self.PB_Value = "50"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "90"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([100., -50.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "0"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "0"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "1"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_TC2918:
	def __init__(self):
		self.ID = 1652
		self.Name = "TC2918"
		self.Model = "_DONOFFC"
		self.Notes = "ON/OFF Controller"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([100., -50.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.EHL_Value = "2"
		self.EHL_Notes = "Upper Limit of Deviation[%]"

		# Primary Parameters
		self.ELL_Value = "2"
		self.ELL_Notes = "Lower Limit of Deviation[%]"

		# Primary Parameters
		self.CS_Value = "0"
		self.CS_Notes = "On/Off Hysteresis[%]"

		# Primary Parameters
		self.PVTRK_Value = "0"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.MVTYPE_Value = "0"
		self.MVTYPE_Notes = "Output Type(0:2-position,1:3-position)"

		# Primary Parameters
		self.INCDEC_Value = "0"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.MVSPAN_Value = "1"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

class Block_TC2932:
	def __init__(self):
		self.ID = 1653
		self.Name = "TC2932"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "50"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "120"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([360.,   0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "0"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_TC2933:
	def __init__(self):
		self.ID = 1654
		self.Name = "TC2933"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "50"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "120"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([200.,   0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "0"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_TC2943:
	def __init__(self):
		self.ID = 1655
		self.Name = "TC2943"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "30"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "90"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([150.,   0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_TC2944:
	def __init__(self):
		self.ID = 1656
		self.Name = "TC2944"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "50"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "90"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([1., 0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "1"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_TC2945:
	def __init__(self):
		self.ID = 1657
		self.Name = "TC2945"
		self.Model = "_DPIDVC"
		self.Notes = "PID Controller(Velocity Type)"

		# Primary Parameters
		self.PB_Value = "100"
		self.PB_Notes = "Proportional Band[%]"

		# Primary Parameters
		self.TI_Value = "30"
		self.TI_Notes = "Integral Time[s]"

		# Primary Parameters
		self.TD_Value = "0"
		self.TD_Notes = "Derivative Time[s]"

		# Primary Parameters
		self.ETA_Value = "0.1"
		self.ETA_Notes = "Reciprocal of Incomplete Diff. Gain"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([150.,   0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "1"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.ACTMODE_Value = "0"
		self.ACTMODE_Notes = "Control Method(0:PID,1:PI-D,2:I-PD)"

		# Primary Parameters
		self.INCDEC_Value = "0"
		self.INCDEC_Notes = "Control Action(0:Direct,1:Reverse)"

		# Primary Parameters
		self.GGAP_Value = "1"
		self.GGAP_Notes = "Gap Gain(0.0-1.0)"

		# Primary Parameters
		self.BGAP_Value = "0"
		self.BGAP_Notes = "Gap(0-100%)"

		# Primary Parameters
		self.MVSPAN_Value = "100"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.MVD_Value = "0"
		self.MVD_Notes = "Upper Limit of MV Change(0-1)[1/min]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_TG2001:
	def __init__(self):
		self.ID = 1658
		self.Name = "TG2001"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "25"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TG2002:
	def __init__(self):
		self.ID = 1659
		self.Name = "TG2002"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "25"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TG2003:
	def __init__(self):
		self.ID = 1660
		self.Name = "TG2003"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "25"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TG2004A:
	def __init__(self):
		self.ID = 1661
		self.Name = "TG2004A"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

class Block_TG2004B:
	def __init__(self):
		self.ID = 1662
		self.Name = "TG2004B"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "300"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

class Block_TG2005A:
	def __init__(self):
		self.ID = 1663
		self.Name = "TG2005A"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "300"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

class Block_TG2005B:
	def __init__(self):
		self.ID = 1664
		self.Name = "TG2005B"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "300"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

class Block_TG2006:
	def __init__(self):
		self.ID = 1665
		self.Name = "TG2006"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "300"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

class Block_TG2111:
	def __init__(self):
		self.ID = 1666
		self.Name = "TG2111"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "-20"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "80"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

class Block_TG2112:
	def __init__(self):
		self.ID = 1667
		self.Name = "TG2112"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "-20"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "80"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "30"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_TG2131:
	def __init__(self):
		self.ID = 1668
		self.Name = "TG2131"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

class Block_TG2141:
	def __init__(self):
		self.ID = 1669
		self.Name = "TG2141"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

class Block_TG2151:
	def __init__(self):
		self.ID = 1670
		self.Name = "TG2151"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

class Block_TG2171:
	def __init__(self):
		self.ID = 1671
		self.Name = "TG2171"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

class Block_TG2181:
	def __init__(self):
		self.ID = 1672
		self.Name = "TG2181"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "300"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "30"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TG2182:
	def __init__(self):
		self.ID = 1673
		self.Name = "TG2182"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "300"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "30"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TG2182B:
	def __init__(self):
		self.ID = 1674
		self.Name = "TG2182B"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "300"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "30"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TG2183:
	def __init__(self):
		self.ID = 1675
		self.Name = "TG2183"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

class Block_TG2191:
	def __init__(self):
		self.ID = 1676
		self.Name = "TG2191"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "0"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

class Block_TG2210:
	def __init__(self):
		self.ID = 1677
		self.Name = "TG2210"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

class Block_TG2265:
	def __init__(self):
		self.ID = 1678
		self.Name = "TG2265"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "30"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TG2266:
	def __init__(self):
		self.ID = 1679
		self.Name = "TG2266"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "30"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TG2268:
	def __init__(self):
		self.ID = 1680
		self.Name = "TG2268"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "200"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

class Block_TG2269:
	def __init__(self):
		self.ID = 1681
		self.Name = "TG2269"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "0"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "30"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TG2273:
	def __init__(self):
		self.ID = 1682
		self.Name = "TG2273"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "30"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TG2279:
	def __init__(self):
		self.ID = 1683
		self.Name = "TG2279"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "30"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TG2281:
	def __init__(self):
		self.ID = 1684
		self.Name = "TG2281"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "30"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TG2282:
	def __init__(self):
		self.ID = 1685
		self.Name = "TG2282"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "50"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "30"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_TG2323:
	def __init__(self):
		self.ID = 1686
		self.Name = "TG2323"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "200"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "30"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TG2325:
	def __init__(self):
		self.ID = 1687
		self.Name = "TG2325"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "200"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

class Block_TG2502:
	def __init__(self):
		self.ID = 1688
		self.Name = "TG2502"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "30"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TG2503:
	def __init__(self):
		self.ID = 1689
		self.Name = "TG2503"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "30"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TG2511:
	def __init__(self):
		self.ID = 1690
		self.Name = "TG2511"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "150"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

class Block_TG2552:
	def __init__(self):
		self.ID = 1691
		self.Name = "TG2552"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

class Block_TG2576:
	def __init__(self):
		self.ID = 1692
		self.Name = "TG2576"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

class Block_TG2901A:
	def __init__(self):
		self.ID = 1693
		self.Name = "TG2901A"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "-50"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "150"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

class Block_TG2901B:
	def __init__(self):
		self.ID = 1694
		self.Name = "TG2901B"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "200"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

class Block_TG2903:
	def __init__(self):
		self.ID = 1695
		self.Name = "TG2903"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "300"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "30"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TG2904:
	def __init__(self):
		self.ID = 1696
		self.Name = "TG2904"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "150"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "30"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TG2911:
	def __init__(self):
		self.ID = 1697
		self.Name = "TG2911"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "-20"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "80"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

class Block_TG2914:
	def __init__(self):
		self.ID = 1698
		self.Name = "TG2914"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "-30"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "50"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "25"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "5"
		self.s1_Notes = "System No."

class Block_TG2915:
	def __init__(self):
		self.ID = 1699
		self.Name = "TG2915"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "150"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "25"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "5"
		self.s1_Notes = "System No."

class Block_TG2921:
	def __init__(self):
		self.ID = 1700
		self.Name = "TG2921"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

class Block_TG2922:
	def __init__(self):
		self.ID = 1701
		self.Name = "TG2922"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "30"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TG2923:
	def __init__(self):
		self.ID = 1702
		self.Name = "TG2923"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

class Block_TG2925:
	def __init__(self):
		self.ID = 1703
		self.Name = "TG2925"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "30"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TG2926:
	def __init__(self):
		self.ID = 1704
		self.Name = "TG2926"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

class Block_TG2928:
	def __init__(self):
		self.ID = 1705
		self.Name = "TG2928"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "30"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TG2933:
	def __init__(self):
		self.ID = 1706
		self.Name = "TG2933"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

class Block_TG2935:
	def __init__(self):
		self.ID = 1707
		self.Name = "TG2935"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

class Block_TG2943:
	def __init__(self):
		self.ID = 1708
		self.Name = "TG2943"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "30"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TG2947:
	def __init__(self):
		self.ID = 1709
		self.Name = "TG2947"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "30"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TG2951:
	def __init__(self):
		self.ID = 1710
		self.Name = "TG2951"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "300"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "30"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TG2952:
	def __init__(self):
		self.ID = 1711
		self.Name = "TG2952"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "300"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "30"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TK2501:
	def __init__(self):
		self.ID = 1712
		self.Name = "TK2501"
		self.Model = "_FLASHD"
		self.Notes = "Flash Drum"

		# General Parameters
		self._NZLHGT_Value = "0"
		self._NZLHGT_Notes = "Specify Nozzle Heights(0:N,1:Y)"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.y_Value = "(31)"
		self.y_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.y_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "2.9"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "12"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Gw_Value = "7000"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Uv_Value = "40"
		self.Uv_Notes = "Vapor Phase Heat Transfer Coef.[W/m2K]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Vv0_Value = "0"
		self.Vv0_Notes = "Volume of Connected Pipe[m3]"

		# Primary Parameters
		self.Rdis_Value = "0.05"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.kG_Value = "0.1"
		self.kG_Notes = "Mass Transfer Rate Coef.[kmol/m2kPah]"

		# Primary Parameters
		self.Fcons_Value = "1"
		self.Fcons_Notes = "Flow Constraints(1:Yes,0:No)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.1, 0.1, 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ])
		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TK2502:
	def __init__(self):
		self.ID = 1713
		self.Name = "TK2502"
		self.Model = "FLASHB"
		self.Notes = "Flash Drum"

		# Primary Parameters
		self.u_Value = "(31)"
		self.u_Notes = "Molar Holdup[kmol]"

		# Primary Parameters List Value
		self.u_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.T_Value = "30"
		self.T_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "2.2"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "2.7"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.Fcons_Value = "1"
		self.Fcons_Notes = "Flow Constraints(1:Yes,0:No)"

		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TK2503:
	def __init__(self):
		self.ID = 1714
		self.Name = "TK2503"
		self.Model = "_FLASHD"
		self.Notes = "Flash Drum"

		# General Parameters
		self._NZLHGT_Value = "0"
		self._NZLHGT_Notes = "Specify Nozzle Heights(0:N,1:Y)"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.y_Value = "(31)"
		self.y_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.y_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "1.3"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "1.3"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Gw_Value = "1000"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Uv_Value = "40"
		self.Uv_Notes = "Vapor Phase Heat Transfer Coef.[W/m2K]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Vv0_Value = "0"
		self.Vv0_Notes = "Volume of Connected Pipe[m3]"

		# Primary Parameters
		self.Rdis_Value = "0.05"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.kG_Value = "0.1"
		self.kG_Notes = "Mass Transfer Rate Coef.[kmol/m2kPah]"

		# Primary Parameters
		self.Fcons_Value = "1"
		self.Fcons_Notes = "Flow Constraints(1:Yes,0:No)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.1, 0.1, 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ])
		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TK2504:
	def __init__(self):
		self.ID = 1715
		self.Name = "TK2504"
		self.Model = "TANK_L1"
		self.Notes = "Flash Drum"

		# Primary Parameters
		self.u_Value = "(31)"
		self.u_Notes = "Molar Holdup[kmol]"

		# Primary Parameters List Value
		self.u_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.T_Value = "30"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.A_Value = "1.33"
		self.A_Notes = "Cross Section Area[m2]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.Lover_Value = "1.3"
		self.Lover_Notes = "Overflow Height[m]"

		# Primary Parameters
		self.Fover_Value = "5000"
		self.Fover_Notes = "Overflow Rate[kg/h]"

		# Primary Parameters
		self.calFover_Value = "1"
		self.calFover_Notes = "Overflow Type(0:Const 1:Calc)"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TK2507:
	def __init__(self):
		self.ID = 1716
		self.Name = "TK2507"
		self.Model = "TANK_LS1"
		self.Notes = "Flash Drum"

		# General Parameters
		self._TYPE_Value = "0"
		self._TYPE_Notes = "Liq. Level Calc. Type(0:C.Sec.,1:Shape)"

		# Primary Parameters
		self.u_Value = "(31)"
		self.u_Notes = "Molar Holdup[kmol]"

		# Primary Parameters List Value
		self.u_List_Value = array([ 0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.   ,
        0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.   ,
        0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.   , 12.179,  0.   ,
        0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.   ])
		# Primary Parameters
		self.T_Value = "30"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.A_Value = "0.785"
		self.A_Notes = "Cross Section Area[m2]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TK2508:
	def __init__(self):
		self.ID = 1717
		self.Name = "TK2508"
		self.Model = "FLASHB"
		self.Notes = "Flash Drum"

		# Primary Parameters
		self.u_Value = "(31)"
		self.u_Notes = "Molar Holdup[kmol]"

		# Primary Parameters List Value
		self.u_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.T_Value = "30"
		self.T_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "1.3"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "1.3"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.Fcons_Value = "1"
		self.Fcons_Notes = "Flow Constraints(1:Yes,0:No)"

		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TK2941:
	def __init__(self):
		self.ID = 1718
		self.Name = "TK2941"
		self.Model = "TANK_LS1"
		self.Notes = "Flash Drum"

		# General Parameters
		self._TYPE_Value = "0"
		self._TYPE_Notes = "Liq. Level Calc. Type(0:C.Sec.,1:Shape)"

		# Primary Parameters
		self.u_Value = "(31)"
		self.u_Notes = "Molar Holdup[kmol]"

		# Primary Parameters List Value
		self.u_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.T_Value = "30"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.A_Value = "1.77"
		self.A_Notes = "Cross Section Area[m2]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TSW2262:
	def __init__(self):
		self.ID = 1719
		self.Name = "TSW2262"
		self.Model = "_DMHVC"
		self.Notes = "Manual Manipulator"

		# Primary Parameters
		self.PVSPAN_Value = "(2)"
		self.PVSPAN_Notes = "PV Span/Base"

		# Primary Parameters List Value
		self.PVSPAN_List_Value = array([1., 0.])
		# Primary Parameters
		self.TFILTR_Value = "0"
		self.TFILTR_Notes = "PV Smoothing Time Constant[s]"

		# Primary Parameters
		self.PVTRK_Value = "0"
		self.PVTRK_Notes = "PV Tracking(0:OFF, 1:ON)"

		# Primary Parameters
		self.MVSPAN_Value = "1"
		self.MVSPAN_Notes = "MV Span"

		# Primary Parameters
		self.MVH_Value = "1"
		self.MVH_Notes = "Upper Limit of MV"

		# Primary Parameters
		self.MVL_Value = "0"
		self.MVL_Notes = "Lower Limit of MV"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

		# Primary Parameters
		self.INFLAG_Value = "0"
		self.INFLAG_Notes = "Tag Input Flag(0:Not,1:used)"

		# Primary Parameters
		self.CMODSt_Value = "2"
		self.CMODSt_Notes = "Control Mode Start Value"

		# Primary Parameters
		self.ncMV_Value = "0"
		self.ncMV_Notes = "Flow Rate Calculation Index"

class Block_TSW2262A:
	def __init__(self):
		self.ID = 1720
		self.Name = "TSW2262A"
		self.Model = "SELECTOR"
		self.Notes = "Signal Selector"

		# Primary Parameters
		self.PVSPAN1_Value = "(2)"
		self.PVSPAN1_Notes = "Input 1 Span/Base"

		# Primary Parameters List Value
		self.PVSPAN1_List_Value = array([1., 0.])
		# Primary Parameters
		self.PVSPAN2_Value = "(2)"
		self.PVSPAN2_Notes = "Input 2 Span/Base"

		# Primary Parameters List Value
		self.PVSPAN2_List_Value = array([1., 0.])
		# Primary Parameters
		self.PVSPAN3_Value = "(2)"
		self.PVSPAN3_Notes = "Input 3 Span/Base Specification"

		# Primary Parameters List Value
		self.PVSPAN3_List_Value = array([1., 0.])
		# Primary Parameters
		self.MVSPAN_Value = "1"
		self.MVSPAN_Notes = "MV Span"

class Block_TT2001:
	def __init__(self):
		self.ID = 1721
		self.Name = "TT2001"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "25"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TT2002:
	def __init__(self):
		self.ID = 1722
		self.Name = "TT2002"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "1"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.jv_Value = "12"
		self.jv_Notes = "Element Number (>=1)"

class Block_TT2003:
	def __init__(self):
		self.ID = 1723
		self.Name = "TT2003"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "25"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TT2004:
	def __init__(self):
		self.ID = 1724
		self.Name = "TT2004"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "1"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.jv_Value = "1"
		self.jv_Notes = "Element Number (>=1)"

class Block_TT2005:
	def __init__(self):
		self.ID = 1725
		self.Name = "TT2005"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "25"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TT2006A:
	def __init__(self):
		self.ID = 1726
		self.Name = "TT2006A"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "300"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

class Block_TT2006B:
	def __init__(self):
		self.ID = 1727
		self.Name = "TT2006B"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "300"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

class Block_TT2110:
	def __init__(self):
		self.ID = 1728
		self.Name = "TT2110"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "-20"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "80"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

class Block_TT2201:
	def __init__(self):
		self.ID = 1729
		self.Name = "TT2201"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "30"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TT2203:
	def __init__(self):
		self.ID = 1730
		self.Name = "TT2203"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "25"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TT2210:
	def __init__(self):
		self.ID = 1731
		self.Name = "TT2210"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

class Block_TT2211:
	def __init__(self):
		self.ID = 1732
		self.Name = "TT2211"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

class Block_TT2212:
	def __init__(self):
		self.ID = 1733
		self.Name = "TT2212"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Units)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

class Block_TT2215:
	def __init__(self):
		self.ID = 1734
		self.Name = "TT2215"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "30"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TT2216:
	def __init__(self):
		self.ID = 1735
		self.Name = "TT2216"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "30"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TT2217:
	def __init__(self):
		self.ID = 1736
		self.Name = "TT2217"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "30"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TT2218:
	def __init__(self):
		self.ID = 1737
		self.Name = "TT2218"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "30"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TT2219:
	def __init__(self):
		self.ID = 1738
		self.Name = "TT2219"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "50"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "30"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TT2231:
	def __init__(self):
		self.ID = 1739
		self.Name = "TT2231"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "150"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "30"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TT2232:
	def __init__(self):
		self.ID = 1740
		self.Name = "TT2232"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "150"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

class Block_TT2233:
	def __init__(self):
		self.ID = 1741
		self.Name = "TT2233"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "150"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

class Block_TT2234:
	def __init__(self):
		self.ID = 1742
		self.Name = "TT2234"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "150"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "30"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TT2235:
	def __init__(self):
		self.ID = 1743
		self.Name = "TT2235"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "150"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "30"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TT2261:
	def __init__(self):
		self.ID = 1744
		self.Name = "TT2261"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

class Block_TT2262A:
	def __init__(self):
		self.ID = 1745
		self.Name = "TT2262A"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "30"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TT2262B:
	def __init__(self):
		self.ID = 1746
		self.Name = "TT2262B"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "30"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TT2264:
	def __init__(self):
		self.ID = 1747
		self.Name = "TT2264"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "1"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "150"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.jv_Value = "5"
		self.jv_Notes = "Element Number (>=1)"

class Block_TT2265:
	def __init__(self):
		self.ID = 1748
		self.Name = "TT2265"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "200"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "30"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TT2266:
	def __init__(self):
		self.ID = 1749
		self.Name = "TT2266"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "300"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "30"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TT2270:
	def __init__(self):
		self.ID = 1750
		self.Name = "TT2270"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

class Block_TT2271:
	def __init__(self):
		self.ID = 1751
		self.Name = "TT2271"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

class Block_TT2280:
	def __init__(self):
		self.ID = 1752
		self.Name = "TT2280"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "1"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.jv_Value = "12"
		self.jv_Notes = "Element Number (>=1)"

class Block_TT2281:
	def __init__(self):
		self.ID = 1753
		self.Name = "TT2281"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "30"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TT2283:
	def __init__(self):
		self.ID = 1754
		self.Name = "TT2283"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

class Block_TT2284:
	def __init__(self):
		self.ID = 1755
		self.Name = "TT2284"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

class Block_TT2285:
	def __init__(self):
		self.ID = 1756
		self.Name = "TT2285"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "200"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "30"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TT2286:
	def __init__(self):
		self.ID = 1757
		self.Name = "TT2286"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

class Block_TT2290:
	def __init__(self):
		self.ID = 1758
		self.Name = "TT2290"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "30"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TT2310:
	def __init__(self):
		self.ID = 1759
		self.Name = "TT2310"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "150"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "30"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TT2312:
	def __init__(self):
		self.ID = 1760
		self.Name = "TT2312"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "1"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "150"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.jv_Value = "5"
		self.jv_Notes = "Element Number (>=1)"

class Block_TT2320:
	def __init__(self):
		self.ID = 1761
		self.Name = "TT2320"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

class Block_TT2511:
	def __init__(self):
		self.ID = 1762
		self.Name = "TT2511"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

class Block_TT2553:
	def __init__(self):
		self.ID = 1763
		self.Name = "TT2553"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "1"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "400"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.jv_Value = "1"
		self.jv_Notes = "Element Number (>=1)"

class Block_TT2554:
	def __init__(self):
		self.ID = 1764
		self.Name = "TT2554"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "1"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "400"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.jv_Value = "20"
		self.jv_Notes = "Element Number (>=1)"

class Block_TT2557:
	def __init__(self):
		self.ID = 1765
		self.Name = "TT2557"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "1"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.jv_Value = "5"
		self.jv_Notes = "Element Number (>=1)"

class Block_TT2559:
	def __init__(self):
		self.ID = 1766
		self.Name = "TT2559"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "1"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "400"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.jv_Value = "1"
		self.jv_Notes = "Element Number (>=1)"

class Block_TT2560:
	def __init__(self):
		self.ID = 1767
		self.Name = "TT2560"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "1"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "400"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.jv_Value = "20"
		self.jv_Notes = "Element Number (>=1)"

class Block_TT2561:
	def __init__(self):
		self.ID = 1768
		self.Name = "TT2561"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "30"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TT2910:
	def __init__(self):
		self.ID = 1769
		self.Name = "TT2910"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "-20"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "80"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "25"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_TT2911:
	def __init__(self):
		self.ID = 1770
		self.Name = "TT2911"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "-20"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "80"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "25"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_TT2912:
	def __init__(self):
		self.ID = 1771
		self.Name = "TT2912"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "-50"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "50"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "25"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_TT2913:
	def __init__(self):
		self.ID = 1772
		self.Name = "TT2913"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "-50"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "50"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "25"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "5"
		self.s1_Notes = "System No."

class Block_TT2914:
	def __init__(self):
		self.ID = 1773
		self.Name = "TT2914"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "-50"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "50"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "25"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "5"
		self.s1_Notes = "System No."

class Block_TT2917:
	def __init__(self):
		self.ID = 1774
		self.Name = "TT2917"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "25"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "5"
		self.s1_Notes = "System No."

class Block_TT2918:
	def __init__(self):
		self.ID = 1775
		self.Name = "TT2918"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "-50"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "50"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "25"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_TT2931:
	def __init__(self):
		self.ID = 1776
		self.Name = "TT2931"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "360"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "30"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TT2932:
	def __init__(self):
		self.ID = 1777
		self.Name = "TT2932"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "360"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

class Block_TT2933:
	def __init__(self):
		self.ID = 1778
		self.Name = "TT2933"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "200"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

class Block_TT2941:
	def __init__(self):
		self.ID = 1779
		self.Name = "TT2941"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "30"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TT2942:
	def __init__(self):
		self.ID = 1780
		self.Name = "TT2942"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "100"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "30"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TT2943:
	def __init__(self):
		self.ID = 1781
		self.Name = "TT2943"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "150"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

class Block_TT2944:
	def __init__(self):
		self.ID = 1782
		self.Name = "TT2944"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "150"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

class Block_TT2945:
	def __init__(self):
		self.ID = 1783
		self.Name = "TT2945"
		self.Model = "TRANSTU"
		self.Notes = "Thermometer(for Streams)"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Type(0:scalar 1:vector)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "150"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

class Block_TT2946:
	def __init__(self):
		self.ID = 1784
		self.Name = "TT2946"
		self.Model = "TRANSTS"
		self.Notes = "Thermometer(for Streams)"

		# Primary Parameters
		self.Tl_Value = "0"
		self.Tl_Notes = "Lower Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.Th_Value = "150"
		self.Th_Notes = "Upper Limit of Measurement(in ind. unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit of Indication(1:C,2:K,3:F,4:R)"

		# Primary Parameters
		self.tau_Value = "10"
		self.tau_Notes = "Time Constant of 1st Order Lag[s]"

		# Primary Parameters
		self.Tfail_Value = "0"
		self.Tfail_Notes = "Indicated Temp. on Failure(in ind. unit)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.Tfinal_Value = "30"
		self.Tfinal_Notes = "Final Temp.[C]"

		# Primary Parameters
		self.Ttau_Value = "10"
		self.Ttau_Notes = "Time Const. of Temp. Descent[s]"

		# Primary Parameters
		self.TSt_Value = "25"
		self.TSt_Notes = "Temperature Start Value[C,K]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TU2110:
	def __init__(self):
		self.ID = 1785
		self.Name = "TU2110"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_TU2210A:
	def __init__(self):
		self.ID = 1786
		self.Name = "TU2210A"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_TU2210B:
	def __init__(self):
		self.ID = 1787
		self.Name = "TU2210B"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_TU2262:
	def __init__(self):
		self.ID = 1788
		self.Name = "TU2262"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_TU2264:
	def __init__(self):
		self.ID = 1789
		self.Name = "TU2264"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_TU2284:
	def __init__(self):
		self.ID = 1790
		self.Name = "TU2284"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_TU2312:
	def __init__(self):
		self.ID = 1791
		self.Name = "TU2312"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_TU25561:
	def __init__(self):
		self.ID = 1792
		self.Name = "TU25561"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_TU2557:
	def __init__(self):
		self.ID = 1793
		self.Name = "TU2557"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_TU2913:
	def __init__(self):
		self.ID = 1794
		self.Name = "TU2913"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_TU2914:
	def __init__(self):
		self.ID = 1795
		self.Name = "TU2914"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_TU2917:
	def __init__(self):
		self.ID = 1796
		self.Name = "TU2917"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_TU2932:
	def __init__(self):
		self.ID = 1797
		self.Name = "TU2932"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_TU2933:
	def __init__(self):
		self.ID = 1798
		self.Name = "TU2933"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_TU2943:
	def __init__(self):
		self.ID = 1799
		self.Name = "TU2943"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_TU2944:
	def __init__(self):
		self.ID = 1800
		self.Name = "TU2944"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_TU29451:
	def __init__(self):
		self.ID = 1801
		self.Name = "TU29451"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_TU29452:
	def __init__(self):
		self.ID = 1802
		self.Name = "TU29452"
		self.Model = "CVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.modesw_Value = "1"
		self.modesw_Notes = "0:Local 1:VM control 2:DCS connect"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.action_Value = "0"
		self.action_Notes = "0:direct, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff 1:reverse"

class Block_TV2110:
	def __init__(self):
		self.ID = 1803
		self.Name = "TV2110"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "44"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "44"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "440"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "440"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_TV2210A:
	def __init__(self):
		self.ID = 1804
		self.Name = "TV2210A"
		self.Model = "AVALVE_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1400"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TV2210B:
	def __init__(self):
		self.ID = 1805
		self.Name = "TV2210B"
		self.Model = "AVALVE_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1400"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TV2262:
	def __init__(self):
		self.ID = 1806
		self.Name = "TV2262"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "24"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "24"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "240"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "240"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TV2264:
	def __init__(self):
		self.ID = 1807
		self.Name = "TV2264"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "14"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "14"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "140"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "140"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TV2284:
	def __init__(self):
		self.ID = 1808
		self.Name = "TV2284"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "24"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "24"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "240"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "240"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TV2312:
	def __init__(self):
		self.ID = 1809
		self.Name = "TV2312"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1.6"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "1.6"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "16"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "16"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TV2557:
	def __init__(self):
		self.ID = 1810
		self.Name = "TV2557"
		self.Model = "AVALVE_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "44"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TV2561:
	def __init__(self):
		self.ID = 1811
		self.Name = "TV2561"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "395"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "2"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "395"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "3950"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "3950"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TV2913:
	def __init__(self):
		self.ID = 1812
		self.Name = "TV2913"
		self.Model = "AVALVE_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "5"
		self.s1_Notes = "System No."

class Block_TV2914:
	def __init__(self):
		self.ID = 1813
		self.Name = "TV2914"
		self.Model = "AVALVE_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "5"
		self.s1_Notes = "System No."

class Block_TV2917:
	def __init__(self):
		self.ID = 1814
		self.Name = "TV2917"
		self.Model = "AVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "9"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "-1"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "2"
		self.s1_Notes = "System No."

class Block_TV2932:
	def __init__(self):
		self.ID = 1815
		self.Name = "TV2932"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.63"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "0.63"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "6.3"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "6.3"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TV2933:
	def __init__(self):
		self.ID = 1816
		self.Name = "TV2933"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "0.25"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "0.25"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "2.5"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "2.5"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TV2943:
	def __init__(self):
		self.ID = 1817
		self.Name = "TV2943"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "44"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "44"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "440"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "440"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TV2944:
	def __init__(self):
		self.ID = 1818
		self.Name = "TV2944"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "10"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "10"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "100"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "100"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TV29451:
	def __init__(self):
		self.ID = 1819
		self.Name = "TV29451"
		self.Model = "ATVALVE_B"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA1_Value = "0"
		self._NDATA1_Notes = "Number of No.1 Valve Position Data Pts"

		# General Parameters
		self._NDATA2_Value = "0"
		self._NDATA2_Notes = "Number of No.2 Valve Position Data Pts"

		# Primary Parameters
		self.CV1_Value = "120"
		self.CV1_Notes = "No.1 Valve Cv Value"

		# Primary Parameters
		self.Type1_Value = "2"
		self.Type1_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R1_Value = "50"
		self.R1_Notes = "No.1 Valve Rangeability or R Value"

		# Primary Parameters
		self.S01_Value = "0.5"
		self.S01_Notes = "No.1 Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos01_Value = "0.02"
		self.pos01_Notes = "Min. Pos. for No.1 Valve Characteristic"

		# Primary Parameters
		self.w01_Value = "0"
		self.w01_Notes = "No.1 Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.CV2_Value = "120"
		self.CV2_Notes = "No.2 Valve Cv Value"

		# Primary Parameters
		self.Type2_Value = "2"
		self.Type2_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R2_Value = "50"
		self.R2_Notes = "No.2 Valve Rangeability or R Value"

		# Primary Parameters
		self.S02_Value = "0.5"
		self.S02_Notes = "No.2 Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos02_Value = "0.02"
		self.pos02_Notes = "Min. Pos. for No.2 Valve Characteristic"

		# Primary Parameters
		self.w02_Value = "0"
		self.w02_Notes = "No.2 Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff1_Value = "1"
		self.Cff1_Notes = "No. 1 Valve F.R. Correction Factor[-]"

		# Primary Parameters
		self.Cff2_Value = "1"
		self.Cff2_Notes = "No. 2 Valve F.R. Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "0:Fail Valve-1 Cls,1:Opn,2:Lock"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.Fw1St_Value = "0"
		self.Fw1St_Notes = "No.1 Valve Flow Rate Start Value[kg/h]"

		# Primary Parameters
		self.Fw2St_Value = "0"
		self.Fw2St_Notes = "No.2 Valve Flow Rate Start Value[kg/h]"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TV29452:
	def __init__(self):
		self.ID = 1820
		self.Name = "TV29452"
		self.Model = "ABLOCK_T"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "100"
		self.CV_Notes = "Control Valve Cv"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Control Valve Rangeability"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "CV Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "CV Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "1: Up-pressure Dominated"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.CVb_Value = "100"
		self.CVb_Notes = "Bypass Valve, Cv"

		# Primary Parameters
		self.Typeb_Value = "1"
		self.Typeb_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.Rb_Value = "30"
		self.Rb_Notes = "Bypass Valve Rangeability or R Value"

		# Primary Parameters
		self.Sb0_Value = "0.5"
		self.Sb0_Notes = "Bypass Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.posb0_Value = "0.03"
		self.posb0_Notes = "Min. Pos. for Bypass Vlv Characteristic"

		# Primary Parameters
		self.wb0_Value = "0"
		self.wb0_Notes = "Bypass Valve Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmoveb_Value = "10"
		self.tmoveb_Notes = "Bypass Valve Open/Close Time[s]"

		# Primary Parameters
		self.CVf_Value = "1000"
		self.CVf_Notes = "Front Valve Cv"

		# Primary Parameters
		self.CVr_Value = "1000"
		self.CVr_Notes = "Rear Valve Cv"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_TY2945:
	def __init__(self):
		self.ID = 1821
		self.Name = "TY2945"
		self.Model = "SIGNBR2"
		self.Notes = "Signal Split(1-input/2-output)"

		# Primary Parameters
		self.SWITCH_Value = "0"
		self.SWITCH_Notes = "0=signal branch, 1-2=switch"

		# Primary Parameters
		self.MVTRK_Value = "1"
		self.MVTRK_Notes = "Output Tracking Point(1-2)"

		# Primary Parameters
		self.PVSPAN1_Value = "(2)"
		self.PVSPAN1_Notes = "Input 1 Span/Base"

		# Primary Parameters List Value
		self.PVSPAN1_List_Value = array([1., 0.])
		# Primary Parameters
		self.MVSPAN_Value = "1"
		self.MVSPAN_Notes = "MV Span"

class Block_TY29451:
	def __init__(self):
		self.ID = 1822
		self.Name = "TY29451"
		self.Model = "_DRNGTRNS"
		self.Notes = "Range Converter"

		# General Parameters
		self._n_Value = "2"
		self._n_Notes = "Number of segments(n<=16)"

		# Primary Parameters
		self.PVRANGE_Value = "(2,2)"
		self.PVRANGE_Notes = "Conversion Table"

		# Primary Parameters List Value
		self.PVRANGE_List_Value = array([[0.5, 0. ],
       [1. , 1. ]])
		# Primary Parameters
		self.BADRANGE_Value = "5"
		self.BADRANGE_Notes = "Check Band for Invalid Input[%]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

class Block_TY29452:
	def __init__(self):
		self.ID = 1823
		self.Name = "TY29452"
		self.Model = "_DRNGTRNS"
		self.Notes = "Range Converter"

		# General Parameters
		self._n_Value = "2"
		self._n_Notes = "Number of segments(n<=16)"

		# Primary Parameters
		self.PVRANGE_Value = "(2,2)"
		self.PVRANGE_Notes = "Conversion Table"

		# Primary Parameters List Value
		self.PVRANGE_List_Value = array([[0. , 1. ],
       [0.5, 0. ]])
		# Primary Parameters
		self.BADRANGE_Value = "5"
		self.BADRANGE_Notes = "Check Band for Invalid Input[%]"

		# Primary Parameters
		self.tsmpl_Value = "0"
		self.tsmpl_Notes = "Sampling Period[s]"

class Block_U23CALCOMMON:
	def __init__(self):
		self.ID = 1824
		self.Name = "U23CALCOMMON"
		self.Model = "_GCALC_P"
		self.Notes = "Calc. Unit(for Process)"

		# General Parameters
		self._ITYPE_Value = "0"
		self._ITYPE_Notes = "Module Type(0:Compact, 1:Fast)"

		# General Parameters
		self._NLINE_Value = "100"
		self._NLINE_Notes = "Max. Row Num. of Calc. Eq."

		# General Parameters
		self._NCONS_Value = "10"
		self._NCONS_Notes = "Num. of Const. Variable(<=30)"

		# General Parameters
		self._NVAR_Value = "10"
		self._NVAR_Notes = "Num. of Calc. Variable(<=20)"

		# Primary Parameters
		self.etype_Value = "0"
		self.etype_Notes = "Execution Type(0:Cyclic, 1:By Request)"

		# Primary Parameters
		self.EQN_Value = "(100)"
		self.EQN_Notes = "Calculation Statements(in Process)"

		# Primary Parameters List Value
		self.EQN_List_Value = "FV2001.mvr=1;FV2003.mvr=1;FV2004.mvr=1;FV2140.mvr=1;FV2211.mvr=1;	FV2213.mvr=1;FV2215.mvr=1;FV2216.mvr=1;FV2217.mvr=1;FV2218.mvr=1;	FV2219.mvr=1;FV22311.mvr=1;FV2263.mvr=1;FV2268.mvr=1;	FV2282.mvr=1;FV2283.mvr=1;FV2286.mvr=1;FV2287.mvr=1;PV2281.mvr=1;	FV2289.mvr=1;FV2290.mvr=1;FV2293.mvr=1;HV2210.mvr=1;HV2230.mvr=1;	LV2001.mvr=1;LV22111.mvr=1;LV22112.mvr=1;LV2280.mvr=1;LV2283.mvr=1;	LV2931.mvr=1;LV2932.mvr=1;LV2945.mvr=1;LV2951.mvr=1;PV2001.mvr=1;	PV21201.mvr=1;PV21202.mvr=1;PV21401.mvr=1;PV21402.mvr=1;PV21501.mvr=1;	PV21502.mvr=1;PV21701.mvr=1;PV21702.mvr=1;PV21801.mvr=1;PV21802.mvr=1;	PV21901.mvr=1;PV21902.mvr=1;PV2205.mvr=1;PV2211.mvr=1;PV2260A.mvr=1;	PV2260B.mvr=1;PV2263.mvr=1;PV2280.mvr=1;PV22821.mvr=1;PV22822.mvr=1;	PV2291.mvr=1;PV2292.mvr=1;PV2310.mvr=1;PV2311.mvr=1;PV2320.mvr=1;	PV25001.mvr=1;PV25002.mvr=1;PV2901.mvr=1;PV2903.mvr=1;PV2932.mvr=1;	PV2951.mvr=1;PV2952.mvr=1;PV2953.mvr=1;PV2957.mvr=1;TV2110.mvr=1;	TV2262.mvr=1;TV2264.mvr=1;TV2284.mvr=1;TV2312.mvr=1;TV2561.mvr=1;	TV2932.mvr=1;TV2933.mvr=1;TV2943.mvr=1;TV2944.mvr=1;TV29452.mvr=1;	FV2001.mvf=1;FV2003.mvf=1;FV2004.mvf=1;FV2140.mvf=1;FV2211.mvf=1;	FV2213.mvf=1;FV2215.mvf=1;FV2216.mvf=1;FV2217.mvf=1;FV2218.mvf=1;	FV2219.mvf=1;FV22311.mvf=1;FV2263.mvf=1;FV2268.mvf=1;	FV2282.mvf=1;FV2283.mvf=1;FV2286.mvf=1;FV2287.mvf=1;PV2281.mvf=1;	FV2289.mvf=1;FV2290.mvf=1;FV2293.mvf=1;HV2210.mvf=1;HV2230.mvf=1;	LV2001.mvf=1;LV22111.mvf=1;LV22112.mvf=1;LV2280.mvf=1;LV2283.mvf=1;	LV2931.mvf=1;LV2932.mvf=1;LV2945.mvf=1;LV2951.mvf=1;PV2001.mvf=1;	PV21201.mvf=1;PV21202.mvf=1;PV21401.mvf=1;PV21402.mvf=1;PV21501.mvf=1;	PV21502.mvf=1;PV21701.mvf=1;PV21702.mvf=1;PV21801.mvf=1;PV21802.mvf=1;	PV21901.mvf=1;PV21902.mvf=1;PV2205.mvf=1;PV2211.mvf=1;PV2260A.mvf=1;	PV2260B.mvf=1;PV2263.mvf=1;PV2280.mvf=1;PV22821.mvf=1;PV22822.mvf=1;	PV2291.mvf=1;PV2292.mvf=1;PV2310.mvf=1;PV2311.mvf=1;PV2320.mvf=1;	PV25001.mvf=1;PV25002.mvf=1;PV2901.mvf=1;PV2903.mvf=1;PV2932.mvf=1;	PV2951.mvf=1;PV2952.mvf=1;PV2953.mvf=1;PV2957.mvf=1;TV2110.mvf=1;	TV2262.mvf=1;TV2264.mvf=1;TV2284.mvf=1;TV2312.mvf=1;TV2561.mvf=1;	TV2932.mvf=1;TV2933.mvf=1;TV2943.mvf=1;TV2944.mvf=1;TV29452.mvf=1;	SV2265.mvf=1;SV2210.mvf=1;	//FV22312.mvr=1;FV22312.mvf=1;	//PC21201.CMOD=2;PC21202.CMOD=2;PC21401.CMOD=2;	//PC21402.CMOD=2;PC21501.CMOD=2;PC21502.CMOD=2;	//PC21701.CMOD=2;PC21702.CMOD=2;PC21801.CMOD=2;	//PC21802.CMOD=2;PC21901.CMOD=2;PC21902.CMOD=2;	//PC22821.CMOD=2;PC22822.CMOD=2;PC25001.CMOD=2;	//PC25002.CMOD=2;TC2262.CMOD=2;TC29451.CMOD=2;	//TC29452.CMOD=2;		K22061.stopfl=K22062.stopfl=K2208.stopfl=1;	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none"
		# Primary Parameters
		self.C01_Value = "0"
		self.C01_Notes = "Parameter for Constant Value-1"

		# Primary Parameters
		self.C02_Value = "0"
		self.C02_Notes = "Parameter for Constant Value-2"

		# Primary Parameters
		self.C03_Value = "0"
		self.C03_Notes = "Parameter for Constant Value-3"

		# Primary Parameters
		self.C04_Value = "0"
		self.C04_Notes = "Parameter for Constant Value-4"

		# Primary Parameters
		self.C05_Value = "0"
		self.C05_Notes = "Parameter for Constant Value-5"

		# Primary Parameters
		self.C06_Value = "0"
		self.C06_Notes = "Parameter for Constant Value-6"

		# Primary Parameters
		self.C07_Value = "0"
		self.C07_Notes = "Parameter for Constant Value-7"

		# Primary Parameters
		self.C08_Value = "0"
		self.C08_Notes = "Parameter for Constant Value-8"

		# Primary Parameters
		self.C09_Value = "0"
		self.C09_Notes = "Parameter for Constant Value-9"

		# Primary Parameters
		self.C10_Value = "0"
		self.C10_Notes = "Parameter for Constant Value-10"

		# Primary Parameters
		self.kcalc_Value = "1"
		self.kcalc_Notes = "Steady State Calc. Flag(1:Calc/0:No)"

class Block_U23CALD2001:
	def __init__(self):
		self.ID = 1825
		self.Name = "U23CALD2001"
		self.Model = "_GCALC_P"
		self.Notes = "Calc. Unit(for Process)"

		# General Parameters
		self._ITYPE_Value = "0"
		self._ITYPE_Notes = "Module Type(0:Compact, 1:Fast)"

		# General Parameters
		self._NLINE_Value = "20"
		self._NLINE_Notes = "Max. Row Num. of Calc. Eq."

		# General Parameters
		self._NCONS_Value = "5"
		self._NCONS_Notes = "Num. of Const. Variable(<=30)"

		# General Parameters
		self._NVAR_Value = "5"
		self._NVAR_Notes = "Num. of Calc. Variable(<=20)"

		# Primary Parameters
		self.etype_Value = "0"
		self.etype_Notes = "Execution Type(0:Cyclic, 1:By Request)"

		# Primary Parameters
		self.EQN_Value = "(20)"
		self.EQN_Notes = "Calculation Statements(in Process)"

		# Primary Parameters List Value
		self.EQN_List_Value = "if(D2001AD.Level>6) '23PU15'.mv=1;	if(D2001AD.Level<5.95) '23PU15'.mv=0;	if(D2001BD.Level>6) '23PU16'.mv=1;	if(D2001BD.Level<5.95) '23PU16'.mv=0;	if(D2002D.Level>3.1) '23PU17'.mv=1;	if(D2002D.Level<3.05) '23PU17'.mv=0;	none	none	none	none	none	none	none	none	none	none	none	none	none	none"
		# Primary Parameters
		self.C01_Value = "3976.11"
		self.C01_Notes = "Parameter for Constant Value-1"

		# Primary Parameters
		self.C02_Value = "0"
		self.C02_Notes = "Parameter for Constant Value-2"

		# Primary Parameters
		self.C03_Value = "0"
		self.C03_Notes = "Parameter for Constant Value-3"

		# Primary Parameters
		self.C04_Value = "0"
		self.C04_Notes = "Parameter for Constant Value-4"

		# Primary Parameters
		self.C05_Value = "0"
		self.C05_Notes = "Parameter for Constant Value-5"

		# Primary Parameters
		self.kcalc_Value = "1"
		self.kcalc_Notes = "Steady State Calc. Flag(1:Calc/0:No)"

class Block_U23CALD2019:
	def __init__(self):
		self.ID = 1826
		self.Name = "U23CALD2019"
		self.Model = "_GCALC_P"
		self.Notes = "Calc. Unit(for Process)"

		# General Parameters
		self._ITYPE_Value = "0"
		self._ITYPE_Notes = "Module Type(0:Compact, 1:Fast)"

		# General Parameters
		self._NLINE_Value = "20"
		self._NLINE_Notes = "Max. Row Num. of Calc. Eq."

		# General Parameters
		self._NCONS_Value = "5"
		self._NCONS_Notes = "Num. of Const. Variable(<=30)"

		# General Parameters
		self._NVAR_Value = "5"
		self._NVAR_Notes = "Num. of Calc. Variable(<=20)"

		# Primary Parameters
		self.etype_Value = "0"
		self.etype_Notes = "Execution Type(0:Cyclic, 1:By Request)"

		# Primary Parameters
		self.EQN_Value = "(20)"
		self.EQN_Notes = "Calculation Statements(in Process)"

		# Primary Parameters List Value
		self.EQN_List_Value = "if((FD2300205.Fw>1 || FD2300206.Fw>1) && D2019.L>0.05)	 '23PB01'.Fset=30;	else '23PB01'.Fset=0;		if(D2019AD.Level>2.4) '23PU13'.mv=1;	if(D2019AD.Level<2.35) '23PU13'.mv=0;	if(D2019BD.Level>2.4) '23PU14'.mv=1;	if(D2019BD.Level<2.35) '23PU14'.mv=0;		DV2300201.mv=DV2300202.mv=1;	DV2300201.CV=DV2300202.CV=200;	none	none	none	none	none	none	none	none	none"
		# Primary Parameters
		self.C01_Value = "3976.11"
		self.C01_Notes = "Parameter for Constant Value-1"

		# Primary Parameters
		self.C02_Value = "0"
		self.C02_Notes = "Parameter for Constant Value-2"

		# Primary Parameters
		self.C03_Value = "0"
		self.C03_Notes = "Parameter for Constant Value-3"

		# Primary Parameters
		self.C04_Value = "0"
		self.C04_Notes = "Parameter for Constant Value-4"

		# Primary Parameters
		self.C05_Value = "0"
		self.C05_Notes = "Parameter for Constant Value-5"

		# Primary Parameters
		self.kcalc_Value = "1"
		self.kcalc_Notes = "Steady State Calc. Flag(1:Calc/0:No)"

class Block_U23CALD2101:
	def __init__(self):
		self.ID = 1827
		self.Name = "U23CALD2101"
		self.Model = "_GCALC_P"
		self.Notes = "Calc. Unit(for Units)"

		# General Parameters
		self._ITYPE_Value = "0"
		self._ITYPE_Notes = "Module Type(0:Compact, 1:Fast)"

		# General Parameters
		self._NLINE_Value = "30"
		self._NLINE_Notes = "Max. Row Num. of Calc. Eq."

		# General Parameters
		self._NCONS_Value = "10"
		self._NCONS_Notes = "Num. of Const. Variable(<=30)"

		# General Parameters
		self._NVAR_Value = "5"
		self._NVAR_Notes = "Num. of Calc. Variable(<=20)"

		# Primary Parameters
		self.etype_Value = "0"
		self.etype_Notes = "Execution Type(0:Cyclic, 1:By Request)"

		# Primary Parameters
		self.EQN_Value = "(30)"
		self.EQN_Notes = "Calculation Statements(in Process)"

		# Primary Parameters List Value
		self.EQN_List_Value = "//C01 - Jacket heat Qjl	//C02 - TOTAL TK CONTENT IN D2101 70 Kg [25]	//C03 - TOTAL AT CONTENT IN D2101 65.58*0.15 Kg [26]	//C04 - TOTAL PR CONTENT IN D2101 210 Kg [13]	//C05 - REACTION HEAT COEFFICIENT	//V01 - PREPOLY & POSTPOLY REACTION HEAT	//V02 - Total external heat for D2101		C02=D2101.zlm[24]*189.278;	C03=D2101.zlm[25]*114.2;	C04=(D2101.zlm[12]+D2101.zv[12])*42;	C05=(C02/70)*(C03/65.58/0.15)*(C04/210);	V02=C01+C05*500;		//C06 - 23BLCATTK.setup_on	//V03 - 23BLCATTK deliver status	if(C06==1){	'23BLCATTK'.setup_on = 1;	C06=0;}	if('23BLCATTK'.Zl>0.01) V03=1;	else V03=0;		//C07 - 23BLCATOF.setup_on	//V04 - 23BLCATOF deliver status	if(C07==1){	'23BLCATOF'.setup_on = 1;	C07=0;}	if('23BLCATOF'.Zl>0.01) V04=1;	else V04=0;	none"
		# Primary Parameters
		self.C01_Value = "0"
		self.C01_Notes = "Parameter for Constant Value-1"

		# Primary Parameters
		self.C02_Value = "0"
		self.C02_Notes = "Parameter for Constant Value-2"

		# Primary Parameters
		self.C03_Value = "0"
		self.C03_Notes = "Parameter for Constant Value-3"

		# Primary Parameters
		self.C04_Value = "0"
		self.C04_Notes = "Parameter for Constant Value-4"

		# Primary Parameters
		self.C05_Value = "0"
		self.C05_Notes = "Parameter for Constant Value-5"

		# Primary Parameters
		self.C06_Value = "0"
		self.C06_Notes = "Parameter for Constant Value-6"

		# Primary Parameters
		self.C07_Value = "0"
		self.C07_Notes = "Parameter for Constant Value-7"

		# Primary Parameters
		self.C08_Value = "0"
		self.C08_Notes = "Parameter for Constant Value-8"

		# Primary Parameters
		self.C09_Value = "0"
		self.C09_Notes = "Parameter for Constant Value-9"

		# Primary Parameters
		self.C10_Value = "0"
		self.C10_Notes = "Parameter for Constant Value-10"

		# Primary Parameters
		self.kcalc_Value = "1"
		self.kcalc_Notes = "Steady State Calc. Flag(1:Calc/0:No)"

class Block_U23CALD2201:
	def __init__(self):
		self.ID = 1828
		self.Name = "U23CALD2201"
		self.Model = "_GCALC_P"
		self.Notes = "Calc. Unit(for Units)"

		# General Parameters
		self._ITYPE_Value = "0"
		self._ITYPE_Notes = "Module Type(0:Compact, 1:Fast)"

		# General Parameters
		self._NLINE_Value = "50"
		self._NLINE_Notes = "Max. Row Num. of Calc. Eq."

		# General Parameters
		self._NCONS_Value = "10"
		self._NCONS_Notes = "Num. of Const. Variable(<=30)"

		# General Parameters
		self._NVAR_Value = "5"
		self._NVAR_Notes = "Num. of Calc. Variable(<=20)"

		# Primary Parameters
		self.etype_Value = "0"
		self.etype_Notes = "Execution Type(0:Cyclic, 1:By Request)"

		# Primary Parameters
		self.EQN_Value = "(50)"
		self.EQN_Notes = "Calculation Statements(in Process)"

		# Primary Parameters List Value
		self.EQN_List_Value = "//V-S seperate compensation	//C01 - D2201A seperate ratio	//C02 - Temp impact	//C03 - pres impact	C02= pow(D2201.Temp/70, 2);	C03= pow(3126/(D2201.Pres+1), 0.2);	C01 += (0.7483*C02*C03-C01)*0.1;	C01= max(0.1, C01);	C01= min(0.8, C01);	D2201A.rsep2(8)=C01;	D2201A.rsep2(12)=C01;	D2201A.rsep2(13)=C01;	D2201A.rsep2(22)=C01;		//V-S seperate compensation heat duty	//C05 - Heat remove from D2201 because of the compensate flash	C05=D2201BJ.Qjl-D2201H.Q/1.295;	//Total heat compensation	C04=D2201.Q+D2201.Qe;		//TC2210A limitation	if(TC2210A.CMOD==2) {	TC2210A.MVL=0.3;TC2210A.MVH=0.7;}	else {TC2210A.MVL=0;TC2210A.MVH=1;}		//Jacket efficiency transfer between HW and CW	if(FD2320319.pos>0.1) D2201BJ.Ujl += (900-D2201BJ.Ujl)*0.1;	if(FD2320318.pos>0.1) D2201BJ.Ujl += (300-D2201BJ.Ujl)*0.1;;		//V01 - ET2211	//V02 - ST2212	//C06 - Pwd	C06=3.5;	if(DM2201.on>0){	 V01=C06*0.3+C06*0.7/(D2201.LD/2-0.5)*(D2201.Level-0.5)*DT2201.D/482;	 V02=115;}	else {V01=0; V02=0;}	none	none	none	none	none	none	none	none	none	none	none	none	none"
		# Primary Parameters
		self.C01_Value = "0.7483"
		self.C01_Notes = "Parameter for Constant Value-1"

		# Primary Parameters
		self.C02_Value = "0"
		self.C02_Notes = "Parameter for Constant Value-2"

		# Primary Parameters
		self.C03_Value = "0"
		self.C03_Notes = "Parameter for Constant Value-3"

		# Primary Parameters
		self.C04_Value = "0"
		self.C04_Notes = "Parameter for Constant Value-4"

		# Primary Parameters
		self.C05_Value = "0"
		self.C05_Notes = "Parameter for Constant Value-5"

		# Primary Parameters
		self.C06_Value = "0"
		self.C06_Notes = "Parameter for Constant Value-6"

		# Primary Parameters
		self.C07_Value = "0"
		self.C07_Notes = "Parameter for Constant Value-7"

		# Primary Parameters
		self.C08_Value = "0"
		self.C08_Notes = "Parameter for Constant Value-8"

		# Primary Parameters
		self.C09_Value = "0"
		self.C09_Notes = "Parameter for Constant Value-9"

		# Primary Parameters
		self.C10_Value = "0"
		self.C10_Notes = "Parameter for Constant Value-10"

		# Primary Parameters
		self.kcalc_Value = "1"
		self.kcalc_Notes = "Steady State Calc. Flag(1:Calc/0:No)"

class Block_U23CALFQ:
	def __init__(self):
		self.ID = 1829
		self.Name = "U23CALFQ"
		self.Model = "_GCALC_P"
		self.Notes = "Calc. Unit(for Process)"

		# General Parameters
		self._ITYPE_Value = "0"
		self._ITYPE_Notes = "Module Type(0:Compact, 1:Fast)"

		# General Parameters
		self._NLINE_Value = "100"
		self._NLINE_Notes = "Max. Row Num. of Calc. Eq."

		# General Parameters
		self._NCONS_Value = "10"
		self._NCONS_Notes = "Num. of Const. Variable(<=30)"

		# General Parameters
		self._NVAR_Value = "10"
		self._NVAR_Notes = "Num. of Calc. Variable(<=20)"

		# Primary Parameters
		self.etype_Value = "0"
		self.etype_Notes = "Execution Type(0:Cyclic, 1:By Request)"

		# Primary Parameters
		self.EQN_Value = "(100)"
		self.EQN_Notes = "Calculation Statements(in Process)"

		# Primary Parameters List Value
		self.EQN_List_Value = "//C01-RESET signal for FQ2170	//C02-RESET signal for FQ2171	//C03-RESET signal for FQ2172	//C04-RESET signal for FQ2140	//C05-RESET signal for FQ2110	//V01-FQ2170;	//V02-FQ2171;	//V03-FQ2172;	//V04-FQ2140	//V05-FQ2110;	//V06-WI2101 (AT-CAT TOATAL Kg)		if(C01>0) V01=0;	else V01 += FT2170.F*_step;		if(C02>0) V02=0;	else V02 += FT2171.F*_step;		if(C03>0) V03=0;	else V03 += FT2172.F*_step;		if(C04>0) V04=0;	else V04 += FT2140.F*_step;		if(C05>0) V05=0;	else V05 += FT2110.F*_step;		if(C06>0) V06=0;	else V06 += WT2101.F*_step;	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none"
		# Primary Parameters
		self.C01_Value = "0"
		self.C01_Notes = "Parameter for Constant Value-1"

		# Primary Parameters
		self.C02_Value = "0"
		self.C02_Notes = "Parameter for Constant Value-2"

		# Primary Parameters
		self.C03_Value = "0"
		self.C03_Notes = "Parameter for Constant Value-3"

		# Primary Parameters
		self.C04_Value = "0"
		self.C04_Notes = "Parameter for Constant Value-4"

		# Primary Parameters
		self.C05_Value = "0"
		self.C05_Notes = "Parameter for Constant Value-5"

		# Primary Parameters
		self.C06_Value = "0"
		self.C06_Notes = "Parameter for Constant Value-6"

		# Primary Parameters
		self.C07_Value = "0"
		self.C07_Notes = "Parameter for Constant Value-7"

		# Primary Parameters
		self.C08_Value = "0"
		self.C08_Notes = "Parameter for Constant Value-8"

		# Primary Parameters
		self.C09_Value = "0"
		self.C09_Notes = "Parameter for Constant Value-9"

		# Primary Parameters
		self.C10_Value = "0"
		self.C10_Notes = "Parameter for Constant Value-10"

		# Primary Parameters
		self.kcalc_Value = "1"
		self.kcalc_Notes = "Steady State Calc. Flag(1:Calc/0:No)"

class Block_U23CALK2203:
	def __init__(self):
		self.ID = 1830
		self.Name = "U23CALK2203"
		self.Model = "_GCALC_P"
		self.Notes = "Calc. Unit(for Units)"

		# General Parameters
		self._ITYPE_Value = "0"
		self._ITYPE_Notes = "Module Type(0:Compact, 1:Fast)"

		# General Parameters
		self._NLINE_Value = "50"
		self._NLINE_Notes = "Max. Row Num. of Calc. Eq."

		# General Parameters
		self._NCONS_Value = "10"
		self._NCONS_Notes = "Num. of Const. Variable(<=30)"

		# General Parameters
		self._NVAR_Value = "10"
		self._NVAR_Notes = "Num. of Calc. Variable(<=20)"

		# Primary Parameters
		self.etype_Value = "0"
		self.etype_Notes = "Execution Type(0:Cyclic, 1:By Request)"

		# Primary Parameters
		self.EQN_Value = "(50)"
		self.EQN_Notes = "Calculation Statements(in Process)"

		# Primary Parameters List Value
		self.EQN_List_Value = "//C01-P1A/P1B SELECT P1A-0/P1B-1 (SWITCH)	//C02-EMG. STOP 1-stop	//C03-RESET	//V01-K2203 START PERMISSIVE	//V02-K2203P1A runing flag	//V03-K2203P1B runing flag	//V04-shutdown flag 1-shutdown		//shutdown interlock (simplify)	if(C02==1) V04=1;	if(C02==0 && C03==1) {V01=1; V04=0;}	KM2203.roff=KM2203P1A.roff=KM2203P1B.roff=V04;		//P1B auto start logic	if(KM2203P1A.run==1) V02=1;	if(KM2203P1A.run==0 && V02==1){	   if(C01==1) KM2203P1B.dorun=1; 	   V02=0;}		//P1A auto start logic	if(KM2203P1B.run==1) V03=1;	if(KM2203P1B.run==0 && V03==1){	   if(C01==0) KM2203P1A.dorun=1; 	   V03=0;}	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none"
		# Primary Parameters
		self.C01_Value = "0"
		self.C01_Notes = "Parameter for Constant Value-1"

		# Primary Parameters
		self.C02_Value = "0"
		self.C02_Notes = "Parameter for Constant Value-2"

		# Primary Parameters
		self.C03_Value = "0"
		self.C03_Notes = "Parameter for Constant Value-3"

		# Primary Parameters
		self.C04_Value = "0"
		self.C04_Notes = "Parameter for Constant Value-4"

		# Primary Parameters
		self.C05_Value = "0"
		self.C05_Notes = "Parameter for Constant Value-5"

		# Primary Parameters
		self.C06_Value = "0"
		self.C06_Notes = "Parameter for Constant Value-6"

		# Primary Parameters
		self.C07_Value = "0"
		self.C07_Notes = "Parameter for Constant Value-7"

		# Primary Parameters
		self.C08_Value = "0"
		self.C08_Notes = "Parameter for Constant Value-8"

		# Primary Parameters
		self.C09_Value = "0"
		self.C09_Notes = "Parameter for Constant Value-9"

		# Primary Parameters
		self.C10_Value = "0"
		self.C10_Notes = "Parameter for Constant Value-10"

		# Primary Parameters
		self.kcalc_Value = "1"
		self.kcalc_Notes = "Steady State Calc. Flag(1:Calc/0:No)"

class Block_U23CALK2206:
	def __init__(self):
		self.ID = 1831
		self.Name = "U23CALK2206"
		self.Model = "_GCALC_P"
		self.Notes = "Calc. Unit(for Process)"

		# General Parameters
		self._ITYPE_Value = "0"
		self._ITYPE_Notes = "Module Type(0:Compact, 1:Fast)"

		# General Parameters
		self._NLINE_Value = "20"
		self._NLINE_Notes = "Max. Row Num. of Calc. Eq."

		# General Parameters
		self._NCONS_Value = "10"
		self._NCONS_Notes = "Num. of Const. Variable(<=30)"

		# General Parameters
		self._NVAR_Value = "5"
		self._NVAR_Notes = "Num. of Calc. Variable(<=20)"

		# Primary Parameters
		self.etype_Value = "0"
		self.etype_Notes = "Execution Type(0:Cyclic, 1:By Request)"

		# Primary Parameters
		self.EQN_Value = "(20)"
		self.EQN_Notes = "Calculation Statements(in Process)"

		# Primary Parameters List Value
		self.EQN_List_Value = "//C01-50% ON	//C02-50% OFF	//C03-100% ON	//C04-100% OFF	//V01-K2206 CAPACITY		if(C01==1) V01=0.5;	if(C03==1) V01=1;	if(C02==1) V01=0;	if(C04==1 && V0==1) V01=0.5;	if(KM22061.run==0) V01=0;	K22061.Qd=9.5*V01;	K22062.Qd=1.73*V01;	none	none	none	none	none	none	none"
		# Primary Parameters
		self.C01_Value = "1"
		self.C01_Notes = "Parameter for Constant Value-1"

		# Primary Parameters
		self.C02_Value = "0"
		self.C02_Notes = "Parameter for Constant Value-2"

		# Primary Parameters
		self.C03_Value = "0"
		self.C03_Notes = "Parameter for Constant Value-3"

		# Primary Parameters
		self.C04_Value = "0"
		self.C04_Notes = "Parameter for Constant Value-4"

		# Primary Parameters
		self.C05_Value = "0"
		self.C05_Notes = "Parameter for Constant Value-5"

		# Primary Parameters
		self.C06_Value = "0"
		self.C06_Notes = "Parameter for Constant Value-6"

		# Primary Parameters
		self.C07_Value = "0"
		self.C07_Notes = "Parameter for Constant Value-7"

		# Primary Parameters
		self.C08_Value = "0"
		self.C08_Notes = "Parameter for Constant Value-8"

		# Primary Parameters
		self.C09_Value = "0"
		self.C09_Notes = "Parameter for Constant Value-9"

		# Primary Parameters
		self.C10_Value = "0"
		self.C10_Notes = "Parameter for Constant Value-10"

		# Primary Parameters
		self.kcalc_Value = "1"
		self.kcalc_Notes = "Steady State Calc. Flag(1:Calc/0:No)"

class Block_U23CALK2208:
	def __init__(self):
		self.ID = 1832
		self.Name = "U23CALK2208"
		self.Model = "_GCALC_P"
		self.Notes = "Calc. Unit(for Process)"

		# General Parameters
		self._ITYPE_Value = "0"
		self._ITYPE_Notes = "Module Type(0:Compact, 1:Fast)"

		# General Parameters
		self._NLINE_Value = "20"
		self._NLINE_Notes = "Max. Row Num. of Calc. Eq."

		# General Parameters
		self._NCONS_Value = "10"
		self._NCONS_Notes = "Num. of Const. Variable(<=30)"

		# General Parameters
		self._NVAR_Value = "5"
		self._NVAR_Notes = "Num. of Calc. Variable(<=20)"

		# Primary Parameters
		self.etype_Value = "0"
		self.etype_Notes = "Execution Type(0:Cyclic, 1:By Request)"

		# Primary Parameters
		self.EQN_Value = "(20)"
		self.EQN_Notes = "Calculation Statements(in Process)"

		# Primary Parameters List Value
		self.EQN_List_Value = "//C01-50% ON	//C02-50% OFF	//C03-100% ON	//C04-100% OFF	//V01-K2206 CAPACITY		if(C01==1) V01=0.5;	if(C03==1) V01=1;	if(C02==1) V01=0;	if(C04==1 && V01==1) V01=0.5;	if(KM2208.run==0) V01=0;	K2208.Qd=0.3333*V01;	none	none	none	none	none	none	none	none"
		# Primary Parameters
		self.C01_Value = "0"
		self.C01_Notes = "Parameter for Constant Value-1"

		# Primary Parameters
		self.C02_Value = "0"
		self.C02_Notes = "Parameter for Constant Value-2"

		# Primary Parameters
		self.C03_Value = "0"
		self.C03_Notes = "Parameter for Constant Value-3"

		# Primary Parameters
		self.C04_Value = "0"
		self.C04_Notes = "Parameter for Constant Value-4"

		# Primary Parameters
		self.C05_Value = "0"
		self.C05_Notes = "Parameter for Constant Value-5"

		# Primary Parameters
		self.C06_Value = "0"
		self.C06_Notes = "Parameter for Constant Value-6"

		# Primary Parameters
		self.C07_Value = "0"
		self.C07_Notes = "Parameter for Constant Value-7"

		# Primary Parameters
		self.C08_Value = "0"
		self.C08_Notes = "Parameter for Constant Value-8"

		# Primary Parameters
		self.C09_Value = "0"
		self.C09_Notes = "Parameter for Constant Value-9"

		# Primary Parameters
		self.C10_Value = "0"
		self.C10_Notes = "Parameter for Constant Value-10"

		# Primary Parameters
		self.kcalc_Value = "1"
		self.kcalc_Notes = "Steady State Calc. Flag(1:Calc/0:No)"

class Block_U23CALK2911:
	def __init__(self):
		self.ID = 1833
		self.Name = "U23CALK2911"
		self.Model = "_GCALC_P"
		self.Notes = "Calc. Unit(for Process)"

		# General Parameters
		self._ITYPE_Value = "0"
		self._ITYPE_Notes = "Module Type(0:Compact, 1:Fast)"

		# General Parameters
		self._NLINE_Value = "100"
		self._NLINE_Notes = "Max. Row Num. of Calc. Eq."

		# General Parameters
		self._NCONS_Value = "20"
		self._NCONS_Notes = "Num. of Const. Variable(<=30)"

		# General Parameters
		self._NVAR_Value = "20"
		self._NVAR_Notes = "Num. of Calc. Variable(<=20)"

		# Primary Parameters
		self.etype_Value = "0"
		self.etype_Notes = "Execution Type(0:Cyclic, 1:By Request)"

		# Primary Parameters
		self.EQN_Value = "(100)"
		self.EQN_Notes = "Calculation Statements(in Process)"

		# Primary Parameters List Value
		self.EQN_List_Value = "//C01 - COMPRESSOR CHARGE-1/OFF-0/AUTO-2 SWITCH	//C02 - COMPRESSOR START-1 BUTTON (PULSE)	//C03 - COMPRESSOR STOP-1 BUTTON (PULSE)	//C04 - UNLOAD MAN-1/OFF-0/AUTO-2 SWITCH	//C05 - UNLOAD DECREASE-1/INCREASE-2/middle-0 (none action) (PULSE)	//C06 - SOV2914 START-1/STOP-0 AUTO CONTROLLED BY TC2918&PC2912	//V01 - TIMER 	//V02 - TIMER START/STOP 1/0	//V03 - K2911 capacity 0.3~1		//MANUAL CHARGE/OFF MODE	if(C01 == 1) KM2911P1.sw=1;	if(C01 == 0) KM2911P1.sw=0;		//AUTO MODE	if(C01 == 2){	   if(C02==1){	      V02=1; C02=0;	       SOU2915.mv=1;	      KM2911P1.dorun=1;}	   if(V02==1) V01 += _step*3600;	   if(V01 >= 60){	      SOU2913.mv=1;	      SOU2916.mv=1; SOU2917.mv=1;	      V03=0.3;}	   if(V01 >= 63){	      KM2911K.dorun=1;	      SOU2911.shutoff=0; SOU2912.shutoff=0;	      TC2918.CMOD=2; PC2912.CMOD=2;}	   if(V01 >=100){	      KM2911P1.dostop=1;	      V01=0;V02=0;}	}	//SEQ STOP	if(C03 ==1){C03=0;	    KM2911K.dostop=1; KM2911P1.dostop=1;	    SOU2911.shutoff=1; SOU2912.shutoff=1;	    SOU2913.mv=0; SOU2914.mv=0;	    SOU2915.mv=0; SOU2916.mv=0;SOU2917.mv=0;	    TC2918.CMOD=1; PC2912.CMOD=1;	    TC2918.MVM=0; PC2912.MVM=0;}      	                          	//K2911K Capacity change	if(K2911K.run==1){	  if(C04*C05==2 ||  C04*C06==2)SOU2914.mv=1;	  if(C04*C05==1 || (C04==2 && C06==0)) SOU2914.mv=0;}	else SOU2914.mv=0;	if(SOV2913.pos>0.05){	if(SOV2914.pos>0.95)V03 += (1-V03)*0.01;	if(SOV2914.pos<0.05)V03 += (0.3-V03)*0.01;}	else V03=1;	K2911K.Qd=20*V03;	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none"
		# Primary Parameters
		self.C01_Value = "2"
		self.C01_Notes = "Parameter for Constant Value-1"

		# Primary Parameters
		self.C02_Value = "0"
		self.C02_Notes = "Parameter for Constant Value-2"

		# Primary Parameters
		self.C03_Value = "0"
		self.C03_Notes = "Parameter for Constant Value-3"

		# Primary Parameters
		self.C04_Value = "2"
		self.C04_Notes = "Parameter for Constant Value-4"

		# Primary Parameters
		self.C05_Value = "0"
		self.C05_Notes = "Parameter for Constant Value-5"

		# Primary Parameters
		self.C06_Value = "0"
		self.C06_Notes = "Parameter for Constant Value-6"

		# Primary Parameters
		self.C07_Value = "0"
		self.C07_Notes = "Parameter for Constant Value-7"

		# Primary Parameters
		self.C08_Value = "0"
		self.C08_Notes = "Parameter for Constant Value-8"

		# Primary Parameters
		self.C09_Value = "0"
		self.C09_Notes = "Parameter for Constant Value-9"

		# Primary Parameters
		self.C10_Value = "0"
		self.C10_Notes = "Parameter for Constant Value-10"

		# Primary Parameters
		self.C11_Value = "0"
		self.C11_Notes = "Parameter for Constant Value-11"

		# Primary Parameters
		self.C12_Value = "0"
		self.C12_Notes = "Parameter for Constant Value-12"

		# Primary Parameters
		self.C13_Value = "0"
		self.C13_Notes = "Parameter for Constant Value-13"

		# Primary Parameters
		self.C14_Value = "0"
		self.C14_Notes = "Parameter for Constant Value-14"

		# Primary Parameters
		self.C15_Value = "0"
		self.C15_Notes = "Parameter for Constant Value-15"

		# Primary Parameters
		self.C16_Value = "0"
		self.C16_Notes = "Parameter for Constant Value-16"

		# Primary Parameters
		self.C17_Value = "0"
		self.C17_Notes = "Parameter for Constant Value-17"

		# Primary Parameters
		self.C18_Value = "0"
		self.C18_Notes = "Parameter for Constant Value-18"

		# Primary Parameters
		self.C19_Value = "0"
		self.C19_Notes = "Parameter for Constant Value-19"

		# Primary Parameters
		self.C20_Value = "0"
		self.C20_Notes = "Parameter for Constant Value-20"

		# Primary Parameters
		self.kcalc_Value = "1"
		self.kcalc_Notes = "Steady State Calc. Flag(1:Calc/0:No)"

class Block_U23CALMA2211:
	def __init__(self):
		self.ID = 1834
		self.Name = "U23CALMA2211"
		self.Model = "_GCALC_P"
		self.Notes = "Calc. Unit(for Process)"

		# General Parameters
		self._ITYPE_Value = "0"
		self._ITYPE_Notes = "Module Type(0:Compact, 1:Fast)"

		# General Parameters
		self._NLINE_Value = "50"
		self._NLINE_Notes = "Max. Row Num. of Calc. Eq."

		# General Parameters
		self._NCONS_Value = "5"
		self._NCONS_Notes = "Num. of Const. Variable(<=30)"

		# General Parameters
		self._NVAR_Value = "5"
		self._NVAR_Notes = "Num. of Calc. Variable(<=20)"

		# Primary Parameters
		self.etype_Value = "0"
		self.etype_Notes = "Execution Type(0:Cyclic, 1:By Request)"

		# Primary Parameters
		self.EQN_Value = "(50)"
		self.EQN_Notes = "Calculation Statements(in Process)"

		# Primary Parameters List Value
		self.EQN_List_Value = "//MA2211 seperate ratio	//C01 = 0.599/(0.599+0.386);	//C02 = 0.1625/(0.1625+0.0813);	//C03 = 0.8892/(0.8892+0.4214);	//C04 = 0.206/(0.206+0.107);	C01 = 0.386/(0.599+0.386);	C02 = 0.0813/(0.1625+0.0813);	C03 = 0.4214/(0.8892+0.4214);	C04 = 0.107/(0.206+0.107);	MA2211.rsep2(8)=C01;	MA2211.rsep2(12)=C02;	MA2211.rsep2(13)=C03;	MA2211.rsep2(22)=C04;	MA2211.rsep2(23)=0;	MA2211.rsep2(24)=0;		//For replacement with propylene of MA2211 & equalizing line(FD2320402)	'23BLDUM15'.P = D2201.Pres;	if(D2201.Level < 0.01) '23DUM19'.mv = VR2202.pos;	else if(FD2320402.pos>0.1) '23DUM19'.mv = FD2320402.pos;	else '23DUM19'.mv = 0;		//For MA2211 depressurize	if(D2201.Level < 0.01 && HV2210.Fw > 0.1) '23DUM21'.mv = HV2210.mv;	else '23DUM21'.mv = 0;	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none"
		# Primary Parameters
		self.C01_Value = "0"
		self.C01_Notes = "Parameter for Constant Value-1"

		# Primary Parameters
		self.C02_Value = "0"
		self.C02_Notes = "Parameter for Constant Value-2"

		# Primary Parameters
		self.C03_Value = "0"
		self.C03_Notes = "Parameter for Constant Value-3"

		# Primary Parameters
		self.C04_Value = "0"
		self.C04_Notes = "Parameter for Constant Value-4"

		# Primary Parameters
		self.C05_Value = "0"
		self.C05_Notes = "Parameter for Constant Value-5"

		# Primary Parameters
		self.kcalc_Value = "1"
		self.kcalc_Notes = "Steady State Calc. Flag(1:Calc/0:No)"

class Block_U23CALPC2211:
	def __init__(self):
		self.ID = 1835
		self.Name = "U23CALPC2211"
		self.Model = "_GCALC_U"
		self.Notes = "Calc. Unit(for Units)"

		# General Parameters
		self._ITYPE_Value = "0"
		self._ITYPE_Notes = "Module Type(0:Compact, 1:Fast)"

		# General Parameters
		self._NLINE_Value = "5"
		self._NLINE_Notes = "Max. Row Num. of Calc. Eq."

		# General Parameters
		self._NCONS_Value = "0"
		self._NCONS_Notes = "Num. of Const. Variable(<=30)"

		# General Parameters
		self._NVAR_Value = "0"
		self._NVAR_Notes = "Num. of Calc. Variable(<=20)"

		# Primary Parameters
		self.etype_Value = "0"
		self.etype_Notes = "Execution Type(0:Cyclic, 1:By Request)"

		# Primary Parameters
		self.EQN_Value = "(5)"
		self.EQN_Notes = "Calculation Statements(in the Unit)"

		# Primary Parameters List Value
		self.EQN_List_Value = "CMOD=2;	SVM=42;	none	none	none"
		# Primary Parameters
		self.kcalc_Value = "1"
		self.kcalc_Notes = "Steady State Calc. Flag(1:Calc/0:No)"

class Block_U23CALPPH01:
	def __init__(self):
		self.ID = 1836
		self.Name = "U23CALPPH01"
		self.Model = "_GCALC_P"
		self.Notes = "Calc. Unit(for Process)"

		# General Parameters
		self._ITYPE_Value = "0"
		self._ITYPE_Notes = "Module Type(0:Compact, 1:Fast)"

		# General Parameters
		self._NLINE_Value = "5"
		self._NLINE_Notes = "Max. Row Num. of Calc. Eq."

		# General Parameters
		self._NCONS_Value = "0"
		self._NCONS_Notes = "Num. of Const. Variable(<=30)"

		# General Parameters
		self._NVAR_Value = "0"
		self._NVAR_Notes = "Num. of Calc. Variable(<=20)"

		# Primary Parameters
		self.etype_Value = "0"
		self.etype_Notes = "Execution Type(0:Cyclic, 1:By Request)"

		# Primary Parameters
		self.EQN_Value = "(5)"
		self.EQN_Notes = "Calculation Statements(in Process)"

		# Primary Parameters List Value
		self.EQN_List_Value = "'23VOL04'.Qe = -'23PPH01'.Q;		if(D2932.Level>1) '23DUM28'.mv=1;	else '23DUM28'.mv=0;	'23PPH01'.T=143;"
		# Primary Parameters
		self.kcalc_Value = "1"
		self.kcalc_Notes = "Steady State Calc. Flag(1:Calc/0:No)"

class Block_U23CALPU07:
	def __init__(self):
		self.ID = 1837
		self.Name = "U23CALPU07"
		self.Model = "_GCALC_P"
		self.Notes = "Calc. Unit(for Units)"

		# General Parameters
		self._ITYPE_Value = "0"
		self._ITYPE_Notes = "Module Type(0:Compact, 1:Fast)"

		# General Parameters
		self._NLINE_Value = "10"
		self._NLINE_Notes = "Max. Row Num. of Calc. Eq."

		# General Parameters
		self._NCONS_Value = "5"
		self._NCONS_Notes = "Num. of Const. Variable(<=30)"

		# General Parameters
		self._NVAR_Value = "0"
		self._NVAR_Notes = "Num. of Calc. Variable(<=20)"

		# Primary Parameters
		self.etype_Value = "0"
		self.etype_Notes = "Execution Type(0:Cyclic, 1:By Request)"

		# Primary Parameters
		self.EQN_Value = "(10)"
		self.EQN_Notes = "Calculation Statements(in Process)"

		# Primary Parameters List Value
		self.EQN_List_Value = "'23PU07'.Wd=100*FD2320312.pos*D2221.Level/0.3;	'23PU06'.Wd=18000*E2201.LH/0.5;		// For D2201 Vaporization heat compensation	C01=D2201H.Q/1.03-D2201H.Q;		//For PP pressrization from D2221 botton to D2201	if( D2221.Level < 0.02) '23DUM20'.mv = FD2320312.pos;	none	none"
		# Primary Parameters
		self.C01_Value = "0"
		self.C01_Notes = "Parameter for Constant Value-1"

		# Primary Parameters
		self.C02_Value = "0"
		self.C02_Notes = "Parameter for Constant Value-2"

		# Primary Parameters
		self.C03_Value = "0"
		self.C03_Notes = "Parameter for Constant Value-3"

		# Primary Parameters
		self.C04_Value = "0"
		self.C04_Notes = "Parameter for Constant Value-4"

		# Primary Parameters
		self.C05_Value = "0"
		self.C05_Notes = "Parameter for Constant Value-5"

		# Primary Parameters
		self.kcalc_Value = "1"
		self.kcalc_Notes = "Steady State Calc. Flag(1:Calc/0:No)"

class Block_U23CALPU08:
	def __init__(self):
		self.ID = 1838
		self.Name = "U23CALPU08"
		self.Model = "_GCALC_P"
		self.Notes = "Calc. Unit(for Units)"

		# General Parameters
		self._ITYPE_Value = "0"
		self._ITYPE_Notes = "Module Type(0:Compact, 1:Fast)"

		# General Parameters
		self._NLINE_Value = "50"
		self._NLINE_Notes = "Max. Row Num. of Calc. Eq."

		# General Parameters
		self._NCONS_Value = "5"
		self._NCONS_Notes = "Num. of Const. Variable(<=30)"

		# General Parameters
		self._NVAR_Value = "5"
		self._NVAR_Notes = "Num. of Calc. Variable(<=20)"

		# Primary Parameters
		self.etype_Value = "0"
		self.etype_Notes = "Execution Type(0:Cyclic, 1:By Request)"

		# Primary Parameters
		self.EQN_Value = "(50)"
		self.EQN_Notes = "Calculation Statements(in Process)"

		# Primary Parameters List Value
		self.EQN_List_Value = "//'23PU08'.Wd=6500*(HV2232A.pos*XCV2232A.pos+HV2232B.pos*XCV2232B.pos);	'23PU08'.Wd=7500*HV2232A.pos*D2203B.Level/5.3;		//C01-seperate compensation	//C02 - Temp impact	//C03 - pres impact	C02= pow(D2203B.Temp/80, 2);	C03= pow(1768/(D2203B.Pres+1), 0.2);	C01 += (0.713*C02*C03-C01)*0.1;	C01= max(0.1, C01);	C01= min(0.8, C01);	D2203A.rsep2(12)=C01;	D2203A.rsep2(13)=C01;	D2203A.rsep2(22)=C01;		//seperate heat compensation	//C04 - Heat remove from D2203 because of the compensate flash	if(sh49.RL<0.001) C04=0;	else	C04 = D2203H.Q + D2203H3.Q;	D2203H2.Q = -C04;		//reactor phase change	D2203H3.T = sh49.T;		//V01 - ET2211	//V02 - ST2212	//C05 - Pwd	C05=5;	if(DM2203.on>0){	 V01=C05*0.3+C05*0.7/(D2203B.LD/2-0.5)*(D2203B.Level-0.5)*DT2203.D/400;	 V02=1350;}	else {V01=0; V02=0;}	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none"
		# Primary Parameters
		self.C01_Value = "0.713"
		self.C01_Notes = "Parameter for Constant Value-1"

		# Primary Parameters
		self.C02_Value = "0"
		self.C02_Notes = "Parameter for Constant Value-2"

		# Primary Parameters
		self.C03_Value = "0"
		self.C03_Notes = "Parameter for Constant Value-3"

		# Primary Parameters
		self.C04_Value = "0"
		self.C04_Notes = "Parameter for Constant Value-4"

		# Primary Parameters
		self.C05_Value = "0"
		self.C05_Notes = "Parameter for Constant Value-5"

		# Primary Parameters
		self.kcalc_Value = "1"
		self.kcalc_Notes = "Steady State Calc. Flag(1:Calc/0:No)"

class Block_U23CALPU09:
	def __init__(self):
		self.ID = 1839
		self.Name = "U23CALPU09"
		self.Model = "_GCALC_P"
		self.Notes = "Calc. Unit(for Units)"

		# General Parameters
		self._ITYPE_Value = "0"
		self._ITYPE_Notes = "Module Type(0:Compact, 1:Fast)"

		# General Parameters
		self._NLINE_Value = "10"
		self._NLINE_Notes = "Max. Row Num. of Calc. Eq."

		# General Parameters
		self._NCONS_Value = "0"
		self._NCONS_Notes = "Num. of Const. Variable(<=30)"

		# General Parameters
		self._NVAR_Value = "0"
		self._NVAR_Notes = "Num. of Calc. Variable(<=20)"

		# Primary Parameters
		self.etype_Value = "0"
		self.etype_Notes = "Execution Type(0:Cyclic, 1:By Request)"

		# Primary Parameters
		self.EQN_Value = "(10)"
		self.EQN_Notes = "Calculation Statements(in Process)"

		# Primary Parameters List Value
		self.EQN_List_Value = "'23DUM06'.mv=1; '23DUM08'.mv=1;	if(ZD2206A.Level < 0.2)	'23PU09'.Wd=8000*SDV2234A.pos*XCV2234A.pos;	else '23PU09'.Wd=0;	if(ZD2206B.Level < 0.2)	'23PU10'.Wd=8000*SDV2234B.pos*XCV2234B.pos;	else '23PU10'.Wd=0;	none	none	none"
		# Primary Parameters
		self.kcalc_Value = "1"
		self.kcalc_Notes = "Steady State Calc. Flag(1:Calc/0:No)"

class Block_U23CALPU11:
	def __init__(self):
		self.ID = 1840
		self.Name = "U23CALPU11"
		self.Model = "_GCALC_P"
		self.Notes = "Calc. Unit(for Units)"

		# General Parameters
		self._ITYPE_Value = "0"
		self._ITYPE_Notes = "Module Type(0:Compact, 1:Fast)"

		# General Parameters
		self._NLINE_Value = "10"
		self._NLINE_Notes = "Max. Row Num. of Calc. Eq."

		# General Parameters
		self._NCONS_Value = "0"
		self._NCONS_Notes = "Num. of Const. Variable(<=30)"

		# General Parameters
		self._NVAR_Value = "0"
		self._NVAR_Notes = "Num. of Calc. Variable(<=20)"

		# Primary Parameters
		self.etype_Value = "0"
		self.etype_Notes = "Execution Type(0:Cyclic, 1:By Request)"

		# Primary Parameters
		self.EQN_Value = "(10)"
		self.EQN_Notes = "Calculation Statements(in Process)"

		# Primary Parameters List Value
		self.EQN_List_Value = "'23PU11'.Wd=1000*ZD2225.Level/0.2;	if(D2208.Level<=0) '23DUM22'.mv = '23DUM23'.mv = FD2320212.mv;	else '23DUM22'.mv = '23DUM23'.mv = 0;	none	none	none	none	none	none	none"
		# Primary Parameters
		self.kcalc_Value = "1"
		self.kcalc_Notes = "Steady State Calc. Flag(1:Calc/0:No)"

class Block_U23CALPU97:
	def __init__(self):
		self.ID = 1841
		self.Name = "U23CALPU97"
		self.Model = "_GCALC_P"
		self.Notes = "Calc. Unit(for Process)"

		# General Parameters
		self._ITYPE_Value = "0"
		self._ITYPE_Notes = "Module Type(0:Compact, 1:Fast)"

		# General Parameters
		self._NLINE_Value = "10"
		self._NLINE_Notes = "Max. Row Num. of Calc. Eq."

		# General Parameters
		self._NCONS_Value = "0"
		self._NCONS_Notes = "Num. of Const. Variable(<=30)"

		# General Parameters
		self._NVAR_Value = "0"
		self._NVAR_Notes = "Num. of Calc. Variable(<=20)"

		# Primary Parameters
		self.etype_Value = "0"
		self.etype_Notes = "Execution Type(0:Cyclic, 1:By Request)"

		# Primary Parameters
		self.EQN_Value = "(10)"
		self.EQN_Notes = "Calculation Statements(in Process)"

		# Primary Parameters List Value
		self.EQN_List_Value = "if(K2911K.run==1) '23PP97'.Hdiff=20;	else '23PP97'.Hdiff=0;	none	none	none	none	none	none	none	none"
		# Primary Parameters
		self.kcalc_Value = "1"
		self.kcalc_Notes = "Steady State Calc. Flag(1:Calc/0:No)"

class Block_U23CALRCV01:
	def __init__(self):
		self.ID = 1842
		self.Name = "U23CALRCV01"
		self.Model = "_GCALC_P"
		self.Notes = "Calc. Unit(for Process)"

		# General Parameters
		self._ITYPE_Value = "0"
		self._ITYPE_Notes = "Module Type(0:Compact, 1:Fast)"

		# General Parameters
		self._NLINE_Value = "5"
		self._NLINE_Notes = "Max. Row Num. of Calc. Eq."

		# General Parameters
		self._NCONS_Value = "0"
		self._NCONS_Notes = "Num. of Const. Variable(<=30)"

		# General Parameters
		self._NVAR_Value = "0"
		self._NVAR_Notes = "Num. of Calc. Variable(<=20)"

		# Primary Parameters
		self.etype_Value = "0"
		self.etype_Notes = "Execution Type(0:Cyclic, 1:By Request)"

		# Primary Parameters
		self.EQN_Value = "(5)"
		self.EQN_Notes = "Calculation Statements(in Process)"

		# Primary Parameters List Value
		self.EQN_List_Value = "//self control valve setting	PC2926.CMOD=PC2925.CMOD=PC2924.CMOD=2;	PC2924.SVM=150;PC2925.SVM=25;PC2926.SVM=45;	'23DUM17'.mv=1;'23DUM18'.mv=1;	none"
		# Primary Parameters
		self.kcalc_Value = "1"
		self.kcalc_Notes = "Steady State Calc. Flag(1:Calc/0:No)"

class Block_U23CALRCV02:
	def __init__(self):
		self.ID = 1843
		self.Name = "U23CALRCV02"
		self.Model = "_GCALC_P"
		self.Notes = "Calc. Unit(for Process)"

		# General Parameters
		self._ITYPE_Value = "0"
		self._ITYPE_Notes = "Module Type(0:Compact, 1:Fast)"

		# General Parameters
		self._NLINE_Value = "10"
		self._NLINE_Notes = "Max. Row Num. of Calc. Eq."

		# General Parameters
		self._NCONS_Value = "0"
		self._NCONS_Notes = "Num. of Const. Variable(<=30)"

		# General Parameters
		self._NVAR_Value = "0"
		self._NVAR_Notes = "Num. of Calc. Variable(<=20)"

		# Primary Parameters
		self.etype_Value = "0"
		self.etype_Notes = "Execution Type(0:Cyclic, 1:By Request)"

		# Primary Parameters
		self.EQN_Value = "(10)"
		self.EQN_Notes = "Calculation Statements(in Process)"

		# Primary Parameters List Value
		self.EQN_List_Value = "PC2911.CMOD=2;PC2911.SVM=3.6;	'23DUM01'.mv=1;	TC2911.CMOD=2;TC2911.SVM=-1;	TC2912.CMOD=2;TC2912.SVM=-5;	//TC2913 & TC2914 should be change the OP manually by operator	//TC2913 & TC2914 normal range is 0~10 DEG	none	none	none	none"
		# Primary Parameters
		self.kcalc_Value = "1"
		self.kcalc_Notes = "Steady State Calc. Flag(1:Calc/0:No)"

class Block_U23CALZ2501:
	def __init__(self):
		self.ID = 1844
		self.Name = "U23CALZ2501"
		self.Model = "_GCALC_P"
		self.Notes = "Calc. Unit(for Process)"

		# General Parameters
		self._ITYPE_Value = "0"
		self._ITYPE_Notes = "Module Type(0:Compact, 1:Fast)"

		# General Parameters
		self._NLINE_Value = "100"
		self._NLINE_Notes = "Max. Row Num. of Calc. Eq."

		# General Parameters
		self._NCONS_Value = "30"
		self._NCONS_Notes = "Num. of Const. Variable(<=30)"

		# General Parameters
		self._NVAR_Value = "10"
		self._NVAR_Notes = "Num. of Calc. Variable(<=20)"

		# Primary Parameters
		self.etype_Value = "0"
		self.etype_Notes = "Execution Type(0:Cyclic, 1:By Request)"

		# Primary Parameters
		self.EQN_Value = "(100)"
		self.EQN_Notes = "Calculation Statements(in Process)"

		# Primary Parameters List Value
		self.EQN_List_Value = "//ZM25011 LCM motor	//ZM25014 PONY motor - used for the LCM heat up start with low speed	FCZ25011.CMOD=2;	if(ZM25011.run>0 || ZM25014.run>0) Z25011.on=1;	if(ZM25011.run>0)	FCZ25011.SVM= ZW2503V.Fset+ZW2504V.Fset+ZW2505V.Fset;	if(ZM25014.run>0)	FCZ25011.SVM=0;		if(ZM25013.on>0.1) Z25013.mv=1;		//C01-MIXER GATE CLOSE-1/OPEN-2 (PULSE SIGNAL SPRING BACK TO 0)	//The mixer gate increase 1% opening per time	if(C21==1) {	   Z2501MIXGATE.mv += 0.01;	   if(Z2501MIXGATE.mv >1) Z2501MIXGATE.mv=1;	   C01=0;	}	if(C11==1) {	   Z2501MIXGATE.mv += -0.01;	   if(Z2501MIXGATE.mv <0) Z2501MIXGATE.mv=0;	   C01=0;	}		//C02-DIVERTER DIVERT-1/THROUGH-2(PULSE SIGNAL SPRING BACK TO 0)	if(C12==1){Z2501DIVERTER.mv = 0; C02=0;}	if(C22==1){Z2501DIVERTER.mv = 1; C02=0;}		//C03-SCREEN OPE SIDE-1/CYLINDER SIDE-2(PULSE SIGNAL SPRING BACK TO 0)	//V03-SCREEN POSITION OPE SIDE-0/CYLINDER SIDE-1	if(C13==1){V03 = 0; C03=0;}	if(C23==1){V03 = 1; C03=0;}		//C04-SHAFT CWP STOP-1/FEED-2(PULSE SIGNAL SPRING BACK TO 0)	if(C14==1){FD2350803.mv = 0; C04=0;}	if(C24==1){FD2350803.mv = 1; C04=0;}		//C05-CUTTER SHAFT BACK-1/FOR-2(PULSE SIGNAL SPRING BACK TO 0)	//V05-SCREEN POSITION BACK-0/FOR-1	if(C15==1){V05 = 0; C05=0;}	if(C25==1){V05 = 1; C05=0;}		//C06-ZV2514 BYPASS-1/FEED-2(PULSE SIGNAL SPRING BACK TO 0)	if(C16==1){ZV2514.mv = 0; C06=0;}	if(C26==1){ZV2514.mv = 1; C06=0;}		//C07-ZV2515 OFF LINE-1/ON LINE-2(PULSE SIGNAL SPRING BACK TO 0)	if(C17==1){ZV2515.mv = 0; C07=0;}	if(C27==1){ZV2515.mv = 1; C07=0;}		//C08-AGGLOMERATE AUTO-1/REMOVE-0	if(C08==1){ZS2506.rsep2(23)=1; ZS2506.rsep2(24)=1;}	if(C08==0){ZS2506.rsep2(23)=0; ZS2506.rsep2(24)=0;}	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none"
		# Primary Parameters
		self.C01_Value = "0"
		self.C01_Notes = "Parameter for Constant Value-1"

		# Primary Parameters
		self.C02_Value = "0"
		self.C02_Notes = "Parameter for Constant Value-2"

		# Primary Parameters
		self.C03_Value = "0"
		self.C03_Notes = "Parameter for Constant Value-3"

		# Primary Parameters
		self.C04_Value = "0"
		self.C04_Notes = "Parameter for Constant Value-4"

		# Primary Parameters
		self.C05_Value = "0"
		self.C05_Notes = "Parameter for Constant Value-5"

		# Primary Parameters
		self.C06_Value = "0"
		self.C06_Notes = "Parameter for Constant Value-6"

		# Primary Parameters
		self.C07_Value = "0"
		self.C07_Notes = "Parameter for Constant Value-7"

		# Primary Parameters
		self.C08_Value = "0"
		self.C08_Notes = "Parameter for Constant Value-8"

		# Primary Parameters
		self.C09_Value = "0"
		self.C09_Notes = "Parameter for Constant Value-9"

		# Primary Parameters
		self.C10_Value = "0"
		self.C10_Notes = "Parameter for Constant Value-10"

		# Primary Parameters
		self.C11_Value = "0"
		self.C11_Notes = "Parameter for Constant Value-11"

		# Primary Parameters
		self.C12_Value = "0"
		self.C12_Notes = "Parameter for Constant Value-12"

		# Primary Parameters
		self.C13_Value = "0"
		self.C13_Notes = "Parameter for Constant Value-13"

		# Primary Parameters
		self.C14_Value = "0"
		self.C14_Notes = "Parameter for Constant Value-14"

		# Primary Parameters
		self.C15_Value = "0"
		self.C15_Notes = "Parameter for Constant Value-15"

		# Primary Parameters
		self.C16_Value = "0"
		self.C16_Notes = "Parameter for Constant Value-16"

		# Primary Parameters
		self.C17_Value = "0"
		self.C17_Notes = "Parameter for Constant Value-17"

		# Primary Parameters
		self.C18_Value = "0"
		self.C18_Notes = "Parameter for Constant Value-18"

		# Primary Parameters
		self.C19_Value = "0"
		self.C19_Notes = "Parameter for Constant Value-19"

		# Primary Parameters
		self.C20_Value = "0"
		self.C20_Notes = "Parameter for Constant Value-20"

		# Primary Parameters
		self.C21_Value = "0"
		self.C21_Notes = "Parameter for Constant Value-21"

		# Primary Parameters
		self.C22_Value = "0"
		self.C22_Notes = "Parameter for Constant Value-22"

		# Primary Parameters
		self.C23_Value = "0"
		self.C23_Notes = "Parameter for Constant Value-23"

		# Primary Parameters
		self.C24_Value = "0"
		self.C24_Notes = "Parameter for Constant Value-24"

		# Primary Parameters
		self.C25_Value = "0"
		self.C25_Notes = "Parameter for Constant Value-25"

		# Primary Parameters
		self.C26_Value = "0"
		self.C26_Notes = "Parameter for Constant Value-26"

		# Primary Parameters
		self.C27_Value = "0"
		self.C27_Notes = "Parameter for Constant Value-27"

		# Primary Parameters
		self.C28_Value = "0"
		self.C28_Notes = "Parameter for Constant Value-28"

		# Primary Parameters
		self.C29_Value = "0"
		self.C29_Notes = "Parameter for Constant Value-29"

		# Primary Parameters
		self.C30_Value = "0"
		self.C30_Notes = "Parameter for Constant Value-30"

		# Primary Parameters
		self.kcalc_Value = "1"
		self.kcalc_Notes = "Steady State Calc. Flag(1:Calc/0:No)"

class Block_U23CALZ2501A:
	def __init__(self):
		self.ID = 1845
		self.Name = "U23CALZ2501A"
		self.Model = "_GCALC_P"
		self.Notes = "Calc. Unit(for Process)"

		# General Parameters
		self._ITYPE_Value = "0"
		self._ITYPE_Notes = "Module Type(0:Compact, 1:Fast)"

		# General Parameters
		self._NLINE_Value = "50"
		self._NLINE_Notes = "Max. Row Num. of Calc. Eq."

		# General Parameters
		self._NCONS_Value = "10"
		self._NCONS_Notes = "Num. of Const. Variable(<=30)"

		# General Parameters
		self._NVAR_Value = "10"
		self._NVAR_Notes = "Num. of Calc. Variable(<=20)"

		# Primary Parameters
		self.etype_Value = "0"
		self.etype_Notes = "Execution Type(0:Cyclic, 1:By Request)"

		# Primary Parameters
		self.EQN_Value = "(50)"
		self.EQN_Notes = "Calculation Statements(in Process)"

		# Primary Parameters List Value
		self.EQN_List_Value = "//emulate the OPEN/CLOSE buttons transfer to ESD	//U23CALZ2501.C01-MIXER GATE CLOSE-1/OPEN-2 (PULSE SIGNAL SPRING BACK TO 0)	//C01-CLOSE V01-OPEN	if(U23CALZ2501.C01==2){C01=0;V01=1:}	if(U23CALZ2501.C01==1){C01=1;V01=0:}		//U23CALZ2501.C02-DIVERTER DIVERT-1/THROUGH-2(PULSE SIGNAL SPRING BACK TO 0)	//C02-DIVERT V02-THROUGH	if(U23CALZ2501.C02==2){C02=0;V02=1:}	if(U23CALZ2501.C02==1){C02=1;V02=0:}		//U23CALZ2501.C03-SCREEN OPE-1/CYLINDER-2(PULSE SIGNAL SPRING BACK TO 0)	//C03-OPE V03-CYLINDER	if(U23CALZ2501.C03==2){C03=0;V03=1:}	if(U23CALZ2501.C03==1){C03=1;V03=0:}		//U23CALZ2501.C04-SHAFT CWP STOP-1/FEED-2(PULSE SIGNAL SPRING BACK TO 0)	//C04-STOP V04-FEED	if(U23CALZ2501.C04==2){C04=0;V04=1:}	if(U23CALZ2501.C04==1){C04=1;V04=0:}		//U23CALZ2501.C05-CUTTER SHAFT BACK-1/FOR-2(PULSE SIGNAL SPRING BACK TO 0)	//C05-BACK V05-FOR	if(U23CALZ2501.C05==2){C05=0;V05=1:}	if(U23CALZ2501.C05==1){C05=1;V05=0:}		//U23CALZ2501.C06-ZV2514 BYPASS-1/FEED-2(PULSE SIGNAL SPRING BACK TO 0)	//C06-BYPASS V06-FEED	if(U23CALZ2501.C06==2){C06=0;V06=1:}	if(U23CALZ2501.C06==1){C06=1;V06=0:}		//U23CALZ2501.C07-ZV2515 OFF LINE-1/ON LINE-2(PULSE SIGNAL SPRING BACK TO 0)	//C07-OFF LINE V07-ON LINE	if(U23CALZ2501.C07==2){C07=0;V07=1:}	if(U23CALZ2501.C07==1){C07=1;V07=0:}	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none"
		# Primary Parameters
		self.C01_Value = "0"
		self.C01_Notes = "Parameter for Constant Value-1"

		# Primary Parameters
		self.C02_Value = "0"
		self.C02_Notes = "Parameter for Constant Value-2"

		# Primary Parameters
		self.C03_Value = "0"
		self.C03_Notes = "Parameter for Constant Value-3"

		# Primary Parameters
		self.C04_Value = "0"
		self.C04_Notes = "Parameter for Constant Value-4"

		# Primary Parameters
		self.C05_Value = "0"
		self.C05_Notes = "Parameter for Constant Value-5"

		# Primary Parameters
		self.C06_Value = "0"
		self.C06_Notes = "Parameter for Constant Value-6"

		# Primary Parameters
		self.C07_Value = "0"
		self.C07_Notes = "Parameter for Constant Value-7"

		# Primary Parameters
		self.C08_Value = "0"
		self.C08_Notes = "Parameter for Constant Value-8"

		# Primary Parameters
		self.C09_Value = "0"
		self.C09_Notes = "Parameter for Constant Value-9"

		# Primary Parameters
		self.C10_Value = "0"
		self.C10_Notes = "Parameter for Constant Value-10"

		# Primary Parameters
		self.kcalc_Value = "1"
		self.kcalc_Notes = "Steady State Calc. Flag(1:Calc/0:No)"

class Block_U23CALZV01:
	def __init__(self):
		self.ID = 1846
		self.Name = "U23CALZV01"
		self.Model = "_GCALC_P"
		self.Notes = "Calc. Unit(for Process)"

		# General Parameters
		self._ITYPE_Value = "0"
		self._ITYPE_Notes = "Module Type(0:Compact, 1:Fast)"

		# General Parameters
		self._NLINE_Value = "100"
		self._NLINE_Notes = "Max. Row Num. of Calc. Eq."

		# General Parameters
		self._NCONS_Value = "10"
		self._NCONS_Notes = "Num. of Const. Variable(<=30)"

		# General Parameters
		self._NVAR_Value = "5"
		self._NVAR_Notes = "Num. of Calc. Variable(<=20)"

		# Primary Parameters
		self.etype_Value = "0"
		self.etype_Notes = "Execution Type(0:Cyclic, 1:By Request)"

		# Primary Parameters
		self.EQN_Value = "(100)"
		self.EQN_Notes = "Calculation Statements(in Process)"

		# Primary Parameters List Value
		self.EQN_List_Value = "//C01 - ZV2303 speed setting from SEQ(0-100)/(0-8000)	//V03 - ZV2303 actual speed 	C01=U23SC12.V05;	V03=C01/100*34;	if(FD2330106.Fw>20 && ZM2303.on>0.1 && ZZ3102.Level<0.4){	 if(MA2302.Level>0.01) ZV2303.Fset = 8000*C01/100;	 else ZV2303.Fset = min(8000*C01/100, ZV2302.Fset);	}	else ZV2303.Fset = 0;		//C02 - ZZ3102 powder transfer gas capacity (Kg/S)	//C03 - powder transfer gas capacity coefficient	//assume the transfer gas velocity has 20% margin	C04 = 3334*0.8/3600;	C03 = 5700/pow(C04, 4);	C02= C03*pow((FTS502.F+0.00001), 4);		//V01 - ZV2304 speed 0/8000 can't tuning	V01=8000;	if(ZM2304.on>0 && ZZ3102.Level <0.5){	if(ZZ3102.Level > 0.02){	 if( C02>V01) ZV2304.Fset= V01;	//when the transfer capacity lower than rotary valve will block the valve	 else ZV2304.Fset += (0-ZV2304.Fset)*0.05;	}	 else ZV2304.Fset = min(ZV2303.Fset, V01);	}	else ZV2304.Fset = 0;		//V02 - ZV2305 speed (0/2000)	V02=2000;	if(FD2330105.Fw>5)	ZV2305.Wd=V02*ZM2305.run;	else ZV2305.Wd=0;		//N2 back flow from K2501 to ZZ3102	'23DUM07'.mv = 1;	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none"
		# Primary Parameters
		self.C01_Value = "0"
		self.C01_Notes = "Parameter for Constant Value-1"

		# Primary Parameters
		self.C02_Value = "6000"
		self.C02_Notes = "Parameter for Constant Value-2"

		# Primary Parameters
		self.C03_Value = "0"
		self.C03_Notes = "Parameter for Constant Value-3"

		# Primary Parameters
		self.C04_Value = "0"
		self.C04_Notes = "Parameter for Constant Value-4"

		# Primary Parameters
		self.C05_Value = "0"
		self.C05_Notes = "Parameter for Constant Value-5"

		# Primary Parameters
		self.C06_Value = "0.1"
		self.C06_Notes = "Parameter for Constant Value-6"

		# Primary Parameters
		self.C07_Value = "0"
		self.C07_Notes = "Parameter for Constant Value-7"

		# Primary Parameters
		self.C08_Value = "0"
		self.C08_Notes = "Parameter for Constant Value-8"

		# Primary Parameters
		self.C09_Value = "0"
		self.C09_Notes = "Parameter for Constant Value-9"

		# Primary Parameters
		self.C10_Value = "0"
		self.C10_Notes = "Parameter for Constant Value-10"

		# Primary Parameters
		self.kcalc_Value = "1"
		self.kcalc_Notes = "Steady State Calc. Flag(1:Calc/0:No)"

class Block_U23CALZV02:
	def __init__(self):
		self.ID = 1847
		self.Name = "U23CALZV02"
		self.Model = "_GCALC_P"
		self.Notes = "Calc. Unit(for Process)"

		# General Parameters
		self._ITYPE_Value = "0"
		self._ITYPE_Notes = "Module Type(0:Compact, 1:Fast)"

		# General Parameters
		self._NLINE_Value = "50"
		self._NLINE_Notes = "Max. Row Num. of Calc. Eq."

		# General Parameters
		self._NCONS_Value = "15"
		self._NCONS_Notes = "Num. of Const. Variable(<=30)"

		# General Parameters
		self._NVAR_Value = "5"
		self._NVAR_Notes = "Num. of Calc. Variable(<=20)"

		# Primary Parameters
		self.etype_Value = "0"
		self.etype_Notes = "Execution Type(0:Cyclic, 1:By Request)"

		# Primary Parameters
		self.EQN_Value = "(50)"
		self.EQN_Notes = "Calculation Statements(in Process)"

		# Primary Parameters List Value
		self.EQN_List_Value = "//C01 - ZD2206A powder transfer gas capacity (Kg/S)	//C02 - ZD2206B powder transfer gas capacity (Kg/S)	//V01 - ZV2207A speed setting (0-1)(0~8000)	//V02 - ZV2207B speed setting (0-1)(0~8000)	//C03 - powder transfer gas capacity coefficient	//C04 - design transfer N2 flowrate	//assume the transfer gas velocity has 20% margin	C04 = 4390.915*0.8/3600;	C03 = 6233.013/pow(C04, 4);	C01= C03*pow((FTS234A.F+0.00001), 4);	C02= C03*pow((FTS234B.F+0.00001), 4);		if(ZM2207A.on>0.1 && ZD2206A.Level > 0.001)	{	 if(C01 > V01*8000)ZV2207A.Fset = V01*8000;	//when the transfer capacity lower than rotary valve will block the valve	 else ZV2207A.Fset += (0-ZV2207A.Fset)*0.01;	}	else ZV2207A.Fset = 0;		if(ZM2207B.on>0.1 && ZD2206B.Level > 0.001)	{	 if(C02 > V02*8000)ZV2207A.Fset = V02*8000;	//when the transfer capacity lower than rotary valve will block the valve	 else ZV2207B.Fset += (0-ZV2207B.Fset)*0.01;	}	else ZV2207B.Fset = 0;		//temperary BL setting	'23BLDUM29IN1'.Fw = HV2232A.Fw;	'23BLDUM29IN1'.T = D2203A.Temp;	'23BLDUM29IN2'.Fw = FTS234A.F*3600;	'23BLDUM29IN2'.T = TT2262A.T;	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none"
		# Primary Parameters
		self.C01_Value = "0"
		self.C01_Notes = "Parameter for Constant Value-1"

		# Primary Parameters
		self.C02_Value = "0"
		self.C02_Notes = "Parameter for Constant Value-2"

		# Primary Parameters
		self.C03_Value = "0"
		self.C03_Notes = "Parameter for Constant Value-3"

		# Primary Parameters
		self.C04_Value = "0"
		self.C04_Notes = "Parameter for Constant Value-4"

		# Primary Parameters
		self.C05_Value = "0"
		self.C05_Notes = "Parameter for Constant Value-5"

		# Primary Parameters
		self.C06_Value = "0"
		self.C06_Notes = "Parameter for Constant Value-6"

		# Primary Parameters
		self.C07_Value = "0"
		self.C07_Notes = "Parameter for Constant Value-7"

		# Primary Parameters
		self.C08_Value = "0"
		self.C08_Notes = "Parameter for Constant Value-8"

		# Primary Parameters
		self.C09_Value = "0"
		self.C09_Notes = "Parameter for Constant Value-9"

		# Primary Parameters
		self.C10_Value = "0"
		self.C10_Notes = "Parameter for Constant Value-10"

		# Primary Parameters
		self.C11_Value = "0"
		self.C11_Notes = "Parameter for Constant Value-11"

		# Primary Parameters
		self.C12_Value = "0"
		self.C12_Notes = "Parameter for Constant Value-12"

		# Primary Parameters
		self.C13_Value = "0"
		self.C13_Notes = "Parameter for Constant Value-13"

		# Primary Parameters
		self.C14_Value = "0"
		self.C14_Notes = "Parameter for Constant Value-14"

		# Primary Parameters
		self.C15_Value = "0"
		self.C15_Notes = "Parameter for Constant Value-15"

		# Primary Parameters
		self.kcalc_Value = "1"
		self.kcalc_Notes = "Steady State Calc. Flag(1:Calc/0:No)"

class Block_U23CALZV03:
	def __init__(self):
		self.ID = 1848
		self.Name = "U23CALZV03"
		self.Model = "_GCALC_P"
		self.Notes = "Calc. Unit(for Process)"

		# General Parameters
		self._ITYPE_Value = "0"
		self._ITYPE_Notes = "Module Type(0:Compact, 1:Fast)"

		# General Parameters
		self._NLINE_Value = "50"
		self._NLINE_Notes = "Max. Row Num. of Calc. Eq."

		# General Parameters
		self._NCONS_Value = "5"
		self._NCONS_Notes = "Num. of Const. Variable(<=30)"

		# General Parameters
		self._NVAR_Value = "10"
		self._NVAR_Notes = "Num. of Calc. Variable(<=20)"

		# Primary Parameters
		self.etype_Value = "0"
		self.etype_Notes = "Execution Type(0:Cyclic, 1:By Request)"

		# Primary Parameters
		self.EQN_Value = "(50)"
		self.EQN_Notes = "Calculation Statements(in Process)"

		# Primary Parameters List Value
		self.EQN_List_Value = "//WT2511-V01;	//WT2512-V02;	//WT2513-V03;	V01=TK2501.Zl*252/1000;	V02=TK2502.u(24)*152/1000;	V03=TK2508.u(24)*152/1000;		//V05 - ZV2511 speed setting (0-1)/(0-8000)	if(ZM2511.run>0 && ZW2503.L<0.5 && FD2350203.Fw>15){	 if(TK2501.Level>0.02) ZV2511.Fset = 8000*V05;	 else ZV2511.Fset = min(ZV2304.Fset, 8000*V05);	}	else ZV2511.Fset = 0;		//V06 - ZV2512 speed setting (0-1)/(0-240)	if(ZM2512.run>0 && ZW2504.L<0.5 && TK2502.L>0.005 &&FD2350205.Fw>5)	ZV2512.Fset = 240*V06;	else ZV2512.Fset = 0;		//V07 - ZV2521 speed setting (0-1)/(0-80)	if(ZM2521.on>0.1 && ZW2505.L<0.5 && TK2508.L>0.002&&FD2350207.Fw>2)	ZV2521.Fset = 80*V07;	else ZV2521.Fset = 0;		//FC2513.MV-C01(0-1);	//FC2514.MV-C02(0-1);	//FC2515.MV-C03(0-1);	if(ZW2503M.on>0.1 && TK2503.Level<0.6){	 if(ZW2503.L>0.02) ZW2503V.Fset = 8000*C01;	 else ZW2503V.Fset = min(8000*C01, ZV2511.Fset);	}	else ZW2503V.Fset = 0;		if(ZW2504M.on>0.1 && TK2503.Level<0.6){	 if(ZW2504.L>0.005) ZW2504V.Fset = 240*C02;	 else ZW2504V.Fset = min(240*C02, ZV2512.Fset);	}	else ZW2504V.Fset = 0;		if(ZW2505M.on>0.1 && TK2503.Level<0.6){	  if(ZW2505.L>0.002) ZW2505V.Fset = 80*C03;	  else ZW2505V.Fset = min(80*C03, ZV2521.Fset);	}	else ZW2505V.Fset = 0;	none	none	none	none	none	none"
		# Primary Parameters
		self.C01_Value = "0"
		self.C01_Notes = "Parameter for Constant Value-1"

		# Primary Parameters
		self.C02_Value = "0"
		self.C02_Notes = "Parameter for Constant Value-2"

		# Primary Parameters
		self.C03_Value = "0"
		self.C03_Notes = "Parameter for Constant Value-3"

		# Primary Parameters
		self.C04_Value = "0"
		self.C04_Notes = "Parameter for Constant Value-4"

		# Primary Parameters
		self.C05_Value = "0"
		self.C05_Notes = "Parameter for Constant Value-5"

		# Primary Parameters
		self.kcalc_Value = "1"
		self.kcalc_Notes = "Steady State Calc. Flag(1:Calc/0:No)"

class Block_U23CALZV04:
	def __init__(self):
		self.ID = 1849
		self.Name = "U23CALZV04"
		self.Model = "_GCALC_P"
		self.Notes = "Calc. Unit(for Process)"

		# General Parameters
		self._ITYPE_Value = "0"
		self._ITYPE_Notes = "Module Type(0:Compact, 1:Fast)"

		# General Parameters
		self._NLINE_Value = "10"
		self._NLINE_Notes = "Max. Row Num. of Calc. Eq."

		# General Parameters
		self._NCONS_Value = "5"
		self._NCONS_Notes = "Num. of Const. Variable(<=30)"

		# General Parameters
		self._NVAR_Value = "5"
		self._NVAR_Notes = "Num. of Calc. Variable(<=20)"

		# Primary Parameters
		self.etype_Value = "0"
		self.etype_Notes = "Execution Type(0:Cyclic, 1:By Request)"

		# Primary Parameters
		self.EQN_Value = "(10)"
		self.EQN_Notes = "Calculation Statements(in Process)"

		# Primary Parameters List Value
		self.EQN_List_Value = "'23DUM10'.mv=1;		//V01 - ZV2277 speed setting (0-1)(0-8000)	if(ZM2277.on>0.1 && D2206.Level>0.05 &&M2301.LL < 1 ){	  if(FV2263.Fw>5) ZV2277.Fset = 8000*V01;	  else ZV2277.Fset += (0-8000*V01)*0.01;	}	else ZV2277.Fset = 0;	none	none"
		# Primary Parameters
		self.C01_Value = "0"
		self.C01_Notes = "Parameter for Constant Value-1"

		# Primary Parameters
		self.C02_Value = "0"
		self.C02_Notes = "Parameter for Constant Value-2"

		# Primary Parameters
		self.C03_Value = "0"
		self.C03_Notes = "Parameter for Constant Value-3"

		# Primary Parameters
		self.C04_Value = "0"
		self.C04_Notes = "Parameter for Constant Value-4"

		# Primary Parameters
		self.C05_Value = "0"
		self.C05_Notes = "Parameter for Constant Value-5"

		# Primary Parameters
		self.kcalc_Value = "1"
		self.kcalc_Notes = "Steady State Calc. Flag(1:Calc/0:No)"

class Block_U23CALZV05:
	def __init__(self):
		self.ID = 1850
		self.Name = "U23CALZV05"
		self.Model = "_GCALC_P"
		self.Notes = "Calc. Unit(for Process)"

		# General Parameters
		self._ITYPE_Value = "0"
		self._ITYPE_Notes = "Module Type(0:Compact, 1:Fast)"

		# General Parameters
		self._NLINE_Value = "30"
		self._NLINE_Notes = "Max. Row Num. of Calc. Eq."

		# General Parameters
		self._NCONS_Value = "5"
		self._NCONS_Notes = "Num. of Const. Variable(<=30)"

		# General Parameters
		self._NVAR_Value = "5"
		self._NVAR_Notes = "Num. of Calc. Variable(<=20)"

		# Primary Parameters
		self.etype_Value = "0"
		self.etype_Notes = "Execution Type(0:Cyclic, 1:By Request)"

		# Primary Parameters
		self.EQN_Value = "(30)"
		self.EQN_Notes = "Calculation Statements(in Process)"

		# Primary Parameters List Value
		self.EQN_List_Value = "//V01 - ZV2310 speed 0/2000	V01=2000;	if(FD2330115.Fw>5)	ZV2310.Wd = V01*ZM2310.run;	else ZV2310.Wd = 0;		//V02 - MM2301 screw speed (0-1)(0-8000)	if(FD2330104.Fw>20 && MM2301.run>0 && MA2302.Level < 1.7){	  if(M2301.LL >= 0.01) M2301A.Fset = 8000;	  else M2301A.Fset = min(ZV2277.Fset, 8000);	}	else M2301A.Fset = 0;		ZV2302.mv=ZM2302.run;		//C01 - M2301 Pwd	//V03 - ET2301	C01=2;	if(MM2301.on>0)	 V03=C01*0.3*pow(V02,3)+C01*0.7*M2301.LL*DT2301.D/400*pow(V02,2);	else V03=0;	none	none	none	none	none	none	none	none	none"
		# Primary Parameters
		self.C01_Value = "0"
		self.C01_Notes = "Parameter for Constant Value-1"

		# Primary Parameters
		self.C02_Value = "0"
		self.C02_Notes = "Parameter for Constant Value-2"

		# Primary Parameters
		self.C03_Value = "0"
		self.C03_Notes = "Parameter for Constant Value-3"

		# Primary Parameters
		self.C04_Value = "0"
		self.C04_Notes = "Parameter for Constant Value-4"

		# Primary Parameters
		self.C05_Value = "0"
		self.C05_Notes = "Parameter for Constant Value-5"

		# Primary Parameters
		self.kcalc_Value = "1"
		self.kcalc_Notes = "Steady State Calc. Flag(1:Calc/0:No)"

class Block_U23CALZV06:
	def __init__(self):
		self.ID = 1851
		self.Name = "U23CALZV06"
		self.Model = "_GCALC_P"
		self.Notes = "Calc. Unit(for Process)"

		# General Parameters
		self._ITYPE_Value = "0"
		self._ITYPE_Notes = "Module Type(0:Compact, 1:Fast)"

		# General Parameters
		self._NLINE_Value = "20"
		self._NLINE_Notes = "Max. Row Num. of Calc. Eq."

		# General Parameters
		self._NCONS_Value = "5"
		self._NCONS_Notes = "Num. of Const. Variable(<=30)"

		# General Parameters
		self._NVAR_Value = "0"
		self._NVAR_Notes = "Num. of Calc. Variable(<=20)"

		# Primary Parameters
		self.etype_Value = "0"
		self.etype_Notes = "Execution Type(0:Cyclic, 1:By Request)"

		# Primary Parameters
		self.EQN_Value = "(20)"
		self.EQN_Notes = "Calculation Statements(in Process)"

		# Primary Parameters List Value
		self.EQN_List_Value = "C01=ZS2506.u(23)+ZS2506.u(24);	if(ZM2507.on>0.1 && C01 > 0.01)	if(C01 > 0.01) ZS2507.Fset = Z25013.Fw;	else ZS2507.Fset = 0;		//V01 - ZV2513 capacity setting (0-1)/(0-10000)	if(ZM2513.run>0){	 if(TK2504.L > 0.05)ZV2513.Fset = 10000*V01;	 else ZV2513.Fset = min(M2501.Fset, 10000*V01);	}	else ZV2513.Fset = 0;	none	none	none	none	none	none	none	none	none"
		# Primary Parameters
		self.C01_Value = "0"
		self.C01_Notes = "Parameter for Constant Value-1"

		# Primary Parameters
		self.C02_Value = "0"
		self.C02_Notes = "Parameter for Constant Value-2"

		# Primary Parameters
		self.C03_Value = "0"
		self.C03_Notes = "Parameter for Constant Value-3"

		# Primary Parameters
		self.C04_Value = "0"
		self.C04_Notes = "Parameter for Constant Value-4"

		# Primary Parameters
		self.C05_Value = "0"
		self.C05_Notes = "Parameter for Constant Value-5"

		# Primary Parameters
		self.kcalc_Value = "1"
		self.kcalc_Notes = "Steady State Calc. Flag(1:Calc/0:No)"

class Block_U23CALZV07:
	def __init__(self):
		self.ID = 1852
		self.Name = "U23CALZV07"
		self.Model = "_GCALC_P"
		self.Notes = "Calc. Unit(for Process)"

		# General Parameters
		self._ITYPE_Value = "0"
		self._ITYPE_Notes = "Module Type(0:Compact, 1:Fast)"

		# General Parameters
		self._NLINE_Value = "30"
		self._NLINE_Notes = "Max. Row Num. of Calc. Eq."

		# General Parameters
		self._NCONS_Value = "5"
		self._NCONS_Notes = "Num. of Const. Variable(<=30)"

		# General Parameters
		self._NVAR_Value = "5"
		self._NVAR_Notes = "Num. of Calc. Variable(<=20)"

		# Primary Parameters
		self.etype_Value = "0"
		self.etype_Notes = "Execution Type(0:Cyclic, 1:By Request)"

		# Primary Parameters
		self.EQN_Value = "(30)"
		self.EQN_Notes = "Calculation Statements(in Process)"

		# Primary Parameters List Value
		self.EQN_List_Value = "//C01 - ZV2571 speed setting (0-1)	if(ZM2571.on>0.1 && TK2507.Level>0.0001 && FD2350101.pos>0.1)	ZV2571.Fset = 400*C01;	else ZV2571.Fset = 0;		'23DUM27'.mv=1;		//C02 - 23BLCATTK.setup_on	//V01 - Total amount bags	//V02 - 23BLCATTK deliver status	if(C02>=1 && '23BLPP'.setup_on==0 &&'23BLPP'.Zl<0.00001){	 '23BLPP'.setup_on = 1;	 C02 += -1;	 V01 += 1;	}	if('23BLPP'.Zl>=0.0001) V02=1;	else V02=0;	none	none	none	none	none	none	none	none	none	none	none	none	none"
		# Primary Parameters
		self.C01_Value = "1"
		self.C01_Notes = "Parameter for Constant Value-1"

		# Primary Parameters
		self.C02_Value = "0"
		self.C02_Notes = "Parameter for Constant Value-2"

		# Primary Parameters
		self.C03_Value = "0"
		self.C03_Notes = "Parameter for Constant Value-3"

		# Primary Parameters
		self.C04_Value = "0"
		self.C04_Notes = "Parameter for Constant Value-4"

		# Primary Parameters
		self.C05_Value = "0"
		self.C05_Notes = "Parameter for Constant Value-5"

		# Primary Parameters
		self.kcalc_Value = "1"
		self.kcalc_Notes = "Steady State Calc. Flag(1:Calc/0:No)"

class Block_U23SC03A:
	def __init__(self):
		self.ID = 1853
		self.Name = "U23SC03A"
		self.Model = "_GCALC_P"
		self.Notes = "D2201 Reactor EAL"

		# General Parameters
		self._ITYPE_Value = "0"
		self._ITYPE_Notes = "Module Type(0:Compact, 1:Fast)"

		# General Parameters
		self._NLINE_Value = "50"
		self._NLINE_Notes = "Max. Row Num. of Calc. Eq."

		# General Parameters
		self._NCONS_Value = "10"
		self._NCONS_Notes = "Num. of Const. Variable(<=30)"

		# General Parameters
		self._NVAR_Value = "10"
		self._NVAR_Notes = "Num. of Calc. Variable(<=20)"

		# Primary Parameters
		self.etype_Value = "0"
		self.etype_Notes = "Execution Type(0:Cyclic, 1:By Request)"

		# Primary Parameters
		self.EQN_Value = "(50)"
		self.EQN_Notes = "Calculation Statements(in Process)"

		# Primary Parameters List Value
		self.EQN_List_Value = "//C01 - SEQ CMD NONE/RESET/START/STOP:0/3/1/2;	//V01 - SEQ ST RUNNING/IDLE/STOPPED:1/0/2;		//start SEQ	if(V01==0 && C01==1){	  V01=1;	  C01=0;	//initial	  C02=40;C03=85;C04=85;C05=40;	  V02=V03=V04=V05=V06=0;	}	//stop SEQ	if(C01==2){	  V01=2;	  C01=0;}	//reset SEQ	if(V01==2 && C01==3){	  V01=0;	  C01=0;}		//C02 - FLP210EAL setpoint	//V02 - FLP210EAL flag 1:ALARM 0:NORMAL	//C03 - FLT210EAL setpoint	//V03 - FLT210EAL flag 1:ALARM 0:NORMAL	//C04 - FLT211EAL setpoint	//V04 - FLT211EAL flag 1:ALARM 0:NORMAL	//C05 - OLH210 setpoint	//V05 - OLH flag	//V06 - D201EAL flag 1:ALARM 0:NORMAL	if(V01==1){	  if(PT2210.P >= C02) V02=1;	  else V02=0;	  if(TT2210.T >= C03) V03=1;	  else V03=0;	  if(TT2211.T >= C04) V04=1;	  else V04=0;	  if((V02+V03+V04)>0) V06=1;	  else V06=0;	  if(V02==1){V05=1; HC2210.MVL=C05;}	  if((PT2210.P < (C02-1)) && V05==1)	   {HC2210.MVL=0;HC2210.MVM=0;V05=0;}	}	none	none	none	none	none	none	none	none"
		# Primary Parameters
		self.C01_Value = "0"
		self.C01_Notes = "Parameter for Constant Value-1"

		# Primary Parameters
		self.C02_Value = "0"
		self.C02_Notes = "Parameter for Constant Value-2"

		# Primary Parameters
		self.C03_Value = "0"
		self.C03_Notes = "Parameter for Constant Value-3"

		# Primary Parameters
		self.C04_Value = "0"
		self.C04_Notes = "Parameter for Constant Value-4"

		# Primary Parameters
		self.C05_Value = "0"
		self.C05_Notes = "Parameter for Constant Value-5"

		# Primary Parameters
		self.C06_Value = "0"
		self.C06_Notes = "Parameter for Constant Value-6"

		# Primary Parameters
		self.C07_Value = "0"
		self.C07_Notes = "Parameter for Constant Value-7"

		# Primary Parameters
		self.C08_Value = "0"
		self.C08_Notes = "Parameter for Constant Value-8"

		# Primary Parameters
		self.C09_Value = "0"
		self.C09_Notes = "Parameter for Constant Value-9"

		# Primary Parameters
		self.C10_Value = "0"
		self.C10_Notes = "Parameter for Constant Value-10"

		# Primary Parameters
		self.kcalc_Value = "1"
		self.kcalc_Notes = "Steady State Calc. Flag(1:Calc/0:No)"

class Block_U23SC03B:
	def __init__(self):
		self.ID = 1854
		self.Name = "U23SC03B"
		self.Model = "_GCALC_P"
		self.Notes = "D2203 Reactor EAL"

		# General Parameters
		self._ITYPE_Value = "0"
		self._ITYPE_Notes = "Module Type(0:Compact, 1:Fast)"

		# General Parameters
		self._NLINE_Value = "50"
		self._NLINE_Notes = "Max. Row Num. of Calc. Eq."

		# General Parameters
		self._NCONS_Value = "10"
		self._NCONS_Notes = "Num. of Const. Variable(<=30)"

		# General Parameters
		self._NVAR_Value = "10"
		self._NVAR_Notes = "Num. of Calc. Variable(<=20)"

		# Primary Parameters
		self.etype_Value = "0"
		self.etype_Notes = "Execution Type(0:Cyclic, 1:By Request)"

		# Primary Parameters
		self.EQN_Value = "(50)"
		self.EQN_Notes = "Calculation Statements(in Process)"

		# Primary Parameters List Value
		self.EQN_List_Value = "//C01 - SEQ CMD NONE/RESET/START/STOP:0/3/1/2;	//V01 - SEQ ST RUNNING/IDLE/STOPPED:1/0/2;		//start SEQ	if(V01==0 && C01==1){	  V01=1;	  C01=0;	//initial	  C02=20;C03=90;C04=90;C05=40;	  V02=V03=V04=V05=V06=0;	}	//stop SEQ	if(C01==2){	  V01=2;	  C01=0;}	//reset SEQ	if(V01==2 && C01==3){	  V01=0;	  C01=0;}		//C02 - FLP230EAL setpoint	//V02 - FLP230EAL flag 1:ALARM 0:NORMAL	//C03 - FLT232EAL setpoint	//V03 - FLT232EAL flag 1:ALARM 0:NORMAL	//C04 - FLT233EAL setpoint	//V04 - FLT233EAL flag 1:ALARM 0:NORMAL	//C05 - OLH230 setpoint	//V05 - OLH flag	//V06 - D203EAL flag 1:ALARM 0:NORMAL	if(V01==1){	  if(PT2230.P >= C02) V02=1;	  else V02=0;	  if(TT2232.T >= C03) V03=1;	  else V03=0;	  if(TT2233.T >= C04) V04=1;	  else V04=0;	  if((V02+V03+V04)>0) V06=1;	  else V06=0;	  if(V02==1){V05=1; HC2230.MVL=C05;}	  if((PT2230.P < (C02-1)) && V05==1)	   {HC2230.MVL=0;HC2230.MVM=0;V05=0;}	}	none	none	none	none	none	none	none	none"
		# Primary Parameters
		self.C01_Value = "0"
		self.C01_Notes = "Parameter for Constant Value-1"

		# Primary Parameters
		self.C02_Value = "0"
		self.C02_Notes = "Parameter for Constant Value-2"

		# Primary Parameters
		self.C03_Value = "0"
		self.C03_Notes = "Parameter for Constant Value-3"

		# Primary Parameters
		self.C04_Value = "0"
		self.C04_Notes = "Parameter for Constant Value-4"

		# Primary Parameters
		self.C05_Value = "0"
		self.C05_Notes = "Parameter for Constant Value-5"

		# Primary Parameters
		self.C06_Value = "0"
		self.C06_Notes = "Parameter for Constant Value-6"

		# Primary Parameters
		self.C07_Value = "0"
		self.C07_Notes = "Parameter for Constant Value-7"

		# Primary Parameters
		self.C08_Value = "0"
		self.C08_Notes = "Parameter for Constant Value-8"

		# Primary Parameters
		self.C09_Value = "0"
		self.C09_Notes = "Parameter for Constant Value-9"

		# Primary Parameters
		self.C10_Value = "0"
		self.C10_Notes = "Parameter for Constant Value-10"

		# Primary Parameters
		self.kcalc_Value = "1"
		self.kcalc_Notes = "Steady State Calc. Flag(1:Calc/0:No)"

class Block_U23SC04:
	def __init__(self):
		self.ID = 1855
		self.Name = "U23SC04"
		self.Model = "_GCALC_P"
		self.Notes = "1Reactor condenser bypass"

		# General Parameters
		self._ITYPE_Value = "0"
		self._ITYPE_Notes = "Module Type(0:Compact, 1:Fast)"

		# General Parameters
		self._NLINE_Value = "50"
		self._NLINE_Notes = "Max. Row Num. of Calc. Eq."

		# General Parameters
		self._NCONS_Value = "10"
		self._NCONS_Notes = "Num. of Const. Variable(<=30)"

		# General Parameters
		self._NVAR_Value = "10"
		self._NVAR_Notes = "Num. of Calc. Variable(<=20)"

		# Primary Parameters
		self.etype_Value = "0"
		self.etype_Notes = "Execution Type(0:Cyclic, 1:By Request)"

		# Primary Parameters
		self.EQN_Value = "(50)"
		self.EQN_Notes = "Calculation Statements(in Process)"

		# Primary Parameters List Value
		self.EQN_List_Value = "//C01 - SEQ CMD NONE/RESET/START/STOP:0/3/1/2;	//V01 - SEQ ST RUNNING/IDLE/STOPPED:1/0/2;		//start SEQ	if(V01==0 && C01==1){	  V01=1;	  C01=0;	//initial	  C02=90;C03=80;C04=60;	  V02=V03=V04=0;	}	//stop SEQ	if(C01==2){	  V01=2;	  C01=0;}	//reset SEQ	if(V01==2 && C01==3){	  V01=0;	  C01=0;}		//C02 - L212HH setpoint	//C03 - L212H setpoint	//C04 - HLIMIT setpoint	//V02 - PRVSOV OV previous value	//V03 - SEQACT flag	//V04 - 2 sec waiting	if(V01==1){	  if(LT2212.L>=C02 && V03==0) V04 += 1;	  if(V04>=2) {TC2210B.CMOD=1;	     V02=TC2210B.MVM;	     TC2210B.MVM=C04;	     V03=1;	     V04=0;}	  if(LT2212.L<C03 && V03==1){	    TC2210B.CMOD=1;	    TC2210B.MVM=V02;	    V03=0;}	}	 	none	none	none	none	none	none	none	none	none	none	none"
		# Primary Parameters
		self.C01_Value = "0"
		self.C01_Notes = "Parameter for Constant Value-1"

		# Primary Parameters
		self.C02_Value = "0"
		self.C02_Notes = "Parameter for Constant Value-2"

		# Primary Parameters
		self.C03_Value = "0"
		self.C03_Notes = "Parameter for Constant Value-3"

		# Primary Parameters
		self.C04_Value = "0"
		self.C04_Notes = "Parameter for Constant Value-4"

		# Primary Parameters
		self.C05_Value = "0"
		self.C05_Notes = "Parameter for Constant Value-5"

		# Primary Parameters
		self.C06_Value = "0"
		self.C06_Notes = "Parameter for Constant Value-6"

		# Primary Parameters
		self.C07_Value = "0"
		self.C07_Notes = "Parameter for Constant Value-7"

		# Primary Parameters
		self.C08_Value = "0"
		self.C08_Notes = "Parameter for Constant Value-8"

		# Primary Parameters
		self.C09_Value = "0"
		self.C09_Notes = "Parameter for Constant Value-9"

		# Primary Parameters
		self.C10_Value = "0"
		self.C10_Notes = "Parameter for Constant Value-10"

		# Primary Parameters
		self.kcalc_Value = "1"
		self.kcalc_Notes = "Steady State Calc. Flag(1:Calc/0:No)"

class Block_U23SC05:
	def __init__(self):
		self.ID = 1856
		self.Name = "U23SC05"
		self.Model = "_GCALC_P"
		self.Notes = "1Reactor Condenser CCW"

		# General Parameters
		self._ITYPE_Value = "0"
		self._ITYPE_Notes = "Module Type(0:Compact, 1:Fast)"

		# General Parameters
		self._NLINE_Value = "50"
		self._NLINE_Notes = "Max. Row Num. of Calc. Eq."

		# General Parameters
		self._NCONS_Value = "10"
		self._NCONS_Notes = "Num. of Const. Variable(<=30)"

		# General Parameters
		self._NVAR_Value = "10"
		self._NVAR_Notes = "Num. of Calc. Variable(<=20)"

		# Primary Parameters
		self.etype_Value = "0"
		self.etype_Notes = "Execution Type(0:Cyclic, 1:By Request)"

		# Primary Parameters
		self.EQN_Value = "(50)"
		self.EQN_Notes = "Calculation Statements(in Process)"

		# Primary Parameters List Value
		self.EQN_List_Value = "//C01 - SEQ CMD NONE/RESET/START/STOP:0/3/1/2;	//V01 - SEQ ST RUNNING/IDLE/STOPPED:1/0/2;	//start SEQ	if(V01==0 && C01==1){	  V01=1;	  C01=0;	//initial	  C02=0.05;C03=10.2;C04=2.5;C05=1.0;C06=2.0;	  V03=TC2210A.MVM;	  V02=V04=V06=0; V05=60;	}	//stop SEQ	if(C01==2){	  V01=2;	  C01=0;}	//reset SEQ	if(V01==2 && C01==3){	  V01=0;	  C01=0;}		//C02 - ALPHA	//C03 - K1	//C04 - K2	//C05 - K3	//C06 - K4	//V02 - PREVOV	//V03 - FLTRDOV	//V04 - E201CWINCACTIVE	//V05 - CALC INTERVAL 1M	//V06 - CALC INTERVAL flag		if(V01==1){	  if(FC2216.CMOD==2 && V06==0){	     V03=(1-C02)*V03+C02*TC2210A.MVM;	     if((V03-TC2210A.MVM)>=C03 && (V02-TC2210A.MVM)>=0){	       V04=1;	       if((V02-TC2210A.MVM)>=C04)	          FC2216.SVM += C06;	       else FC2216.SVM += C05;}	      else V04=0;	    V02=TC2210A.MVM;	    V06=1;	}  	    if(V06==1) V05 += _step*3600;	    if(V05>=60) {V06=0;V05=0;}	}	none	none	none	none"
		# Primary Parameters
		self.C01_Value = "0"
		self.C01_Notes = "Parameter for Constant Value-1"

		# Primary Parameters
		self.C02_Value = "0"
		self.C02_Notes = "Parameter for Constant Value-2"

		# Primary Parameters
		self.C03_Value = "0"
		self.C03_Notes = "Parameter for Constant Value-3"

		# Primary Parameters
		self.C04_Value = "0"
		self.C04_Notes = "Parameter for Constant Value-4"

		# Primary Parameters
		self.C05_Value = "0"
		self.C05_Notes = "Parameter for Constant Value-5"

		# Primary Parameters
		self.C06_Value = "0"
		self.C06_Notes = "Parameter for Constant Value-6"

		# Primary Parameters
		self.C07_Value = "0"
		self.C07_Notes = "Parameter for Constant Value-7"

		# Primary Parameters
		self.C08_Value = "0"
		self.C08_Notes = "Parameter for Constant Value-8"

		# Primary Parameters
		self.C09_Value = "0"
		self.C09_Notes = "Parameter for Constant Value-9"

		# Primary Parameters
		self.C10_Value = "0"
		self.C10_Notes = "Parameter for Constant Value-10"

		# Primary Parameters
		self.kcalc_Value = "1"
		self.kcalc_Notes = "Steady State Calc. Flag(1:Calc/0:No)"

class Block_U23SC06:
	def __init__(self):
		self.ID = 1857
		self.Name = "U23SC06"
		self.Model = "_GCALC_P"
		self.Notes = "1Reactor TRC setpoints"

		# General Parameters
		self._ITYPE_Value = "0"
		self._ITYPE_Notes = "Module Type(0:Compact, 1:Fast)"

		# General Parameters
		self._NLINE_Value = "50"
		self._NLINE_Notes = "Max. Row Num. of Calc. Eq."

		# General Parameters
		self._NCONS_Value = "10"
		self._NCONS_Notes = "Num. of Const. Variable(<=30)"

		# General Parameters
		self._NVAR_Value = "10"
		self._NVAR_Notes = "Num. of Calc. Variable(<=20)"

		# Primary Parameters
		self.etype_Value = "0"
		self.etype_Notes = "Execution Type(0:Cyclic, 1:By Request)"

		# Primary Parameters
		self.EQN_Value = "(50)"
		self.EQN_Notes = "Calculation Statements(in Process)"

		# Primary Parameters List Value
		self.EQN_List_Value = "//C01 - SEQ CMD NONE/RESET/START/STOP:0/3/1/2;	//V01 - SEQ ST RUNNING/IDLE/STOPPED:1/0/2;		//start SEQ	if(V01==0 && C01==1){	  V01=1;	  C01=0;	//initial	  V02=0;	  if(TC2210B.CMOD==2){	     TC2210B.SVM=TC2210A.SVM;	     V02=TC2210A.SVM;}	  if(TC2210B.CMOD==1){	     TC2210B.CMOD=2;	     TC2210B.SVM=TC2210A.SVM;	     if( TC2210B.SVM==TC2210A.SVM)TC2210B.CMOD=1;	     V02=TC2210A.SVM;}	}	//stop SEQ	if(C01==2){	  V01=2;	  C01=0;}	//reset SEQ	if(V01==2 && C01==3){	  V01=0;	  C01=0;}		//V02 - BUFSP	if(V01==1 && V02!=TC2210A.SVM){	  if(TC2210B.CMOD==2){	     TC2210B.SVM=TC2210A.SVM;	     V02=TC2210A.SVM;}	  if(TC2210B.CMOD==1){	     TC2210B.CMOD=2;	     TC2210B.SVM=TC2210A.SVM;	     if(TC2210B.SVM==TC2210A.SVM)TC2210B.CMOD=1;	     V02=TC2210A.SVM;}	}	none	none	none	none	none	none	none	none	none	none	none	none"
		# Primary Parameters
		self.C01_Value = "0"
		self.C01_Notes = "Parameter for Constant Value-1"

		# Primary Parameters
		self.C02_Value = "0"
		self.C02_Notes = "Parameter for Constant Value-2"

		# Primary Parameters
		self.C03_Value = "0"
		self.C03_Notes = "Parameter for Constant Value-3"

		# Primary Parameters
		self.C04_Value = "0"
		self.C04_Notes = "Parameter for Constant Value-4"

		# Primary Parameters
		self.C05_Value = "0"
		self.C05_Notes = "Parameter for Constant Value-5"

		# Primary Parameters
		self.C06_Value = "0"
		self.C06_Notes = "Parameter for Constant Value-6"

		# Primary Parameters
		self.C07_Value = "0"
		self.C07_Notes = "Parameter for Constant Value-7"

		# Primary Parameters
		self.C08_Value = "0"
		self.C08_Notes = "Parameter for Constant Value-8"

		# Primary Parameters
		self.C09_Value = "0"
		self.C09_Notes = "Parameter for Constant Value-9"

		# Primary Parameters
		self.C10_Value = "0"
		self.C10_Notes = "Parameter for Constant Value-10"

		# Primary Parameters
		self.kcalc_Value = "1"
		self.kcalc_Notes = "Steady State Calc. Flag(1:Calc/0:No)"

class Block_U23SC07:
	def __init__(self):
		self.ID = 1858
		self.Name = "U23SC07"
		self.Model = "_GCALC_P"
		self.Notes = "Inter reactor Dp"

		# General Parameters
		self._ITYPE_Value = "0"
		self._ITYPE_Notes = "Module Type(0:Compact, 1:Fast)"

		# General Parameters
		self._NLINE_Value = "50"
		self._NLINE_Notes = "Max. Row Num. of Calc. Eq."

		# General Parameters
		self._NCONS_Value = "10"
		self._NCONS_Notes = "Num. of Const. Variable(<=30)"

		# General Parameters
		self._NVAR_Value = "10"
		self._NVAR_Notes = "Num. of Calc. Variable(<=20)"

		# Primary Parameters
		self.etype_Value = "0"
		self.etype_Notes = "Execution Type(0:Cyclic, 1:By Request)"

		# Primary Parameters
		self.EQN_Value = "(50)"
		self.EQN_Notes = "Calculation Statements(in Process)"

		# Primary Parameters List Value
		self.EQN_List_Value = "//C01 - SEQ CMD NONE/RESET/START/STOP:0/3/1/2;	//V01 - SEQ ST RUNNING/IDLE/STOPPED:1/0/2;		//start SEQ	if(V01==0 && C01==1){	  V01=1;	  C01=0;	//initial	  C02=5; 	  V02=V03=V04=0;	}	//stop SEQ	if(C01==2){	  V01=2;	  C01=0;}	//reset SEQ	if(V01==2 && C01==3){	  V01=0;	  C01=0;}		//C02 - 277HH setpoint	//V02 - 277HH alarm flag	//V03 - PDT2277	//V04 - PDT2333	if(V01==1){	  V03=PT2210.P-PT2270.P;	  if(V03>C02) V02=1;	  else V02=0;	  V04=PT2310.P-PT2320.P;	}	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none"
		# Primary Parameters
		self.C01_Value = "0"
		self.C01_Notes = "Parameter for Constant Value-1"

		# Primary Parameters
		self.C02_Value = "0"
		self.C02_Notes = "Parameter for Constant Value-2"

		# Primary Parameters
		self.C03_Value = "0"
		self.C03_Notes = "Parameter for Constant Value-3"

		# Primary Parameters
		self.C04_Value = "0"
		self.C04_Notes = "Parameter for Constant Value-4"

		# Primary Parameters
		self.C05_Value = "0"
		self.C05_Notes = "Parameter for Constant Value-5"

		# Primary Parameters
		self.C06_Value = "0"
		self.C06_Notes = "Parameter for Constant Value-6"

		# Primary Parameters
		self.C07_Value = "0"
		self.C07_Notes = "Parameter for Constant Value-7"

		# Primary Parameters
		self.C08_Value = "0"
		self.C08_Notes = "Parameter for Constant Value-8"

		# Primary Parameters
		self.C09_Value = "0"
		self.C09_Notes = "Parameter for Constant Value-9"

		# Primary Parameters
		self.C10_Value = "0"
		self.C10_Notes = "Parameter for Constant Value-10"

		# Primary Parameters
		self.kcalc_Value = "1"
		self.kcalc_Notes = "Steady State Calc. Flag(1:Calc/0:No)"

class Block_U23SC08:
	def __init__(self):
		self.ID = 1859
		self.Name = "U23SC08"
		self.Model = "_GCALC_P"
		self.Notes = "1Reactor Spike"

		# General Parameters
		self._ITYPE_Value = "0"
		self._ITYPE_Notes = "Module Type(0:Compact, 1:Fast)"

		# General Parameters
		self._NLINE_Value = "100"
		self._NLINE_Notes = "Max. Row Num. of Calc. Eq."

		# General Parameters
		self._NCONS_Value = "10"
		self._NCONS_Notes = "Num. of Const. Variable(<=30)"

		# General Parameters
		self._NVAR_Value = "10"
		self._NVAR_Notes = "Num. of Calc. Variable(<=20)"

		# Primary Parameters
		self.etype_Value = "0"
		self.etype_Notes = "Execution Type(0:Cyclic, 1:By Request)"

		# Primary Parameters
		self.EQN_Value = "(100)"
		self.EQN_Notes = "Calculation Statements(in Process)"

		# Primary Parameters List Value
		self.EQN_List_Value = "//C01 - SEQ CMD NONE/RESET/START/STOP:0/3/1/2;	//V01 - SEQ ST RUNNING/IDLE/STOPPED:1/0/2;		//start SEQ	if(V01==0 && C01==1){	  V01=1;	  C01=0;	//initial	  C02=45; C03=60; C04=3;	  V02=V04=V05=V06=0;	}	//stop SEQ	if(C01==2){	  V01=2;	  C01=0;}	//reset SEQ	if(V01==2 && C01==3){	  V01=0;	  C01=0;}		//C10 - SPIKE START/STOP:1/0 from process	//V10 - SPIKE status indicate in process	if(C10==1) V10=1;	if(C10==0) V10=0;		//C02 - OVSPK	//C03 - SPKINTVL	//C04 - SPKTIME	//V02 - OVNOW	//V03 - MODE	//V04 - counter	//V05 - spike action flag	//V06 - spike interval flag		if(V01==1 && V10==1){	  if(V05==0 && V06==0){	    V03=LC2211.CMOD;	    V02=LC2211.MVM;	    }	  if(V04<C04 && V06==0){	    LC2211.CMOD=1;	    LC2211.MVM=C02;	    V05=1;} 	  if(V05==1) V04 += _step*3600;	  if(V04>=C04 && V05==1){	    LC2211.MVM=V02;	    if(V04 >= (C04+1)){	    LC2211.CMOD=V03;	    V04=0; V05=0;}}	  if(V05==0){	    V04 += _step*3600;	    V06=1;}	  if(V04>=C03 && V06==1){	    V04=0; V06=0;}  	}	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none"
		# Primary Parameters
		self.C01_Value = "0"
		self.C01_Notes = "Parameter for Constant Value-1"

		# Primary Parameters
		self.C02_Value = "0"
		self.C02_Notes = "Parameter for Constant Value-2"

		# Primary Parameters
		self.C03_Value = "0"
		self.C03_Notes = "Parameter for Constant Value-3"

		# Primary Parameters
		self.C04_Value = "0"
		self.C04_Notes = "Parameter for Constant Value-4"

		# Primary Parameters
		self.C05_Value = "0"
		self.C05_Notes = "Parameter for Constant Value-5"

		# Primary Parameters
		self.C06_Value = "0"
		self.C06_Notes = "Parameter for Constant Value-6"

		# Primary Parameters
		self.C07_Value = "0"
		self.C07_Notes = "Parameter for Constant Value-7"

		# Primary Parameters
		self.C08_Value = "0"
		self.C08_Notes = "Parameter for Constant Value-8"

		# Primary Parameters
		self.C09_Value = "0"
		self.C09_Notes = "Parameter for Constant Value-9"

		# Primary Parameters
		self.C10_Value = "0"
		self.C10_Notes = "Parameter for Constant Value-10"

		# Primary Parameters
		self.kcalc_Value = "1"
		self.kcalc_Notes = "Steady State Calc. Flag(1:Calc/0:No)"

class Block_U23SC09:
	def __init__(self):
		self.ID = 1860
		self.Name = "U23SC09"
		self.Model = "_GCALC_P"
		self.Notes = "C2201 Reflux switch"

		# General Parameters
		self._ITYPE_Value = "0"
		self._ITYPE_Notes = "Module Type(0:Compact, 1:Fast)"

		# General Parameters
		self._NLINE_Value = "50"
		self._NLINE_Notes = "Max. Row Num. of Calc. Eq."

		# General Parameters
		self._NCONS_Value = "10"
		self._NCONS_Notes = "Num. of Const. Variable(<=30)"

		# General Parameters
		self._NVAR_Value = "10"
		self._NVAR_Notes = "Num. of Calc. Variable(<=20)"

		# Primary Parameters
		self.etype_Value = "0"
		self.etype_Notes = "Execution Type(0:Cyclic, 1:By Request)"

		# Primary Parameters
		self.EQN_Value = "(50)"
		self.EQN_Notes = "Calculation Statements(in Process)"

		# Primary Parameters List Value
		self.EQN_List_Value = "//C01 - SEQ CMD NONE/RESET/START/STOP:0/3/1/2;	//V01 - SEQ ST RUNNING/IDLE/STOPPED:1/0/2;		//start SEQ	if(V01==0 && C01==1){	  V01=1;	  C01=0;	//initial	  V02=0;	}	//stop SEQ	if(C01==2){	  V01=2;	  C01=0;}	//reset SEQ	if(V01==2 && C01==3){	  V01=0;	  C01=0;}		//V02 - 2sec waiting	if(V01==1){	  if(PDT2283>=900) V02 += 1;	  else V02=0;	  if(V02>=2){	     FC2293.CMOD=1;FC2293.MVM=0;	     V02=0;}	}	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none"
		# Primary Parameters
		self.C01_Value = "0"
		self.C01_Notes = "Parameter for Constant Value-1"

		# Primary Parameters
		self.C02_Value = "0"
		self.C02_Notes = "Parameter for Constant Value-2"

		# Primary Parameters
		self.C03_Value = "0"
		self.C03_Notes = "Parameter for Constant Value-3"

		# Primary Parameters
		self.C04_Value = "0"
		self.C04_Notes = "Parameter for Constant Value-4"

		# Primary Parameters
		self.C05_Value = "0"
		self.C05_Notes = "Parameter for Constant Value-5"

		# Primary Parameters
		self.C06_Value = "0"
		self.C06_Notes = "Parameter for Constant Value-6"

		# Primary Parameters
		self.C07_Value = "0"
		self.C07_Notes = "Parameter for Constant Value-7"

		# Primary Parameters
		self.C08_Value = "0"
		self.C08_Notes = "Parameter for Constant Value-8"

		# Primary Parameters
		self.C09_Value = "0"
		self.C09_Notes = "Parameter for Constant Value-9"

		# Primary Parameters
		self.C10_Value = "0"
		self.C10_Notes = "Parameter for Constant Value-10"

		# Primary Parameters
		self.kcalc_Value = "1"
		self.kcalc_Notes = "Steady State Calc. Flag(1:Calc/0:No)"

class Block_U23SC10:
	def __init__(self):
		self.ID = 1861
		self.Name = "U23SC10"
		self.Model = "_GCALC_P"
		self.Notes = "PGC Data"

		# General Parameters
		self._ITYPE_Value = "0"
		self._ITYPE_Notes = "Module Type(0:Compact, 1:Fast)"

		# General Parameters
		self._NLINE_Value = "50"
		self._NLINE_Notes = "Max. Row Num. of Calc. Eq."

		# General Parameters
		self._NCONS_Value = "15"
		self._NCONS_Notes = "Num. of Const. Variable(<=30)"

		# General Parameters
		self._NVAR_Value = "5"
		self._NVAR_Notes = "Num. of Calc. Variable(<=20)"

		# Primary Parameters
		self.etype_Value = "0"
		self.etype_Notes = "Execution Type(0:Cyclic, 1:By Request)"

		# Primary Parameters
		self.EQN_Value = "(50)"
		self.EQN_Notes = "Calculation Statements(in Process)"

		# Primary Parameters List Value
		self.EQN_List_Value = "//C01 - SEQ CMD NONE/RESET/START/STOP:0/3/1/2;	//V01 - SEQ ST RUNNING/IDLE/STOPPED:1/0/2;		//start SEQ	if(V01==0 && C01==1){	  V01=1;	  C01=0;	//initial	  C02=C03=C04=0;	  V02=V03=V04=V05=V06=0;	}	//stop SEQ	if(C01==2){	  V01=2;	  C01=0;}	//reset SEQ	if(V01==2 && C01==3){	  V01=0;	  C01=0;}		//C02 - D2201 TOTAL (VOL%)	//C03 - D2203 TOTAL (VOL%)	//C04 - D2214 TOTAL (VOL%)	//V02 - CAL201A (need check H2 MONO!!!)	//V03 - CAL203A (need check H2 MONO!!!)	//V04 - CAL201	//V05 - CAL203	//V06 - CAL208	//C05 - AT2212	//C06 - AT2232	//C07 - AT2292		C05=AT2212A.Q+AT2212B.Q;	C06=AT2232A.Q+AT2232B.Q;	C07=AT2292A.Q+AT2292B.Q;		if(V01==1){	C02=AT2210B.Q+AT2211.Q+C05+AT2213.Q+AT2214.Q+AT2217.Q;		C03=AT2230B.Q+AT2231.Q+C06+AT2233.Q+AT2234.Q+AT2237.Q;		C04=AT2290B.Q+AT2291.Q+C07+AT2293.Q+AT2294.Q+AT2297.Q;		if( (C05+AT2213.Q) > 0) V04=ATD2201H2.Q/(C05+AT2213.Q);		if( (C06+AT2233.Q) > 0) V05=ATD2203H2.Q/(C06+AT2233.Q);		if( (C07+AT2293.Q) > 0) V06=ATD2214H2.Q/(C07+AT2293.Q);	}	none"
		# Primary Parameters
		self.C01_Value = "0"
		self.C01_Notes = "Parameter for Constant Value-1"

		# Primary Parameters
		self.C02_Value = "0"
		self.C02_Notes = "Parameter for Constant Value-2"

		# Primary Parameters
		self.C03_Value = "0"
		self.C03_Notes = "Parameter for Constant Value-3"

		# Primary Parameters
		self.C04_Value = "0"
		self.C04_Notes = "Parameter for Constant Value-4"

		# Primary Parameters
		self.C05_Value = "0"
		self.C05_Notes = "Parameter for Constant Value-5"

		# Primary Parameters
		self.C06_Value = "0"
		self.C06_Notes = "Parameter for Constant Value-6"

		# Primary Parameters
		self.C07_Value = "0"
		self.C07_Notes = "Parameter for Constant Value-7"

		# Primary Parameters
		self.C08_Value = "0"
		self.C08_Notes = "Parameter for Constant Value-8"

		# Primary Parameters
		self.C09_Value = "0"
		self.C09_Notes = "Parameter for Constant Value-9"

		# Primary Parameters
		self.C10_Value = "0"
		self.C10_Notes = "Parameter for Constant Value-10"

		# Primary Parameters
		self.C11_Value = "0"
		self.C11_Notes = "Parameter for Constant Value-11"

		# Primary Parameters
		self.C12_Value = "0"
		self.C12_Notes = "Parameter for Constant Value-12"

		# Primary Parameters
		self.C13_Value = "0"
		self.C13_Notes = "Parameter for Constant Value-13"

		# Primary Parameters
		self.C14_Value = "0"
		self.C14_Notes = "Parameter for Constant Value-14"

		# Primary Parameters
		self.C15_Value = "0"
		self.C15_Notes = "Parameter for Constant Value-15"

		# Primary Parameters
		self.kcalc_Value = "1"
		self.kcalc_Notes = "Steady State Calc. Flag(1:Calc/0:No)"

class Block_U23SC12:
	def __init__(self):
		self.ID = 1862
		self.Name = "U23SC12"
		self.Model = "_GCALC_P"
		self.Notes = "M2302 level"

		# General Parameters
		self._ITYPE_Value = "0"
		self._ITYPE_Notes = "Module Type(0:Compact, 1:Fast)"

		# General Parameters
		self._NLINE_Value = "80"
		self._NLINE_Notes = "Max. Row Num. of Calc. Eq."

		# General Parameters
		self._NCONS_Value = "10"
		self._NCONS_Notes = "Num. of Const. Variable(<=30)"

		# General Parameters
		self._NVAR_Value = "10"
		self._NVAR_Notes = "Num. of Calc. Variable(<=20)"

		# Primary Parameters
		self.etype_Value = "0"
		self.etype_Notes = "Execution Type(0:Cyclic, 1:By Request)"

		# Primary Parameters
		self.EQN_Value = "(80)"
		self.EQN_Notes = "Calculation Statements(in Process)"

		# Primary Parameters List Value
		self.EQN_List_Value = "//C01 - SEQ CMD NONE/RESET/START/STOP:0/3/1/2;	//V01 - SEQ ST RUNNING/IDLE/STOPPED:1/0/2;		//start SEQ	if(V01==0 && C01==1){	  V01=1;	  C01=0;	//initial	  C05=0;	  V02=V03=V04=V05=0; V06=1;	}	//stop SEQ	if(C01==2){	  V01=2;	  C01=0;}	//reset SEQ	if(V01==2 && C01==3){	  V01=0;	  C01=0;}		//C02 - L23201/FL320HH	//C03 - L23202/FL320H	//C04 - L23203/FL320L	//C05 - L320SCTBL	//C06 - S320OV	//V02 - L2320 (0/33/66/100%)	//V03 - SPEEDUP	//V04 - SPEEDDN	//V05 - Z303 rotating speed(0~100%) max34RPM	//V06 - manual flag pulse signal	if(V01==1){	//Program A&B	  if(C02==1) V02=100;	  else if(C03==1) V02=66;	  else if(C04==1) V02=33;	  else V02=0;	  if((C02==1&&C03*C04==0)||(C03==1&&C04==0)) C05=1;	  else C05=0;	//Program C	  if(SC2320.CMOD==2 || SC2320.CMOD==3){	    if((SC2320.PV-SC2320.SVM)/34 >= 0.02) V04=1;	    else V04=0;	    if((SC2320.PV-SC2320.SVM)/34 <= -0.02) V03=1;	    else V03=0;	    V06=1;}	  if(SC2320.CMOD==1){	//initialize	     if(V06==1){SC2320.MVM=50; V03=0; V04=0;V06=0;}		     if(SC2320.MVM>=70 && V05<90) V03=1;	     else V03=0;	     if(SC2320.MVM<=30 && V05>10) V04=1;	     else V04=0;}	  if(V03==1) V05 += 0.1*_step*3600;	  if(V04==1) V05 -= 0.1*_step*3600;     	}	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none"
		# Primary Parameters
		self.C01_Value = "0"
		self.C01_Notes = "Parameter for Constant Value-1"

		# Primary Parameters
		self.C02_Value = "0"
		self.C02_Notes = "Parameter for Constant Value-2"

		# Primary Parameters
		self.C03_Value = "0"
		self.C03_Notes = "Parameter for Constant Value-3"

		# Primary Parameters
		self.C04_Value = "0"
		self.C04_Notes = "Parameter for Constant Value-4"

		# Primary Parameters
		self.C05_Value = "0"
		self.C05_Notes = "Parameter for Constant Value-5"

		# Primary Parameters
		self.C06_Value = "0"
		self.C06_Notes = "Parameter for Constant Value-6"

		# Primary Parameters
		self.C07_Value = "0"
		self.C07_Notes = "Parameter for Constant Value-7"

		# Primary Parameters
		self.C08_Value = "0"
		self.C08_Notes = "Parameter for Constant Value-8"

		# Primary Parameters
		self.C09_Value = "0"
		self.C09_Notes = "Parameter for Constant Value-9"

		# Primary Parameters
		self.C10_Value = "0"
		self.C10_Notes = "Parameter for Constant Value-10"

		# Primary Parameters
		self.kcalc_Value = "1"
		self.kcalc_Notes = "Steady State Calc. Flag(1:Calc/0:No)"

class Block_U23SC20:
	def __init__(self):
		self.ID = 1863
		self.Name = "U23SC20"
		self.Model = "_GCALC_P"
		self.Notes = "D2210 level control switch"

		# General Parameters
		self._ITYPE_Value = "0"
		self._ITYPE_Notes = "Module Type(0:Compact, 1:Fast)"

		# General Parameters
		self._NLINE_Value = "50"
		self._NLINE_Notes = "Max. Row Num. of Calc. Eq."

		# General Parameters
		self._NCONS_Value = "10"
		self._NCONS_Notes = "Num. of Const. Variable(<=30)"

		# General Parameters
		self._NVAR_Value = "10"
		self._NVAR_Notes = "Num. of Calc. Variable(<=20)"

		# Primary Parameters
		self.etype_Value = "0"
		self.etype_Notes = "Execution Type(0:Cyclic, 1:By Request)"

		# Primary Parameters
		self.EQN_Value = "(50)"
		self.EQN_Notes = "Calculation Statements(in Process)"

		# Primary Parameters List Value
		self.EQN_List_Value = "//C01 - SEQ CMD NONE/RESET/START/STOP:0/3/1/2;	//V01 - SEQ ST RUNNING/IDLE/STOPPED:1/0/2;		//start SEQ	if(V01==0 && C01==1){	  V01=1;	  C01=0;	//initial	  C02=0; V02=0;	}	//stop SEQ	if(C01==2){	  V01=2;	  C01=0;}	//reset SEQ	if(V01==2 && C01==3){	  V01=0;	  C01=0;}		//HS1401.SWITCH 2:NORMAL 1:CIRCULATION	//V02 - CAL001 calculation	//C02 - CAL001 setpoint by panel man	V02=C02+FT2291.F;	if(V01==1){	  if(HS1401.SWITCH==2)FC2001.SVM=V02;	}	  	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none	none"
		# Primary Parameters
		self.C01_Value = "0"
		self.C01_Notes = "Parameter for Constant Value-1"

		# Primary Parameters
		self.C02_Value = "0"
		self.C02_Notes = "Parameter for Constant Value-2"

		# Primary Parameters
		self.C03_Value = "0"
		self.C03_Notes = "Parameter for Constant Value-3"

		# Primary Parameters
		self.C04_Value = "0"
		self.C04_Notes = "Parameter for Constant Value-4"

		# Primary Parameters
		self.C05_Value = "0"
		self.C05_Notes = "Parameter for Constant Value-5"

		# Primary Parameters
		self.C06_Value = "0"
		self.C06_Notes = "Parameter for Constant Value-6"

		# Primary Parameters
		self.C07_Value = "0"
		self.C07_Notes = "Parameter for Constant Value-7"

		# Primary Parameters
		self.C08_Value = "0"
		self.C08_Notes = "Parameter for Constant Value-8"

		# Primary Parameters
		self.C09_Value = "0"
		self.C09_Notes = "Parameter for Constant Value-9"

		# Primary Parameters
		self.C10_Value = "0"
		self.C10_Notes = "Parameter for Constant Value-10"

		# Primary Parameters
		self.kcalc_Value = "1"
		self.kcalc_Notes = "Steady State Calc. Flag(1:Calc/0:No)"

class Block_VR1201:
	def __init__(self):
		self.ID = 1864
		self.Name = "VR1201"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "10"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_VR1202:
	def __init__(self):
		self.ID = 1865
		self.Name = "VR1202"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "2.1"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_VR1203:
	def __init__(self):
		self.ID = 1866
		self.Name = "VR1203"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "10"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_VR2201:
	def __init__(self):
		self.ID = 1867
		self.Name = "VR2201"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "105"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_VR2202:
	def __init__(self):
		self.ID = 1868
		self.Name = "VR2202"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "200"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "10"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_WT2101:
	def __init__(self):
		self.ID = 1869
		self.Name = "WT2101"
		self.Model = "FTRANS"
		self.Notes = "True-value Flow Meter"

		# Primary Parameters
		self.FD_Value = "0"
		self.FD_Notes = "Flow Direction(0,3:Both,1:Normal,2:Rev.)"

		# Primary Parameters
		self.Fmax_Value = "20000"
		self.Fmax_Notes = "Maximum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Fmin_Value = "0"
		self.Fmin_Notes = "Minimum Flow Rate(unit/t_unit)"

		# Primary Parameters
		self.Ffail_Value = "0"
		self.Ffail_Notes = "Flow Rate on Failure(unit/t_unit)"

		# Primary Parameters
		self.unit_Value = "1"
		self.unit_Notes = "Unit(1:kg,2:t,3:Nm3,4:kNm3,..)"

		# Primary Parameters
		self.t_unit_Value = "1"
		self.t_unit_Notes = "Time Unit(1:h,2:min,3:d,4:s)"

		# Primary Parameters
		self.Factor_Value = "1"
		self.Factor_Notes = "Conversion Factor for Unit of Indication"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Indicated Value"

		# Primary Parameters
		self.FSt_Value = "0"
		self.FSt_Notes = "Flow Rate Start Value(in ind. unit)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_XCU2110:
	def __init__(self):
		self.ID = 1870
		self.Name = "XCU2110"
		self.Model = "EVUTIL"
		self.Notes = "emergency valve utility"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.mvrev_Value = "0"
		self.mvrev_Notes = "Reverse Flag of mv, 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd, 1:reverse"

class Block_XCU2112:
	def __init__(self):
		self.ID = 1871
		self.Name = "XCU2112"
		self.Model = "EVUTIL"
		self.Notes = "emergency valve utility"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.mvrev_Value = "0"
		self.mvrev_Notes = "Reverse Flag of mv, 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd, 1:reverse"

class Block_XCU2113:
	def __init__(self):
		self.ID = 1872
		self.Name = "XCU2113"
		self.Model = "EVUTIL"
		self.Notes = "emergency valve utility"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.mvrev_Value = "0"
		self.mvrev_Notes = "Reverse Flag of mv, 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd, 1:reverse"

class Block_XCU2170:
	def __init__(self):
		self.ID = 1873
		self.Name = "XCU2170"
		self.Model = "EVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.mvrev_Value = "0"
		self.mvrev_Notes = "Reverse Flag of mv, 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd, 1:reverse"

class Block_XCU2171:
	def __init__(self):
		self.ID = 1874
		self.Name = "XCU2171"
		self.Model = "EVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.mvrev_Value = "0"
		self.mvrev_Notes = "Reverse Flag of mv, 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd, 1:reverse"

class Block_XCU2172:
	def __init__(self):
		self.ID = 1875
		self.Name = "XCU2172"
		self.Model = "EVUTIL"
		self.Notes = "control valve utility"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.mvrev_Value = "0"
		self.mvrev_Notes = "Reverse Flag of mv, 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd, 1:reverse"

class Block_XCU2231A:
	def __init__(self):
		self.ID = 1876
		self.Name = "XCU2231A"
		self.Model = "EVUTIL"
		self.Notes = "emergency valve utility"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.mvrev_Value = "0"
		self.mvrev_Notes = "Reverse Flag of mv, 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd, 1:reverse"

class Block_XCU2231B:
	def __init__(self):
		self.ID = 1877
		self.Name = "XCU2231B"
		self.Model = "EVUTIL"
		self.Notes = "emergency valve utility"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.mvrev_Value = "0"
		self.mvrev_Notes = "Reverse Flag of mv, 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd, 1:reverse"

class Block_XCU2232A:
	def __init__(self):
		self.ID = 1878
		self.Name = "XCU2232A"
		self.Model = "EVUTIL"
		self.Notes = "emergency valve utility"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.mvrev_Value = "0"
		self.mvrev_Notes = "Reverse Flag of mv, 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd, 1:reverse"

class Block_XCU2232B:
	def __init__(self):
		self.ID = 1879
		self.Name = "XCU2232B"
		self.Model = "EVUTIL"
		self.Notes = "emergency valve utility"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.mvrev_Value = "0"
		self.mvrev_Notes = "Reverse Flag of mv, 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd, 1:reverse"

class Block_XCU2233A:
	def __init__(self):
		self.ID = 1880
		self.Name = "XCU2233A"
		self.Model = "EVUTIL"
		self.Notes = "emergency valve utility"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.mvrev_Value = "0"
		self.mvrev_Notes = "Reverse Flag of mv, 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd, 1:reverse"

class Block_XCU2233B:
	def __init__(self):
		self.ID = 1881
		self.Name = "XCU2233B"
		self.Model = "EVUTIL"
		self.Notes = "emergency valve utility"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.mvrev_Value = "0"
		self.mvrev_Notes = "Reverse Flag of mv, 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd, 1:reverse"

class Block_XCU2234A:
	def __init__(self):
		self.ID = 1882
		self.Name = "XCU2234A"
		self.Model = "EVUTIL"
		self.Notes = "emergency valve utility"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.mvrev_Value = "0"
		self.mvrev_Notes = "Reverse Flag of mv, 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd, 1:reverse"

class Block_XCU2234B:
	def __init__(self):
		self.ID = 1883
		self.Name = "XCU2234B"
		self.Model = "EVUTIL"
		self.Notes = "emergency valve utility"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.mvrev_Value = "0"
		self.mvrev_Notes = "Reverse Flag of mv, 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd, 1:reverse"

class Block_XCU2235A:
	def __init__(self):
		self.ID = 1884
		self.Name = "XCU2235A"
		self.Model = "EVUTIL"
		self.Notes = "emergency valve utility"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.mvrev_Value = "0"
		self.mvrev_Notes = "Reverse Flag of mv, 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd, 1:reverse"

class Block_XCU2235B:
	def __init__(self):
		self.ID = 1885
		self.Name = "XCU2235B"
		self.Model = "EVUTIL"
		self.Notes = "emergency valve utility"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.mvrev_Value = "0"
		self.mvrev_Notes = "Reverse Flag of mv, 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd, 1:reverse"

class Block_XCU2236A:
	def __init__(self):
		self.ID = 1886
		self.Name = "XCU2236A"
		self.Model = "EVUTIL"
		self.Notes = "emergency valve utility"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.mvrev_Value = "0"
		self.mvrev_Notes = "Reverse Flag of mv, 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd, 1:reverse"

class Block_XCU2236B:
	def __init__(self):
		self.ID = 1887
		self.Name = "XCU2236B"
		self.Model = "EVUTIL"
		self.Notes = "emergency valve utility"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.mvrev_Value = "0"
		self.mvrev_Notes = "Reverse Flag of mv, 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd, 1:reverse"

class Block_XCV2110:
	def __init__(self):
		self.ID = 1888
		self.Name = "XCV2110"
		self.Model = "SVALVE_S"
		self.Notes = "Shutoff Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV_Value = "24"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.topen_Value = "5"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "5"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close,1:Open) on Air Fail"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_XCV2112:
	def __init__(self):
		self.ID = 1889
		self.Name = "XCV2112"
		self.Model = "SVALVE_S"
		self.Notes = "Shutoff Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV_Value = "21"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.topen_Value = "5"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "5"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close,1:Open) on Air Fail"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_XCV2113:
	def __init__(self):
		self.ID = 1890
		self.Name = "XCV2113"
		self.Model = "SVALVE_S"
		self.Notes = "Shutoff Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV_Value = "875"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.topen_Value = "5"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "5"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close,1:Open) on Air Fail"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_XCV2170:
	def __init__(self):
		self.ID = 1891
		self.Name = "XCV2170"
		self.Model = "SVALVE_S"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV_Value = "21"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close,1:Open) on Air Fail"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_XCV2171:
	def __init__(self):
		self.ID = 1892
		self.Name = "XCV2171"
		self.Model = "SVALVE_S"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV_Value = "44"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close,1:Open) on Air Fail"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_XCV2172:
	def __init__(self):
		self.ID = 1893
		self.Name = "XCV2172"
		self.Model = "SVALVE_S"
		self.Notes = "Control Valve Block"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV_Value = "6.3"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.topen_Value = "0"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "0"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close,1:Open) on Air Fail"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_XCV2231A:
	def __init__(self):
		self.ID = 1894
		self.Name = "XCV2231A"
		self.Model = "SVALVE_S"
		self.Notes = "Shutoff Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV_Value = "2.16"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.topen_Value = "5"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "5"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close,1:Open) on Air Fail"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_XCV2231B:
	def __init__(self):
		self.ID = 1895
		self.Name = "XCV2231B"
		self.Model = "SVALVE_S"
		self.Notes = "Shutoff Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV_Value = "2.16"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.topen_Value = "5"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "5"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close,1:Open) on Air Fail"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_XCV2232A:
	def __init__(self):
		self.ID = 1896
		self.Name = "XCV2232A"
		self.Model = "SVALVE_S"
		self.Notes = "Shutoff Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV_Value = "3600"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.topen_Value = "5"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "5"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close,1:Open) on Air Fail"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_XCV2232B:
	def __init__(self):
		self.ID = 1897
		self.Name = "XCV2232B"
		self.Model = "SVALVE_S"
		self.Notes = "Shutoff Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV_Value = "3600"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.topen_Value = "5"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "5"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close,1:Open) on Air Fail"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_XCV2233A:
	def __init__(self):
		self.ID = 1898
		self.Name = "XCV2233A"
		self.Model = "SVALVE_S"
		self.Notes = "Shutoff Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV_Value = "216"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.topen_Value = "5"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "5"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close,1:Open) on Air Fail"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_XCV2233B:
	def __init__(self):
		self.ID = 1899
		self.Name = "XCV2233B"
		self.Model = "SVALVE_S"
		self.Notes = "Shutoff Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV_Value = "216"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.topen_Value = "5"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "5"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close,1:Open) on Air Fail"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_XCV2234A:
	def __init__(self):
		self.ID = 1900
		self.Name = "XCV2234A"
		self.Model = "SVALVE_S"
		self.Notes = "Shutoff Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV_Value = "3600"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.topen_Value = "5"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "5"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close,1:Open) on Air Fail"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_XCV2234B:
	def __init__(self):
		self.ID = 1901
		self.Name = "XCV2234B"
		self.Model = "SVALVE_S"
		self.Notes = "Shutoff Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV_Value = "3600"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.topen_Value = "5"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "5"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close,1:Open) on Air Fail"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_XCV2235A:
	def __init__(self):
		self.ID = 1902
		self.Name = "XCV2235A"
		self.Model = "SVALVE_S"
		self.Notes = "Shutoff Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV_Value = "0.16"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.topen_Value = "5"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "5"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close,1:Open) on Air Fail"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_XCV2235B:
	def __init__(self):
		self.ID = 1903
		self.Name = "XCV2235B"
		self.Model = "SVALVE_S"
		self.Notes = "Shutoff Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV_Value = "2.16"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.topen_Value = "5"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "5"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close,1:Open) on Air Fail"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_XCV2236A:
	def __init__(self):
		self.ID = 1904
		self.Name = "XCV2236A"
		self.Model = "SVALVE_S"
		self.Notes = "Shutoff Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV_Value = "24"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.topen_Value = "5"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "5"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close,1:Open) on Air Fail"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_XCV2236B:
	def __init__(self):
		self.ID = 1905
		self.Name = "XCV2236B"
		self.Model = "SVALVE_S"
		self.Notes = "Shutoff Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV_Value = "24"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.topen_Value = "5"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "5"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "1"
		self.Fair_Notes = "(0:Close,1:Open) on Air Fail"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_Z25011:
	def __init__(self):
		self.ID = 1906
		self.Name = "Z25011"
		self.Model = "PUMP_RC"
		self.Notes = "Pump with Stroke Control"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.tmove_Value = "5"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.Pd_Value = "297.458"
		self.Pd_Notes = "Design Discharge Pressure[kPa]"

		# Primary Parameters
		self.Vd_Value = "14.25"
		self.Vd_Notes = "Design Flow Rate[m3/h]"

		# Primary Parameters
		self.Wd_Value = "930"
		self.Wd_Notes = "Design Power[kW]"

		# Primary Parameters
		self.Vs_Value = "17.1"
		self.Vs_Notes = "Flow Rate at Zero Pressure[m3/h]"

		# Primary Parameters
		self.Ws_Value = "0"
		self.Ws_Notes = "Power at Zero Pressure[kW]"

		# Primary Parameters
		self.Pmax_Value = "444.558"
		self.Pmax_Notes = "Max. Discharge Pressure[kPa]"

		# Primary Parameters
		self.tstart_Value = "2"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "2"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.dd_Value = "400"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.stopfl_Value = "0"
		self.stopfl_Notes = "Flow when Stopped(0:No,1:Yes)"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.chkfail_Value = "0"
		self.chkfail_Notes = "Check Valve Fail Flag(0:Normal,1:Fail)"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Stroke Start Value[-]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_Z25012:
	def __init__(self):
		self.ID = 1907
		self.Name = "Z25012"
		self.Model = "PUMP_RC"
		self.Notes = "Pump with Stroke Control"

		# General Parameters
		self._ACCTYPE_Value = "0"
		self._ACCTYPE_Notes = "Start/Stop Type (0:Lag, 1:Curve)"

		# General Parameters
		self._NSTART_Value = "5"
		self._NSTART_Notes = "Number of Data Points for Start Curve"

		# General Parameters
		self._NSTOP_Value = "5"
		self._NSTOP_Notes = "Number of Data Points for Stop Curve"

		# Primary Parameters
		self.tmove_Value = "5"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.Pd_Value = "5985.31"
		self.Pd_Notes = "Design Discharge Pressure[kPa]"

		# Primary Parameters
		self.Vd_Value = "14.25"
		self.Vd_Notes = "Design Flow Rate[m3/h]"

		# Primary Parameters
		self.Wd_Value = "420"
		self.Wd_Notes = "Design Power[kW]"

		# Primary Parameters
		self.Vs_Value = "17.1"
		self.Vs_Notes = "Flow Rate at Zero Pressure[m3/h]"

		# Primary Parameters
		self.Ws_Value = "0"
		self.Ws_Notes = "Power at Zero Pressure[kW]"

		# Primary Parameters
		self.Pmax_Value = "11869.3"
		self.Pmax_Notes = "Max. Discharge Pressure[kPa]"

		# Primary Parameters
		self.tstart_Value = "2"
		self.tstart_Notes = "Start Time[s]"

		# Primary Parameters
		self.tstop_Value = "2"
		self.tstop_Notes = "Stop Time[s]"

		# Primary Parameters
		self.dd_Value = "400"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.stopfl_Value = "0"
		self.stopfl_Notes = "Flow when Stopped(0:No,1:Yes)"

		# Primary Parameters
		self.rstop_Value = "0.01"
		self.rstop_Notes = "Res. Coef. when Stopped[kPa/(kmol/h)^2]"

		# Primary Parameters
		self.chkfail_Value = "0"
		self.chkfail_Notes = "Check Valve Fail Flag(0:Normal,1:Fail)"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Discharge Pressure Start Value[kPa]"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Stroke Start Value[-]"

		# Primary Parameters
		self.onSt_Value = "1"
		self.onSt_Notes = "Run/Stop Switch Start Value(0/1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_Z25013:
	def __init__(self):
		self.ID = 1908
		self.Name = "Z25013"
		self.Model = "AVALVE_T"
		self.Notes = "Pump with Stroke Control"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "1"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.topen_Value = "5"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "5"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.tlag_Value = "3"
		self.tlag_Notes = "First Order Lag[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close 1:Open 2:Lock) on Air Fail"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posMax_Value = "1"
		self.posMax_Notes = "Valve Position Upper Limit(0-1)"

		# Primary Parameters
		self.posMin_Value = "0.02"
		self.posMin_Notes = "Valve Position Lower Limit(0-1)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_Z2501C1:
	def __init__(self):
		self.ID = 1909
		self.Name = "Z2501C1"
		self.Model = "HXMULTI"
		self.Notes = "Multi-fluid Heat Exchanger"

		# General Parameters
		self._NB_Value = "20"
		self._NB_Notes = "Number of segments"

		# Primary Parameters
		self.dirF_Value = "(6)"
		self.dirF_Notes = "Flow Direction(0:Normal,1:Reverse Flow)"

		# Primary Parameters List Value
		self.dirF_List_Value = array([1., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.A_Value = "(6)"
		self.A_Notes = "Heat Transfer Area[m2]"

		# Primary Parameters List Value
		self.A_List_Value = array([10.,  0.,  0.,  0.,  0.,  0.])
		# Primary Parameters
		self.Gw_Value = "500"
		self.Gw_Notes = "Heat Transfer Wall Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "H.Trans. Wall Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aair_Value = "0"
		self.Aair_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uair_Value = "6"
		self.Uair_Notes = "Heat Trans. Coef. for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Tw_Value = "(20)"
		self.Tw_Notes = "Heat Transfer Wall Temp.[C]"

		# Primary Parameters List Value
		self.Tw_List_Value = array([30., 30., 30., 30., 30., 30., 30., 30., 30., 30., 30., 30., 30.,
       30., 30., 30., 30., 30., 30., 30.])
		# Primary Parameters
		self.U_Value = "(6)"
		self.U_Notes = "Heat Transfer Coef.[W/m2K]"

		# Primary Parameters List Value
		self.U_List_Value = array([600., 600., 600., 600., 600., 600.])
		# Primary Parameters
		self.Ualp_Value = "(6)"
		self.Ualp_Notes = "Heat Transf. Coef. Flow Coef.[-]"

		# Primary Parameters List Value
		self.Ualp_List_Value = array([0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.tlag_Value = "(6)"
		self.tlag_Notes = "Fluid Lag Time [s]"

		# Primary Parameters List Value
		self.tlag_List_Value = array([0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Wdes_Value = "(6)"
		self.Wdes_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters List Value
		self.Wdes_List_Value = array([5800., 3000., 1000., 1000., 1000., 1000.])
		# Primary Parameters
		self.Ddes_Value = "(6)"
		self.Ddes_Notes = "Design Density[kg/m3]"

		# Primary Parameters List Value
		self.Ddes_List_Value = array([ 400. , 1000. ,   18.6, 1000. , 1000. , 1000. ])
		# Primary Parameters
		self.Pddes1_Value = "10"
		self.Pddes1_Notes = "Design Pressure Drop of Fluid 1 [kPa]"

		# Primary Parameters
		self.Pddes2_Value = "10"
		self.Pddes2_Notes = "Design Pressure Drop of Fluid 2 [kPa]"

		# Primary Parameters
		self.Pddes3_Value = "10"
		self.Pddes3_Notes = "Design Pressure Drop of Fluid 3 [kPa]"

		# Primary Parameters
		self.Pddes4_Value = "10"
		self.Pddes4_Notes = "Design Pressure Drop of Fluid 4 [kPa]"

		# Primary Parameters
		self.Pddes5_Value = "10"
		self.Pddes5_Notes = "Design Pressure Drop of Fluid 5 [kPa]"

		# Primary Parameters
		self.Pddes6_Value = "10"
		self.Pddes6_Notes = "Design Pressure Drop of Fluid 6 [kPa]"

		# Primary Parameters
		self.sys_Value = "(6)"
		self.sys_Notes = "System No."

		# Primary Parameters List Value
		self.sys_List_Value = array([1., 1., 1., 1., 1., 1.])
		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.TSt1_Value = "25"
		self.TSt1_Notes = "Outlet Temperature of Fluid 1 [C]"

		# Primary Parameters
		self.TSt2_Value = "25"
		self.TSt2_Notes = "Outlet Temperature of Fluid 2 [C]"

		# Primary Parameters
		self.TSt3_Value = "25"
		self.TSt3_Notes = "Outlet Temperature of Fluid 3 [C]"

		# Primary Parameters
		self.TSt4_Value = "25"
		self.TSt4_Notes = "Outlet Temperature of Fluid 4 [C]"

		# Primary Parameters
		self.TSt5_Value = "25"
		self.TSt5_Notes = "Outlet Temperature of Fluid 5 [C]"

		# Primary Parameters
		self.TSt6_Value = "25"
		self.TSt6_Notes = "Outlet Temperature of Fluid 6 [C]"

		# Primary Parameters
		self.Pd1_Value = "10"
		self.Pd1_Notes = "Pressure Drop of Fluid 1 [kPa]"

		# Primary Parameters
		self.Pd2_Value = "10"
		self.Pd2_Notes = "Pressure Drop of Fluid 2 [kPa]"

		# Primary Parameters
		self.Pd3_Value = "10"
		self.Pd3_Notes = "Pressure Drop of Fluid 3 [kPa]"

		# Primary Parameters
		self.Pd4_Value = "10"
		self.Pd4_Notes = "Pressure Drop of Fluid 4 [kPa]"

		# Primary Parameters
		self.Pd5_Value = "10"
		self.Pd5_Notes = "Pressure Drop of Fluid 5 [kPa]"

		# Primary Parameters
		self.Pd6_Value = "10"
		self.Pd6_Notes = "Pressure Drop of Fluid 6 [kPa]"

class Block_Z2501C2:
	def __init__(self):
		self.ID = 1910
		self.Name = "Z2501C2"
		self.Model = "HXMULTI"
		self.Notes = "Multi-fluid Heat Exchanger"

		# General Parameters
		self._NB_Value = "20"
		self._NB_Notes = "Number of segments"

		# Primary Parameters
		self.dirF_Value = "(6)"
		self.dirF_Notes = "Flow Direction(0:Normal,1:Reverse Flow)"

		# Primary Parameters List Value
		self.dirF_List_Value = array([1., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.A_Value = "(6)"
		self.A_Notes = "Heat Transfer Area[m2]"

		# Primary Parameters List Value
		self.A_List_Value = array([10.,  0.,  0.,  0.,  0.,  0.])
		# Primary Parameters
		self.Gw_Value = "500"
		self.Gw_Notes = "Heat Transfer Wall Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "H.Trans. Wall Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aair_Value = "0"
		self.Aair_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uair_Value = "6"
		self.Uair_Notes = "Heat Trans. Coef. for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Tw_Value = "(20)"
		self.Tw_Notes = "Heat Transfer Wall Temp.[C]"

		# Primary Parameters List Value
		self.Tw_List_Value = array([30., 30., 30., 30., 30., 30., 30., 30., 30., 30., 30., 30., 30.,
       30., 30., 30., 30., 30., 30., 30.])
		# Primary Parameters
		self.U_Value = "(6)"
		self.U_Notes = "Heat Transfer Coef.[W/m2K]"

		# Primary Parameters List Value
		self.U_List_Value = array([600., 600., 600., 600., 600., 600.])
		# Primary Parameters
		self.Ualp_Value = "(6)"
		self.Ualp_Notes = "Heat Transf. Coef. Flow Coef.[-]"

		# Primary Parameters List Value
		self.Ualp_List_Value = array([0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.tlag_Value = "(6)"
		self.tlag_Notes = "Fluid Lag Time [s]"

		# Primary Parameters List Value
		self.tlag_List_Value = array([0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Wdes_Value = "(6)"
		self.Wdes_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters List Value
		self.Wdes_List_Value = array([5800., 3000., 1000., 1000., 1000., 1000.])
		# Primary Parameters
		self.Ddes_Value = "(6)"
		self.Ddes_Notes = "Design Density[kg/m3]"

		# Primary Parameters List Value
		self.Ddes_List_Value = array([ 400. , 1000. ,   18.6, 1000. , 1000. , 1000. ])
		# Primary Parameters
		self.Pddes1_Value = "10"
		self.Pddes1_Notes = "Design Pressure Drop of Fluid 1 [kPa]"

		# Primary Parameters
		self.Pddes2_Value = "10"
		self.Pddes2_Notes = "Design Pressure Drop of Fluid 2 [kPa]"

		# Primary Parameters
		self.Pddes3_Value = "10"
		self.Pddes3_Notes = "Design Pressure Drop of Fluid 3 [kPa]"

		# Primary Parameters
		self.Pddes4_Value = "10"
		self.Pddes4_Notes = "Design Pressure Drop of Fluid 4 [kPa]"

		# Primary Parameters
		self.Pddes5_Value = "10"
		self.Pddes5_Notes = "Design Pressure Drop of Fluid 5 [kPa]"

		# Primary Parameters
		self.Pddes6_Value = "10"
		self.Pddes6_Notes = "Design Pressure Drop of Fluid 6 [kPa]"

		# Primary Parameters
		self.sys_Value = "(6)"
		self.sys_Notes = "System No."

		# Primary Parameters List Value
		self.sys_List_Value = array([1., 1., 1., 1., 1., 1.])
		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.TSt1_Value = "25"
		self.TSt1_Notes = "Outlet Temperature of Fluid 1 [C]"

		# Primary Parameters
		self.TSt2_Value = "25"
		self.TSt2_Notes = "Outlet Temperature of Fluid 2 [C]"

		# Primary Parameters
		self.TSt3_Value = "25"
		self.TSt3_Notes = "Outlet Temperature of Fluid 3 [C]"

		# Primary Parameters
		self.TSt4_Value = "25"
		self.TSt4_Notes = "Outlet Temperature of Fluid 4 [C]"

		# Primary Parameters
		self.TSt5_Value = "25"
		self.TSt5_Notes = "Outlet Temperature of Fluid 5 [C]"

		# Primary Parameters
		self.TSt6_Value = "25"
		self.TSt6_Notes = "Outlet Temperature of Fluid 6 [C]"

		# Primary Parameters
		self.Pd1_Value = "10"
		self.Pd1_Notes = "Pressure Drop of Fluid 1 [kPa]"

		# Primary Parameters
		self.Pd2_Value = "10"
		self.Pd2_Notes = "Pressure Drop of Fluid 2 [kPa]"

		# Primary Parameters
		self.Pd3_Value = "10"
		self.Pd3_Notes = "Pressure Drop of Fluid 3 [kPa]"

		# Primary Parameters
		self.Pd4_Value = "10"
		self.Pd4_Notes = "Pressure Drop of Fluid 4 [kPa]"

		# Primary Parameters
		self.Pd5_Value = "10"
		self.Pd5_Notes = "Pressure Drop of Fluid 5 [kPa]"

		# Primary Parameters
		self.Pd6_Value = "10"
		self.Pd6_Notes = "Pressure Drop of Fluid 6 [kPa]"

class Block_Z2501DIVERTER:
	def __init__(self):
		self.ID = 1911
		self.Name = "Z2501DIVERTER"
		self.Model = "QVALVE_B"
		self.Notes = "Shutoff Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV1_Value = "1000"
		self.CV1_Notes = "No.1 Valve Cv Value"

		# Primary Parameters
		self.CV2_Value = "1000"
		self.CV2_Notes = "No.2 Valve Cv Value"

		# Primary Parameters
		self.topen_Value = "5"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "5"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff1_Value = "1"
		self.Cff1_Notes = "No. 1 Valve F.R. Correction Factor[-]"

		# Primary Parameters
		self.Cff2_Value = "1"
		self.Cff2_Notes = "No. 2 Valve F.R. Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "0:Fail Valve-1 Cls,1:Opn,2:Lock"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_Z2501MIXGATE:
	def __init__(self):
		self.ID = 1912
		self.Name = "Z2501MIXGATE"
		self.Model = "HVALVE_T"
		self.Notes = "Regulation Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI 2:ISA"

		# General Parameters
		self._NDATA_Value = "0"
		self._NDATA_Notes = "Number of Valve Position Data Points"

		# Primary Parameters
		self.CV_Value = "4096"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.Type_Value = "1"
		self.Type_Notes = "1:Eq%,2:Lin.,3:Simpl.,4:Butterfly,5:Exp."

		# Primary Parameters
		self.R_Value = "50"
		self.R_Notes = "Rangeability or R Value"

		# Primary Parameters
		self.S0_Value = "0.5"
		self.S0_Notes = "Valve Characteristic 0<S0<=1"

		# Primary Parameters
		self.pos0_Value = "0.02"
		self.pos0_Notes = "Minimum Position for Characteristic(0-1)"

		# Primary Parameters
		self.w0_Value = "0"
		self.w0_Notes = "Minimum Cv Ratio(0-1)"

		# Primary Parameters
		self.tmove_Value = "0"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Dead_Value = "0"
		self.Dead_Notes = "Dead Band(0-1)"

		# Primary Parameters
		self.Stick_Value = "0"
		self.Stick_Notes = "Stick Band(0-1)"

		# Primary Parameters
		self.Offset_Value = "0"
		self.Offset_Notes = "Offset Value for Valve Position"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "0.5"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_Z2501PM1:
	def __init__(self):
		self.ID = 1913
		self.Name = "Z2501PM1"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_Z2501PM2:
	def __init__(self):
		self.ID = 1914
		self.Name = "Z2501PM2"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_Z2501PM3:
	def __init__(self):
		self.ID = 1915
		self.Name = "Z2501PM3"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_Z2501SCREEN:
	def __init__(self):
		self.ID = 1916
		self.Name = "Z2501SCREEN"
		self.Model = "STRAINS"
		self.Notes = "Strainer(Simple)"

		# Primary Parameters
		self.Wd_Value = "5800"
		self.Wd_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters
		self.DP_Value = "10"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.dd_Value = "400"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.md_Value = "0"
		self.md_Notes = "Design Viscosity[Pas]"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_Z2501V1:
	def __init__(self):
		self.ID = 1917
		self.Name = "Z2501V1"
		self.Model = "_TANK_LAC"
		self.Notes = "Liquid Accumulator"

		# Primary Parameters
		self.V_Value = "2"
		self.V_Notes = "Maximum Capacity of Tank[m3]"

		# Primary Parameters
		self.Pmax_Value = "444.558"
		self.Pmax_Notes = "Pressure at Maximum Capacity[kPa]"

		# Primary Parameters
		self.Pmin_Value = "100"
		self.Pmin_Notes = "Pressure at Minimum Capacity[kPa]"

		# Primary Parameters
		self.T_Value = "30"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.P_Value = "297.458"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Liquid Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_Z2501V2:
	def __init__(self):
		self.ID = 1918
		self.Name = "Z2501V2"
		self.Model = "_TANK_LAC"
		self.Notes = "Liquid Accumulator"

		# Primary Parameters
		self.V_Value = "1"
		self.V_Notes = "Maximum Capacity of Tank[m3]"

		# Primary Parameters
		self.Pmax_Value = "11869.3"
		self.Pmax_Notes = "Pressure at Maximum Capacity[kPa]"

		# Primary Parameters
		self.Pmin_Value = "100"
		self.Pmin_Notes = "Pressure at Minimum Capacity[kPa]"

		# Primary Parameters
		self.T_Value = "30"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.P_Value = "5985.31"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Liquid Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.PSt_Value = "101.325"
		self.PSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_ZD1401:
	def __init__(self):
		self.ID = 1919
		self.Name = "ZD1401"
		self.Model = "_FLASHD"
		self.Notes = "Flash Drum (Simplified)"

		# General Parameters
		self._NZLHGT_Value = "0"
		self._NZLHGT_Notes = "Specify Nozzle Heights(0:N,1:Y)"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.y_Value = "(31)"
		self.y_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.y_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "0.5"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "1"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Gw_Value = "500"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Uv_Value = "40"
		self.Uv_Notes = "Vapor Phase Heat Transfer Coef.[W/m2K]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Vv0_Value = "5"
		self.Vv0_Notes = "Volume of Connected Pipe[m3]"

		# Primary Parameters
		self.Rdis_Value = "0.05"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.kG_Value = "0.1"
		self.kG_Notes = "Mass Transfer Rate Coef.[kmol/m2kPah]"

		# Primary Parameters
		self.Fcons_Value = "1"
		self.Fcons_Notes = "Flow Constraints(1:Yes,0:No)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.1, 0.1, 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ])
		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_ZD2104:
	def __init__(self):
		self.ID = 1920
		self.Name = "ZD2104"
		self.Model = "_FLASHD"
		self.Notes = "Flash Drum"

		# General Parameters
		self._NZLHGT_Value = "0"
		self._NZLHGT_Notes = "Specify Nozzle Heights(0:N,1:Y)"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.y_Value = "(31)"
		self.y_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.y_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "0.4"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "0.7"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Gw_Value = "200"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Uv_Value = "40"
		self.Uv_Notes = "Vapor Phase Heat Transfer Coef.[W/m2K]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Vv0_Value = "5"
		self.Vv0_Notes = "Volume of Connected Pipe[m3]"

		# Primary Parameters
		self.Rdis_Value = "0.05"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.Lmin_Value = "0.05"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.kG_Value = "0.1"
		self.kG_Notes = "Mass Transfer Rate Coef.[kmol/m2kPah]"

		# Primary Parameters
		self.Fcons_Value = "1"
		self.Fcons_Notes = "Flow Constraints(1:Yes,0:No)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.1, 0.1, 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ])
		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_ZD2205A:
	def __init__(self):
		self.ID = 1921
		self.Name = "ZD2205A"
		self.Model = "_FLASHD"
		self.Notes = "Flash Drum (Simplified)"

		# General Parameters
		self._NZLHGT_Value = "0"
		self._NZLHGT_Notes = "Specify Nozzle Heights(0:N,1:Y)"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.y_Value = "(31)"
		self.y_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.y_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "0.95"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "0.211"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Gw_Value = "2000"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Uv_Value = "40"
		self.Uv_Notes = "Vapor Phase Heat Transfer Coef.[W/m2K]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Vv0_Value = "0"
		self.Vv0_Notes = "Volume of Connected Pipe[m3]"

		# Primary Parameters
		self.Rdis_Value = "0.05"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.kG_Value = "0.1"
		self.kG_Notes = "Mass Transfer Rate Coef.[kmol/m2kPah]"

		# Primary Parameters
		self.Fcons_Value = "1"
		self.Fcons_Notes = "Flow Constraints(1:Yes,0:No)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.1, 0.1, 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ])
		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_ZD2205B:
	def __init__(self):
		self.ID = 1922
		self.Name = "ZD2205B"
		self.Model = "_FLASHD"
		self.Notes = "Flash Drum (Simplified)"

		# General Parameters
		self._NZLHGT_Value = "0"
		self._NZLHGT_Notes = "Specify Nozzle Heights(0:N,1:Y)"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.y_Value = "(31)"
		self.y_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.y_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "0.95"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "0.211"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Gw_Value = "2000"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Uv_Value = "40"
		self.Uv_Notes = "Vapor Phase Heat Transfer Coef.[W/m2K]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Vv0_Value = "0"
		self.Vv0_Notes = "Volume of Connected Pipe[m3]"

		# Primary Parameters
		self.Rdis_Value = "0.05"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.kG_Value = "0.1"
		self.kG_Notes = "Mass Transfer Rate Coef.[kmol/m2kPah]"

		# Primary Parameters
		self.Fcons_Value = "1"
		self.Fcons_Notes = "Flow Constraints(1:Yes,0:No)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.1, 0.1, 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ])
		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_ZD2206A:
	def __init__(self):
		self.ID = 1923
		self.Name = "ZD2206A"
		self.Model = "TANK_LS1"
		self.Notes = "Flash Drum (Simplified)"

		# General Parameters
		self._TYPE_Value = "0"
		self._TYPE_Notes = "Liq. Level Calc. Type(0:C.Sec.,1:Shape)"

		# Primary Parameters
		self.u_Value = "(31)"
		self.u_Notes = "Molar Holdup[kmol]"

		# Primary Parameters List Value
		self.u_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.T_Value = "30"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.A_Value = "0.71"
		self.A_Notes = "Cross Section Area[m2]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_ZD2206B:
	def __init__(self):
		self.ID = 1924
		self.Name = "ZD2206B"
		self.Model = "TANK_LS1"
		self.Notes = "Flash Drum (Simplified)"

		# General Parameters
		self._TYPE_Value = "0"
		self._TYPE_Notes = "Liq. Level Calc. Type(0:C.Sec.,1:Shape)"

		# Primary Parameters
		self.u_Value = "(31)"
		self.u_Notes = "Molar Holdup[kmol]"

		# Primary Parameters List Value
		self.u_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.T_Value = "30"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.A_Value = "0.71"
		self.A_Notes = "Cross Section Area[m2]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_ZD2225:
	def __init__(self):
		self.ID = 1925
		self.Name = "ZD2225"
		self.Model = "_FLASHD"
		self.Notes = "Flash Drum (Simplified)"

		# General Parameters
		self._NZLHGT_Value = "0"
		self._NZLHGT_Notes = "Specify Nozzle Heights(0:N,1:Y)"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.y_Value = "(31)"
		self.y_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.y_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "0.5"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "1.2"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Gw_Value = "1000"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Uv_Value = "40"
		self.Uv_Notes = "Vapor Phase Heat Transfer Coef.[W/m2K]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Vv0_Value = "1"
		self.Vv0_Notes = "Volume of Connected Pipe[m3]"

		# Primary Parameters
		self.Rdis_Value = "0.05"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.kG_Value = "0.1"
		self.kG_Notes = "Mass Transfer Rate Coef.[kmol/m2kPah]"

		# Primary Parameters
		self.Fcons_Value = "1"
		self.Fcons_Notes = "Flow Constraints(1:Yes,0:No)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.1, 0.1, 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ])
		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_ZD2261:
	def __init__(self):
		self.ID = 1926
		self.Name = "ZD2261"
		self.Model = "FLASHB"
		self.Notes = "Flash Drum"

		# Primary Parameters
		self.u_Value = "(31)"
		self.u_Notes = "Molar Holdup[kmol]"

		# Primary Parameters List Value
		self.u_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.T_Value = "30"
		self.T_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "0.2"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "0.45"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Lmin_Value = "0.02"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.Fcons_Value = "1"
		self.Fcons_Notes = "Flow Constraints(1:Yes,0:No)"

		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_ZD2901:
	def __init__(self):
		self.ID = 1927
		self.Name = "ZD2901"
		self.Model = "_FLASHD"
		self.Notes = "Flash Drum (Simplified)"

		# General Parameters
		self._NZLHGT_Value = "0"
		self._NZLHGT_Notes = "Specify Nozzle Heights(0:N,1:Y)"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.y_Value = "(31)"
		self.y_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.y_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "0.6"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "1"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Gw_Value = "1000"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Uv_Value = "40"
		self.Uv_Notes = "Vapor Phase Heat Transfer Coef.[W/m2K]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Vv0_Value = "0"
		self.Vv0_Notes = "Volume of Connected Pipe[m3]"

		# Primary Parameters
		self.Rdis_Value = "0.05"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.kG_Value = "0.1"
		self.kG_Notes = "Mass Transfer Rate Coef.[kmol/m2kPah]"

		# Primary Parameters
		self.Fcons_Value = "1"
		self.Fcons_Notes = "Flow Constraints(1:Yes,0:No)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.1, 0.1, 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ])
		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_ZM2207A:
	def __init__(self):
		self.ID = 1928
		self.Name = "ZM2207A"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_ZM2207B:
	def __init__(self):
		self.ID = 1929
		self.Name = "ZM2207B"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_ZM2277:
	def __init__(self):
		self.ID = 1930
		self.Name = "ZM2277"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_ZM2302:
	def __init__(self):
		self.ID = 1931
		self.Name = "ZM2302"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_ZM2303:
	def __init__(self):
		self.ID = 1932
		self.Name = "ZM2303"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_ZM2304:
	def __init__(self):
		self.ID = 1933
		self.Name = "ZM2304"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_ZM2305:
	def __init__(self):
		self.ID = 1934
		self.Name = "ZM2305"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_ZM2310:
	def __init__(self):
		self.ID = 1935
		self.Name = "ZM2310"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_ZM25011:
	def __init__(self):
		self.ID = 1936
		self.Name = "ZM25011"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_ZM25012:
	def __init__(self):
		self.ID = 1937
		self.Name = "ZM25012"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_ZM25013:
	def __init__(self):
		self.ID = 1938
		self.Name = "ZM25013"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_ZM25014:
	def __init__(self):
		self.ID = 1939
		self.Name = "ZM25014"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_ZM2507:
	def __init__(self):
		self.ID = 1940
		self.Name = "ZM2507"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_ZM2508:
	def __init__(self):
		self.ID = 1941
		self.Name = "ZM2508"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_ZM2511:
	def __init__(self):
		self.ID = 1942
		self.Name = "ZM2511"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_ZM2512:
	def __init__(self):
		self.ID = 1943
		self.Name = "ZM2512"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_ZM2513:
	def __init__(self):
		self.ID = 1944
		self.Name = "ZM2513"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_ZM2521:
	def __init__(self):
		self.ID = 1945
		self.Name = "ZM2521"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_ZM2571:
	def __init__(self):
		self.ID = 1946
		self.Name = "ZM2571"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_ZS2107:
	def __init__(self):
		self.ID = 1947
		self.Name = "ZS2107"
		self.Model = "STRAINS"
		self.Notes = "Strainer(Simple)"

		# Primary Parameters
		self.Wd_Value = "13000"
		self.Wd_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters
		self.DP_Value = "19.6133"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.dd_Value = "650"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.md_Value = "0"
		self.md_Notes = "Design Viscosity[Pas]"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_ZS2108:
	def __init__(self):
		self.ID = 1948
		self.Name = "ZS2108"
		self.Model = "STRAINS"
		self.Notes = "Strainer(Simple)"

		# Primary Parameters
		self.Wd_Value = "13000"
		self.Wd_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters
		self.DP_Value = "19.6133"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.dd_Value = "650"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.md_Value = "0"
		self.md_Notes = "Design Viscosity[Pas]"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_ZS2109:
	def __init__(self):
		self.ID = 1949
		self.Name = "ZS2109"
		self.Model = "STRAINS"
		self.Notes = "Strainer(Simple)"

		# Primary Parameters
		self.Wd_Value = "3500"
		self.Wd_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters
		self.DP_Value = "9.80665"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.dd_Value = "700"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.md_Value = "0"
		self.md_Notes = "Design Viscosity[Pas]"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_ZS2112:
	def __init__(self):
		self.ID = 1950
		self.Name = "ZS2112"
		self.Model = "STRAINS"
		self.Notes = "Strainer(Simple)"

		# Primary Parameters
		self.Wd_Value = "6500"
		self.Wd_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters
		self.DP_Value = "19.6133"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.dd_Value = "650"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.md_Value = "0"
		self.md_Notes = "Design Viscosity[Pas]"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_ZS2113:
	def __init__(self):
		self.ID = 1951
		self.Name = "ZS2113"
		self.Model = "STRAINS"
		self.Notes = "Strainer(Simple)"

		# Primary Parameters
		self.Wd_Value = "3250"
		self.Wd_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters
		self.DP_Value = "9.80665"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.dd_Value = "650"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.md_Value = "0"
		self.md_Notes = "Design Viscosity[Pas]"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_ZS2215:
	def __init__(self):
		self.ID = 1952
		self.Name = "ZS2215"
		self.Model = "FILTERS"
		self.Notes = "Gas Filter"

		# Primary Parameters
		self.Wd_Value = "2.24"
		self.Wd_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters
		self.DP_Value = "4.90332"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.dd_Value = "2.24"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.md_Value = "0"
		self.md_Notes = "Design Viscosity[Pas]"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_ZS2218:
	def __init__(self):
		self.ID = 1953
		self.Name = "ZS2218"
		self.Model = "FILTERS"
		self.Notes = "Gas Filter"

		# Primary Parameters
		self.Wd_Value = "497"
		self.Wd_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters
		self.DP_Value = "4.90332"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.dd_Value = "49.7"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.md_Value = "0"
		self.md_Notes = "Design Viscosity[Pas]"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_ZS2219:
	def __init__(self):
		self.ID = 1954
		self.Name = "ZS2219"
		self.Model = "STRAINV"
		self.Notes = "Strainer(with Front/Rear Valves)"

		# Primary Parameters
		self.Wd_Value = "9600"
		self.Wd_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters
		self.DP_Value = "9.80665"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.dd_Value = "480"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.md_Value = "0"
		self.md_Notes = "Design Viscosity[Pas]"

		# Primary Parameters
		self.CVmax_Value = "100"
		self.CVmax_Notes = "Front/Rear Valve Cv"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_ZS2220:
	def __init__(self):
		self.ID = 1955
		self.Name = "ZS2220"
		self.Model = "STRAINV"
		self.Notes = "Strainer(with Front/Rear Valves)"

		# Primary Parameters
		self.Wd_Value = "9000"
		self.Wd_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters
		self.DP_Value = "9.80665"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.dd_Value = "450"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.md_Value = "0"
		self.md_Notes = "Design Viscosity[Pas]"

		# Primary Parameters
		self.CVmax_Value = "1000"
		self.CVmax_Notes = "Front/Rear Valve Cv"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_ZS2228A:
	def __init__(self):
		self.ID = 1956
		self.Name = "ZS2228A"
		self.Model = "FILTERS"
		self.Notes = "Gas Filter"

		# Primary Parameters
		self.Wd_Value = "2420"
		self.Wd_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters
		self.DP_Value = "4.9"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.dd_Value = "2.2"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.md_Value = "0"
		self.md_Notes = "Design Viscosity[Pas]"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_ZS2228B:
	def __init__(self):
		self.ID = 1957
		self.Name = "ZS2228B"
		self.Model = "FILTERS"
		self.Notes = "Gas Filter"

		# Primary Parameters
		self.Wd_Value = "2420"
		self.Wd_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters
		self.DP_Value = "4.9"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.dd_Value = "2.2"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.md_Value = "0"
		self.md_Notes = "Design Viscosity[Pas]"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_ZS2291:
	def __init__(self):
		self.ID = 1958
		self.Name = "ZS2291"
		self.Model = "STRAINV"
		self.Notes = "Strainer(with Front/Rear Valves)"

		# Primary Parameters
		self.Wd_Value = "19680"
		self.Wd_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters
		self.DP_Value = "4.90332"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.dd_Value = "480"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.md_Value = "0"
		self.md_Notes = "Design Viscosity[Pas]"

		# Primary Parameters
		self.CVmax_Value = "100"
		self.CVmax_Notes = "Front/Rear Valve Cv"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_ZS2292:
	def __init__(self):
		self.ID = 1959
		self.Name = "ZS2292"
		self.Model = "FILTERS"
		self.Notes = "Gas Filter"

		# Primary Parameters
		self.Wd_Value = "396"
		self.Wd_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters
		self.DP_Value = "4.90332"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.dd_Value = "19.8"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.md_Value = "0"
		self.md_Notes = "Design Viscosity[Pas]"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_ZS2294:
	def __init__(self):
		self.ID = 1960
		self.Name = "ZS2294"
		self.Model = "FILTERS"
		self.Notes = "Gas Filter"

		# Primary Parameters
		self.Wd_Value = "4810"
		self.Wd_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters
		self.DP_Value = "4.90332"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.dd_Value = "48.1"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.md_Value = "0"
		self.md_Notes = "Design Viscosity[Pas]"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_ZS2295:
	def __init__(self):
		self.ID = 1961
		self.Name = "ZS2295"
		self.Model = "FILTERS"
		self.Notes = "Gas Filter"

		# Primary Parameters
		self.Wd_Value = "1000"
		self.Wd_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters
		self.DP_Value = "10"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.dd_Value = "10"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.md_Value = "0"
		self.md_Notes = "Design Viscosity[Pas]"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_ZS2313:
	def __init__(self):
		self.ID = 1962
		self.Name = "ZS2313"
		self.Model = "FILTERS"
		self.Notes = "Gas Filter"

		# Primary Parameters
		self.Wd_Value = "100"
		self.Wd_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters
		self.DP_Value = "10"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.dd_Value = "5"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.md_Value = "0"
		self.md_Notes = "Design Viscosity[Pas]"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_ZS2317:
	def __init__(self):
		self.ID = 1963
		self.Name = "ZS2317"
		self.Model = "FILTERS"
		self.Notes = "Gas Filter"

		# Primary Parameters
		self.Wd_Value = "30"
		self.Wd_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters
		self.DP_Value = "10"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.dd_Value = "6"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.md_Value = "0"
		self.md_Notes = "Design Viscosity[Pas]"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_ZS2506:
	def __init__(self):
		self.ID = 1964
		self.Name = "ZS2506"
		self.Model = "_CSEP_L"
		self.Notes = "Component Separator(Liquid Flow)"

		# Primary Parameters
		self.V_Value = "10"
		self.V_Notes = "Vessel Volume[m3]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Temperature[C]"

		# Primary Parameters
		self.rsep2_Value = "(31)"
		self.rsep2_Notes = "Removal Ratio[-]"

		# Primary Parameters List Value
		self.rsep2_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Holdup Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Valp_Value = "0"
		self.Valp_Notes = "Volume Correction Factor[-]"

		# Primary Parameters
		self.Fullop_Value = "0"
		self.Fullop_Notes = "Operation(0:Filling,1:Filled)"

		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.x1St_Value = "(31)"
		self.x1St_Notes = "Composition Start Value Prod.1[mol/mol]"

		# Primary Parameters List Value
		self.x1St_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.x2St_Value = "(31)"
		self.x2St_Notes = "Composition Start Value Prod.2[mol/mol]"

		# Primary Parameters List Value
		self.x2St_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_ZS2507:
	def __init__(self):
		self.ID = 1965
		self.Name = "ZS2507"
		self.Model = "PIPEFLOW"
		self.Notes = "Pump with Stroke Control"

		# Primary Parameters
		self.Unit_Value = "2"
		self.Unit_Notes = "Unit 1:kmol/h 2:kg/h"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "Property System"

class Block_ZS2508:
	def __init__(self):
		self.ID = 1966
		self.Name = "ZS2508"
		self.Model = "_CSEP_L"
		self.Notes = "Component Separator(Liquid Flow)"

		# Primary Parameters
		self.V_Value = "10"
		self.V_Notes = "Vessel Volume[m3]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Temperature[C]"

		# Primary Parameters
		self.rsep2_Value = "(31)"
		self.rsep2_Notes = "Removal Ratio[-]"

		# Primary Parameters List Value
		self.rsep2_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Holdup Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Valp_Value = "0"
		self.Valp_Notes = "Volume Correction Factor[-]"

		# Primary Parameters
		self.Fullop_Value = "0"
		self.Fullop_Notes = "Operation(0:Filling,1:Filled)"

		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.x1St_Value = "(31)"
		self.x1St_Notes = "Composition Start Value Prod.1[mol/mol]"

		# Primary Parameters List Value
		self.x1St_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.x2St_Value = "(31)"
		self.x2St_Notes = "Composition Start Value Prod.2[mol/mol]"

		# Primary Parameters List Value
		self.x2St_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_ZS2531:
	def __init__(self):
		self.ID = 1967
		self.Name = "ZS2531"
		self.Model = "STRAINS"
		self.Notes = "Strainer(Simple)"

		# Primary Parameters
		self.Wd_Value = "7000"
		self.Wd_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters
		self.DP_Value = "4.90332"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.dd_Value = "1000"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.md_Value = "0"
		self.md_Notes = "Design Viscosity[Pas]"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_ZS2903A:
	def __init__(self):
		self.ID = 1968
		self.Name = "ZS2903A"
		self.Model = "FILTERS"
		self.Notes = "Strainer(Simple)"

		# Primary Parameters
		self.Wd_Value = "1365"
		self.Wd_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters
		self.DP_Value = "4.9"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.dd_Value = "3.9"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.md_Value = "0"
		self.md_Notes = "Design Viscosity[Pas]"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_ZS2903B:
	def __init__(self):
		self.ID = 1969
		self.Name = "ZS2903B"
		self.Model = "FILTERS"
		self.Notes = "Strainer(Simple)"

		# Primary Parameters
		self.Wd_Value = "1365"
		self.Wd_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters
		self.DP_Value = "4.9"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.dd_Value = "3.9"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.md_Value = "0"
		self.md_Notes = "Design Viscosity[Pas]"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_ZU2517:
	def __init__(self):
		self.ID = 1970
		self.Name = "ZU2517"
		self.Model = "EVUTIL"
		self.Notes = "emergency valve utility"

		# Primary Parameters
		self.hwgap_Value = "0.02"
		self.hwgap_Notes = "looseness of hand wheel"

		# Primary Parameters
		self.mvrev_Value = "0"
		self.mvrev_Notes = "Reverse Flag of mv, 1:reverse"

		# Primary Parameters
		self.rshutrev_Value = "0"
		self.rshutrev_Notes = "Reverse Flag of shutoff, 1:reverse"

		# Primary Parameters
		self.ropenrev_Value = "0"
		self.ropenrev_Notes = "Reverse Flag of opencmd, 1:reverse"

class Block_ZV2207A:
	def __init__(self):
		self.ID = 1971
		self.Name = "ZV2207A"
		self.Model = "PIPEFLOW"
		self.Notes = "Pump with Stroke Control"

		# Primary Parameters
		self.Unit_Value = "2"
		self.Unit_Notes = "Unit 1:kmol/h 2:kg/h"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "Property System"

class Block_ZV2207B:
	def __init__(self):
		self.ID = 1972
		self.Name = "ZV2207B"
		self.Model = "PIPEFLOW"
		self.Notes = "Pump with Stroke Control"

		# Primary Parameters
		self.Unit_Value = "2"
		self.Unit_Notes = "Unit 1:kmol/h 2:kg/h"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "Property System"

class Block_ZV2277:
	def __init__(self):
		self.ID = 1973
		self.Name = "ZV2277"
		self.Model = "PIPEFLOW"
		self.Notes = "Pump with Stroke Control"

		# Primary Parameters
		self.Unit_Value = "2"
		self.Unit_Notes = "Unit 1:kmol/h 2:kg/h"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "Property System"

class Block_ZV2302:
	def __init__(self):
		self.ID = 1974
		self.Name = "ZV2302"
		self.Model = "HVALVE_S"
		self.Notes = "Shutoff Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV_Value = "100000"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.tmove_Value = "5"
		self.tmove_Notes = "Open/Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_ZV2303:
	def __init__(self):
		self.ID = 1975
		self.Name = "ZV2303"
		self.Model = "PIPEFLOW"
		self.Notes = "Pump with Stroke Control"

		# Primary Parameters
		self.Unit_Value = "2"
		self.Unit_Notes = "Unit 1:kmol/h 2:kg/h"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "Property System"

class Block_ZV2304:
	def __init__(self):
		self.ID = 1976
		self.Name = "ZV2304"
		self.Model = "PIPEFLOW"
		self.Notes = "Pump with Stroke Control"

		# Primary Parameters
		self.Unit_Value = "2"
		self.Unit_Notes = "Unit 1:kmol/h 2:kg/h"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "Property System"

class Block_ZV2305:
	def __init__(self):
		self.ID = 1977
		self.Name = "ZV2305"
		self.Model = "PIPE_U"
		self.Notes = "Pump with Stroke Control"

		# General Parameters
		self._Lname_Value = "Level"
		self._Lname_Notes = "Name of Level Parameter in Upstream Unit"

		# Primary Parameters
		self.Wd_Value = "100"
		self.Wd_Notes = "Design Discharge Capacity[kg/h]"

		# Primary Parameters
		self.Hd_Value = "0.1"
		self.Hd_Notes = "Design Discharge Head[m]"

		# Primary Parameters
		self.Hmin_Value = "0.05"
		self.Hmin_Notes = "Minimum Liquid Level for Discharge[m]"

		# Primary Parameters
		self.Hdiff_Value = "1"
		self.Hdiff_Notes = "Discharge Head due to Elevation[m]"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_ZV2310:
	def __init__(self):
		self.ID = 1978
		self.Name = "ZV2310"
		self.Model = "PIPE_U"
		self.Notes = "Pump with Stroke Control"

		# General Parameters
		self._Lname_Value = "Level"
		self._Lname_Notes = "Name of Level Parameter in Upstream Unit"

		# Primary Parameters
		self.Wd_Value = "100"
		self.Wd_Notes = "Design Discharge Capacity[kg/h]"

		# Primary Parameters
		self.Hd_Value = "0.1"
		self.Hd_Notes = "Design Discharge Head[m]"

		# Primary Parameters
		self.Hmin_Value = "0.05"
		self.Hmin_Notes = "Minimum Liquid Level for Discharge[m]"

		# Primary Parameters
		self.Hdiff_Value = "1"
		self.Hdiff_Notes = "Discharge Head due to Elevation[m]"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_ZV2511:
	def __init__(self):
		self.ID = 1979
		self.Name = "ZV2511"
		self.Model = "PIPEFLOW"
		self.Notes = "Pump with Stroke Control"

		# Primary Parameters
		self.Unit_Value = "2"
		self.Unit_Notes = "Unit 1:kmol/h 2:kg/h"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "Property System"

class Block_ZV2512:
	def __init__(self):
		self.ID = 1980
		self.Name = "ZV2512"
		self.Model = "PIPEFLOW"
		self.Notes = "Pump with Stroke Control"

		# Primary Parameters
		self.Unit_Value = "2"
		self.Unit_Notes = "Unit 1:kmol/h 2:kg/h"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "Property System"

class Block_ZV2513:
	def __init__(self):
		self.ID = 1981
		self.Name = "ZV2513"
		self.Model = "PIPEFLOW"
		self.Notes = "Pump with Stroke Control"

		# Primary Parameters
		self.Unit_Value = "2"
		self.Unit_Notes = "Unit 1:kmol/h 2:kg/h"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "Property System"

class Block_ZV2514:
	def __init__(self):
		self.ID = 1982
		self.Name = "ZV2514"
		self.Model = "QVALVE_B"
		self.Notes = "Shutoff Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV1_Value = "600"
		self.CV1_Notes = "No.1 Valve Cv Value"

		# Primary Parameters
		self.CV2_Value = "2"
		self.CV2_Notes = "No.2 Valve Cv Value"

		# Primary Parameters
		self.topen_Value = "5"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "5"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff1_Value = "1"
		self.Cff1_Notes = "No. 1 Valve F.R. Correction Factor[-]"

		# Primary Parameters
		self.Cff2_Value = "1"
		self.Cff2_Notes = "No. 2 Valve F.R. Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "0:Fail Valve-1 Cls,1:Opn,2:Lock"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_ZV2515:
	def __init__(self):
		self.ID = 1983
		self.Name = "ZV2515"
		self.Model = "QVALVE_B"
		self.Notes = "Shutoff Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV1_Value = "100"
		self.CV1_Notes = "No.1 Valve Cv Value"

		# Primary Parameters
		self.CV2_Value = "100"
		self.CV2_Notes = "No.2 Valve Cv Value"

		# Primary Parameters
		self.topen_Value = "5"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "5"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff1_Value = "1"
		self.Cff1_Notes = "No. 1 Valve F.R. Correction Factor[-]"

		# Primary Parameters
		self.Cff2_Value = "1"
		self.Cff2_Notes = "No. 2 Valve F.R. Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "0:Fail Valve-1 Cls,1:Opn,2:Lock"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_ZV2517:
	def __init__(self):
		self.ID = 1984
		self.Name = "ZV2517"
		self.Model = "SVALVE_S"
		self.Notes = "Shutoff Valve"

		# General Parameters
		self._EQTYPE_Value = "0"
		self._EQTYPE_Notes = "Characteristics 0:Simple 1:FCI"

		# Primary Parameters
		self.CV_Value = "1000"
		self.CV_Notes = "Cv Value"

		# Primary Parameters
		self.topen_Value = "5"
		self.topen_Notes = "Open Time[s]"

		# Primary Parameters
		self.tclose_Value = "5"
		self.tclose_Notes = "Close Time[s]"

		# Primary Parameters
		self.Kpup_Value = "0"
		self.Kpup_Notes = "Calculation of Critical State(1:yes)"

		# Primary Parameters
		self.Cff_Value = "1"
		self.Cff_Notes = "Flow Rate Correction Factor[-]"

		# Primary Parameters
		self.Fair_Value = "0"
		self.Fair_Notes = "(0:Close,1:Open) on Air Fail"

		# Primary Parameters
		self.FwSt_Value = "0"
		self.FwSt_Notes = "Mass Flow Rate Start Value"

		# Primary Parameters
		self.posSt_Value = "1"
		self.posSt_Notes = "Valve Position Start Value[-]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_ZV2521:
	def __init__(self):
		self.ID = 1985
		self.Name = "ZV2521"
		self.Model = "PIPEFLOW"
		self.Notes = "Pump with Stroke Control"

		# Primary Parameters
		self.Unit_Value = "2"
		self.Unit_Notes = "Unit 1:kmol/h 2:kg/h"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "Property System"

class Block_ZV2571:
	def __init__(self):
		self.ID = 1986
		self.Name = "ZV2571"
		self.Model = "PIPEFLOW"
		self.Notes = "Pump with Stroke Control"

		# Primary Parameters
		self.Unit_Value = "2"
		self.Unit_Notes = "Unit 1:kmol/h 2:kg/h"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "Property System"

class Block_ZW2503:
	def __init__(self):
		self.ID = 1987
		self.Name = "ZW2503"
		self.Model = "FLASHB"
		self.Notes = "Flash Drum (Simplified)"

		# Primary Parameters
		self.u_Value = "(31)"
		self.u_Notes = "Molar Holdup[kmol]"

		# Primary Parameters List Value
		self.u_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.T_Value = "30"
		self.T_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "0.5"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "1"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.Fcons_Value = "1"
		self.Fcons_Notes = "Flow Constraints(1:Yes,0:No)"

		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_ZW2503M:
	def __init__(self):
		self.ID = 1988
		self.Name = "ZW2503M"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_ZW2503V:
	def __init__(self):
		self.ID = 1989
		self.Name = "ZW2503V"
		self.Model = "PIPEFLOW"
		self.Notes = "Pump with Stroke Control"

		# Primary Parameters
		self.Unit_Value = "2"
		self.Unit_Notes = "Unit 1:kmol/h 2:kg/h"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "Property System"

class Block_ZW2504:
	def __init__(self):
		self.ID = 1990
		self.Name = "ZW2504"
		self.Model = "FLASHB"
		self.Notes = "Flash Drum (Simplified)"

		# Primary Parameters
		self.u_Value = "(31)"
		self.u_Notes = "Molar Holdup[kmol]"

		# Primary Parameters List Value
		self.u_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.T_Value = "30"
		self.T_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "0.5"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "1"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.Fcons_Value = "1"
		self.Fcons_Notes = "Flow Constraints(1:Yes,0:No)"

		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_ZW2504M:
	def __init__(self):
		self.ID = 1991
		self.Name = "ZW2504M"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_ZW2504V:
	def __init__(self):
		self.ID = 1992
		self.Name = "ZW2504V"
		self.Model = "PIPEFLOW"
		self.Notes = "Pump with Stroke Control"

		# Primary Parameters
		self.Unit_Value = "2"
		self.Unit_Notes = "Unit 1:kmol/h 2:kg/h"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "Property System"

class Block_ZW2505:
	def __init__(self):
		self.ID = 1993
		self.Name = "ZW2505"
		self.Model = "FLASHB"
		self.Notes = "Flash Drum (Simplified)"

		# Primary Parameters
		self.u_Value = "(31)"
		self.u_Notes = "Molar Holdup[kmol]"

		# Primary Parameters List Value
		self.u_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.T_Value = "30"
		self.T_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "0.5"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "1"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.Fcons_Value = "1"
		self.Fcons_Notes = "Flow Constraints(1:Yes,0:No)"

		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_ZW2505M:
	def __init__(self):
		self.ID = 1994
		self.Name = "ZW2505M"
		self.Model = "MotorUTIL"
		self.Notes = "motor utility for pump"

		# General Parameters
		self._TYPE_Value = "1"
		self._TYPE_Notes = "0:local sw mode,1:button mode"

		# Primary Parameters
		self.priority_Value = "0"
		self.priority_Notes = "stop priority, 0:D&L,1:DCS,2:Local"

		# Primary Parameters
		self.lor_Value = "0"
		self.lor_Notes = "local/remote switcher,0:OFF,1:L,2:R"

		# Primary Parameters
		self.powfail_Value = "0"
		self.powfail_Notes = "1:powfail; 0:normal"

		# Primary Parameters
		self.dor_rev_Value = "0"
		self.dor_rev_Notes = "Reverse Flag of dorun, 1:reverse"

		# Primary Parameters
		self.dos_rev_Value = "0"
		self.dos_rev_Notes = "Reverse Flag of dostop, 1:reverse"

		# Primary Parameters
		self.ron_rev_Value = "0"
		self.ron_rev_Notes = "Reverse Flag of ron, 1:reverse"

		# Primary Parameters
		self.roff_rev_Value = "0"
		self.roff_rev_Notes = "Reverse Flag of roff, 1:reverse"

		# Primary Parameters
		self.selfans_Value = "0"
		self.selfans_Notes = "self Answer mode, 0:Normal 1:Self"

class Block_ZW2505V:
	def __init__(self):
		self.ID = 1995
		self.Name = "ZW2505V"
		self.Model = "PIPEFLOW"
		self.Notes = "Pump with Stroke Control"

		# Primary Parameters
		self.Unit_Value = "2"
		self.Unit_Notes = "Unit 1:kmol/h 2:kg/h"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "Property System"

class Block_ZZ1501:
	def __init__(self):
		self.ID = 1996
		self.Name = "ZZ1501"
		self.Model = "_FLASHD"
		self.Notes = "Flash Drum (Simplified)"

		# General Parameters
		self._NZLHGT_Value = "0"
		self._NZLHGT_Notes = "Specify Nozzle Heights(0:N,1:Y)"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.y_Value = "(31)"
		self.y_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.y_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "0.5"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "1"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Gw_Value = "1000"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Uv_Value = "40"
		self.Uv_Notes = "Vapor Phase Heat Transfer Coef.[W/m2K]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Vv0_Value = "2"
		self.Vv0_Notes = "Volume of Connected Pipe[m3]"

		# Primary Parameters
		self.Rdis_Value = "0.05"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.kG_Value = "0.1"
		self.kG_Notes = "Mass Transfer Rate Coef.[kmol/m2kPah]"

		# Primary Parameters
		self.Fcons_Value = "1"
		self.Fcons_Notes = "Flow Constraints(1:Yes,0:No)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.1, 0.1, 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ])
		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_ZZ1606:
	def __init__(self):
		self.ID = 1997
		self.Name = "ZZ1606"
		self.Model = "FLASHB"
		self.Notes = "Flash Drum (Simplified)"

		# Primary Parameters
		self.u_Value = "(31)"
		self.u_Notes = "Molar Holdup[kmol]"

		# Primary Parameters List Value
		self.u_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.T_Value = "30"
		self.T_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "0.5"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "1"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.Fcons_Value = "1"
		self.Fcons_Notes = "Flow Constraints(1:Yes,0:No)"

		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_ZZ1607:
	def __init__(self):
		self.ID = 1998
		self.Name = "ZZ1607"
		self.Model = "FLASHB"
		self.Notes = "Flash Drum (Simplified)"

		# Primary Parameters
		self.u_Value = "(31)"
		self.u_Notes = "Molar Holdup[kmol]"

		# Primary Parameters List Value
		self.u_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.T_Value = "30"
		self.T_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "0.5"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "1"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.Fcons_Value = "1"
		self.Fcons_Notes = "Flow Constraints(1:Yes,0:No)"

		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LSt_Value = "0.5"
		self.LSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_ZZ3101:
	def __init__(self):
		self.ID = 1999
		self.Name = "ZZ3101"
		self.Model = "_FLASHD"
		self.Notes = "Flash Drum (Simplified)"

		# General Parameters
		self._NZLHGT_Value = "0"
		self._NZLHGT_Notes = "Specify Nozzle Heights(0:N,1:Y)"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.y_Value = "(31)"
		self.y_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.y_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "1"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "2"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Gw_Value = "1000"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Uv_Value = "40"
		self.Uv_Notes = "Vapor Phase Heat Transfer Coef.[W/m2K]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Vv0_Value = "5"
		self.Vv0_Notes = "Volume of Connected Pipe[m3]"

		# Primary Parameters
		self.Rdis_Value = "0.05"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.kG_Value = "0.1"
		self.kG_Notes = "Mass Transfer Rate Coef.[kmol/m2kPah]"

		# Primary Parameters
		self.Fcons_Value = "1"
		self.Fcons_Notes = "Flow Constraints(1:Yes,0:No)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.1, 0.1, 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ])
		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_ZZ3101J:
	def __init__(self):
		self.ID = 2000
		self.Name = "ZZ3101J"
		self.Model = "HEATXB"
		self.Notes = "General-Purpose Heat Exchanger"

		# General Parameters
		self._NB_Value = "5"
		self._NB_Notes = "Number of segments"

		# Primary Parameters
		self.TYPE_Value = "1"
		self.TYPE_Notes = "0: Cocurrent 1:Countercurrent"

		# Primary Parameters
		self.A_Value = "10"
		self.A_Notes = "Heat Transfer Area[m2]"

		# Primary Parameters
		self.Gw_Value = "1000"
		self.Gw_Notes = "Heat Transfer Wall Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "H.Trans. Wall Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Aair_Value = "0"
		self.Aair_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uair_Value = "6"
		self.Uair_Notes = "Heat Trans. Coef. for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Tw_Value = "(5)"
		self.Tw_Notes = "Heat Transfer Wall Temp.[C]"

		# Primary Parameters List Value
		self.Tw_List_Value = array([25., 25., 25., 25., 25.])
		# Primary Parameters
		self.UH_Value = "600"
		self.UH_Notes = "Hot Side Heat Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.UHalp_Value = "0"
		self.UHalp_Notes = "Flow Exponent for Hot Side H.T. Coef.[-]"

		# Primary Parameters
		self.tlagH_Value = "0"
		self.tlagH_Notes = "H. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WHdes_Value = "3000"
		self.WHdes_Notes = "Hot Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DHdes_Value = "2.01"
		self.DHdes_Notes = "Hot Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdHdes_Value = "1"
		self.PdHdes_Notes = "Hot Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.UL_Value = "600"
		self.UL_Notes = "Cold Side H.Trans. Coef.[W/m2K]"

		# Primary Parameters
		self.ULalp_Value = "0"
		self.ULalp_Notes = "Cold Side H.T.Coef. Flow Factor"

		# Primary Parameters
		self.tlagL_Value = "0"
		self.tlagL_Notes = "C. Side Fluid Lag Time Constant[s]"

		# Primary Parameters
		self.WLdes_Value = "2000"
		self.WLdes_Notes = "Cold Side Design Flow Rate[kg/h]"

		# Primary Parameters
		self.DLdes_Value = "1000"
		self.DLdes_Notes = "Cold Side Design Density[kg/m3]"

		# Primary Parameters
		self.PdLdes_Value = "10"
		self.PdLdes_Notes = "Cold Side Design Pressure Drop[kPa]"

		# Primary Parameters
		self.EQfunc_Value = "0"
		self.EQfunc_Notes = "Phase Eq. Func.(0:Unit,1:PhyQcalc..)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No.: Hot Side"

		# Primary Parameters
		self.s2_Value = "1"
		self.s2_Notes = "System No.: Cold Side"

		# Primary Parameters
		self.THSt_Value = "25"
		self.THSt_Notes = "Hot Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.TLSt_Value = "25"
		self.TLSt_Notes = "Cold Side Outlet Temp. Start Value[C]"

		# Primary Parameters
		self.PdH_Value = "10"
		self.PdH_Notes = "Hot Side Pressure Drop[kPa]"

		# Primary Parameters
		self.PdL_Value = "10"
		self.PdL_Notes = "Cold Side Pressure Drop[kPa]"

class Block_ZZ3102:
	def __init__(self):
		self.ID = 2001
		self.Name = "ZZ3102"
		self.Model = "_FLASHD"
		self.Notes = "Flash Drum"

		# General Parameters
		self._NZLHGT_Value = "0"
		self._NZLHGT_Notes = "Specify Nozzle Heights(0:N,1:Y)"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.y_Value = "(31)"
		self.y_Notes = "Vapor Phase Molar Composition[mol/mol]"

		# Primary Parameters List Value
		self.y_List_Value = array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.Temp_Value = "30"
		self.Temp_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.Pres_Value = "101.325"
		self.Pres_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.DTYPE_Value = "1"
		self.DTYPE_Notes = "Vessel Type(1:Vert.,2:Horiz.,3:Sphere)"

		# Primary Parameters
		self.DD_Value = "0.5"
		self.DD_Notes = "Diameter[m]"

		# Primary Parameters
		self.LD_Value = "1"
		self.LD_Notes = "Length[m]"

		# Primary Parameters
		self.Gw_Value = "1000"
		self.Gw_Notes = "Vessel Weight[kg]"

		# Primary Parameters
		self.Cpw_Value = "0.46"
		self.Cpw_Notes = "Vessel Specific Heat[kJ/kgK]"

		# Primary Parameters
		self.Uv_Value = "40"
		self.Uv_Notes = "Vapor Phase Heat Transfer Coef.[W/m2K]"

		# Primary Parameters
		self.Aatm_Value = "0"
		self.Aatm_Notes = "Heat Trans. Area of Heat Loss[m2]"

		# Primary Parameters
		self.Uatm_Value = "6"
		self.Uatm_Notes = "Heat Trans. Coef. of Heat Loss[W/m2K]"

		# Primary Parameters
		self.Vv0_Value = "2"
		self.Vv0_Notes = "Volume of Connected Pipe[m3]"

		# Primary Parameters
		self.Rdis_Value = "0.05"
		self.Rdis_Notes = "Vol. Ratio Lim. Phase Disappearance[-]"

		# Primary Parameters
		self.Lmin_Value = "0.001"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.kG_Value = "0.1"
		self.kG_Notes = "Mass Transfer Rate Coef.[kmol/m2kPah]"

		# Primary Parameters
		self.Fcons_Value = "1"
		self.Fcons_Notes = "Flow Constraints(1:Yes,0:No)"

		# Primary Parameters
		self.uparm_Value = "(10)"
		self.uparm_Notes = "Calculation Parameter"

		# Primary Parameters List Value
		self.uparm_List_Value = array([0.1, 0.1, 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ])
		# Primary Parameters
		self.PresSt_Value = "101.325"
		self.PresSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.LevelSt_Value = "0.5"
		self.LevelSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TempSt_Value = "25"
		self.TempSt_Notes = "Temperature Start Value[C]"

		# Primary Parameters
		self.ySt_Value = "(31)"
		self.ySt_Notes = "Vapor Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.ySt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.xSt_Value = "(31)"
		self.xSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_ZZ5401:
	def __init__(self):
		self.ID = 2002
		self.Name = "ZZ5401"
		self.Model = "STRAINS"
		self.Notes = "Strainer(Simple)"

		# Primary Parameters
		self.Wd_Value = "5700"
		self.Wd_Notes = "Design Flow Rate [kg/h]"

		# Primary Parameters
		self.DP_Value = "10"
		self.DP_Notes = "Design Pressure Drop[kPa]"

		# Primary Parameters
		self.dd_Value = "500"
		self.dd_Notes = "Design Density[kg/m3]"

		# Primary Parameters
		self.md_Value = "0"
		self.md_Notes = "Design Viscosity[Pas]"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_c1002:
	def __init__(self):
		self.ID = 2003
		self.Name = "c1002"
		self.Model = "HEADER4_8"
		self.Notes = "4 to 8 Flow Header"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_c1003:
	def __init__(self):
		self.ID = 2004
		self.Name = "c1003"
		self.Model = "MIX6"
		self.Notes = "6-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_c1005:
	def __init__(self):
		self.ID = 2005
		self.Name = "c1005"
		self.Model = "MIX6"
		self.Notes = "6-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_c1006:
	def __init__(self):
		self.ID = 2006
		self.Name = "c1006"
		self.Model = "MIX6"
		self.Notes = "6-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_c1102:
	def __init__(self):
		self.ID = 2007
		self.Name = "c1102"
		self.Model = "MIX6"
		self.Notes = "6-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_c1103:
	def __init__(self):
		self.ID = 2008
		self.Name = "c1103"
		self.Model = "MIX6"
		self.Notes = "6-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_c1301:
	def __init__(self):
		self.ID = 2009
		self.Name = "c1301"
		self.Model = "MIX4"
		self.Notes = "4-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_c1303:
	def __init__(self):
		self.ID = 2010
		self.Name = "c1303"
		self.Model = "MIX6"
		self.Notes = "6-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_c1307:
	def __init__(self):
		self.ID = 2011
		self.Name = "c1307"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_c1308:
	def __init__(self):
		self.ID = 2012
		self.Name = "c1308"
		self.Model = "MIX6"
		self.Notes = "6-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_c1309:
	def __init__(self):
		self.ID = 2013
		self.Name = "c1309"
		self.Model = "MIX6"
		self.Notes = "6-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_c1401:
	def __init__(self):
		self.ID = 2014
		self.Name = "c1401"
		self.Model = "HEADER2_4"
		self.Notes = "2 to 4 Flow Header"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_c1402:
	def __init__(self):
		self.ID = 2015
		self.Name = "c1402"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_c1403:
	def __init__(self):
		self.ID = 2016
		self.Name = "c1403"
		self.Model = "MIX4"
		self.Notes = "4-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_c1404:
	def __init__(self):
		self.ID = 2017
		self.Name = "c1404"
		self.Model = "MIX6"
		self.Notes = "6-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_c1505:
	def __init__(self):
		self.ID = 2018
		self.Name = "c1505"
		self.Model = "MIX6"
		self.Notes = "6-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_c1602:
	def __init__(self):
		self.ID = 2019
		self.Name = "c1602"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_c1603:
	def __init__(self):
		self.ID = 2020
		self.Name = "c1603"
		self.Model = "MIX6"
		self.Notes = "6-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_c1a01:
	def __init__(self):
		self.ID = 2021
		self.Name = "c1a01"
		self.Model = "HEADER2_4"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_c1a02:
	def __init__(self):
		self.ID = 2022
		self.Name = "c1a02"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_c1a05:
	def __init__(self):
		self.ID = 2023
		self.Name = "c1a05"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_c1a07:
	def __init__(self):
		self.ID = 2024
		self.Name = "c1a07"
		self.Model = "HEADER2_4"
		self.Notes = "2 to 4 Flow Header"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_c1a09:
	def __init__(self):
		self.ID = 2025
		self.Name = "c1a09"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_c1b01:
	def __init__(self):
		self.ID = 2026
		self.Name = "c1b01"
		self.Model = "MIX2"
		self.Notes = "2 to 4 Flow Header"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_c1b04:
	def __init__(self):
		self.ID = 2027
		self.Name = "c1b04"
		self.Model = "HEADER2_4"
		self.Notes = "2-stream Splitting Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_c1b05:
	def __init__(self):
		self.ID = 2028
		self.Name = "c1b05"
		self.Model = "MIX3"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_c1b12:
	def __init__(self):
		self.ID = 2029
		self.Name = "c1b12"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_c1c05:
	def __init__(self):
		self.ID = 2030
		self.Name = "c1c05"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_c1c20:
	def __init__(self):
		self.ID = 2031
		self.Name = "c1c20"
		self.Model = "MIX2"
		self.Notes = "2 to 4 Flow Header"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_c1c22:
	def __init__(self):
		self.ID = 2032
		self.Name = "c1c22"
		self.Model = "MIX2"
		self.Notes = "2 to 4 Flow Header"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_c1c23:
	def __init__(self):
		self.ID = 2033
		self.Name = "c1c23"
		self.Model = "HEADER2_4"
		self.Notes = "2-stream Splitting Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_c1c30:
	def __init__(self):
		self.ID = 2034
		self.Name = "c1c30"
		self.Model = "MIX3"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_c1f01:
	def __init__(self):
		self.ID = 2035
		self.Name = "c1f01"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_c1p07:
	def __init__(self):
		self.ID = 2036
		self.Name = "c1p07"
		self.Model = "MIX6"
		self.Notes = "6-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_c1q01:
	def __init__(self):
		self.ID = 2037
		self.Name = "c1q01"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_c1r01:
	def __init__(self):
		self.ID = 2038
		self.Name = "c1r01"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_c1r02:
	def __init__(self):
		self.ID = 2039
		self.Name = "c1r02"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_c1s01:
	def __init__(self):
		self.ID = 2040
		self.Name = "c1s01"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_c1w01:
	def __init__(self):
		self.ID = 2041
		self.Name = "c1w01"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_c302:
	def __init__(self):
		self.ID = 2042
		self.Name = "c302"
		self.Model = "MIX4"
		self.Notes = "4-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_c304:
	def __init__(self):
		self.ID = 2043
		self.Name = "c304"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_c305:
	def __init__(self):
		self.ID = 2044
		self.Name = "c305"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_c413:
	def __init__(self):
		self.ID = 2045
		self.Name = "c413"
		self.Model = "MIX4"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_c414:
	def __init__(self):
		self.ID = 2046
		self.Name = "c414"
		self.Model = "MIX6"
		self.Notes = "4-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_c415:
	def __init__(self):
		self.ID = 2047
		self.Name = "c415"
		self.Model = "_JACKET"
		self.Notes = "Jacket"

		# Primary Parameters
		self.H_Value = "1.83"
		self.H_Notes = "Length of Cylindrical Frame[m]"

		# Primary Parameters
		self.Aj_Value = "7.47"
		self.Aj_Notes = "Jacket Area[m2]"

		# Primary Parameters
		self.Ujv_Value = "1700"
		self.Ujv_Notes = "Jacket Condensation H. T. Coef.[W/m2K]"

		# Primary Parameters
		self.Ujl_Value = "2000"
		self.Ujl_Notes = "Jkt L. Phase Design H. T. Coef.[W/m2K]"

		# Primary Parameters
		self.As1_Value = "0.212"
		self.As1_Notes = "Cross Section Area Cylindrical Frame[m2]"

		# Primary Parameters
		self.As2_Value = "1"
		self.As2_Notes = "Cross Section Area Bottom Head[m2]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.Hlow_Value = "0.05"
		self.Hlow_Notes = "Height of Jkt Undermirror Zone[m]"

		# Primary Parameters
		self.Ujlalp_Value = "0"
		self.Ujlalp_Notes = "Jkt L. Ph. H. T. Coef. Flow Factor[-]"

		# Primary Parameters
		self.Wdjl_Value = "9200"
		self.Wdjl_Notes = "Jacket Liquid Design Flow Rate[kg/h]"

		# Primary Parameters
		self.Dpdjl_Value = "10"
		self.Dpdjl_Notes = "Jacket Design Pressure Drop[kPa]"

		# Primary Parameters
		self.Ddjl_Value = "1000"
		self.Ddjl_Notes = "Jacket Design Liquid Density[kg/m3]"

		# Primary Parameters
		self.Tj_Value = "30"
		self.Tj_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.Pj_Value = "101.325"
		self.Pj_Notes = "Jacket Pressure[kPa]"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.cmodeSt_Value = "1"
		self.cmodeSt_Notes = "Operation Start Value(1-3)"

		# Primary Parameters
		self.dpj_Value = "10"
		self.dpj_Notes = "Jacket Pressure Drop[kPa]"

		# Primary Parameters
		self.LjSt_Value = "0.5"
		self.LjSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TjSt_Value = "25"
		self.TjSt_Notes = "Liquid Outlet Temperature Start Value[C]"

		# Primary Parameters
		self.PjSt_Value = "101.325"
		self.PjSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.xlSt_Value = "(31)"
		self.xlSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xlSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.freeLj_Value = "0"
		self.freeLj_Notes = "Set Hot Side Level Free(1:Free)"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_c417:
	def __init__(self):
		self.ID = 2048
		self.Name = "c417"
		self.Model = "MIX2"
		self.Notes = "2-stream Splitting Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_c418:
	def __init__(self):
		self.ID = 2049
		self.Name = "c418"
		self.Model = "MIX2"
		self.Notes = "4-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_c419:
	def __init__(self):
		self.ID = 2050
		self.Name = "c419"
		self.Model = "_JACKET"
		self.Notes = "Jacket"

		# Primary Parameters
		self.H_Value = "0.5"
		self.H_Notes = "Length of Cylindrical Frame[m]"

		# Primary Parameters
		self.Aj_Value = "0.71"
		self.Aj_Notes = "Jacket Area[m2]"

		# Primary Parameters
		self.Ujv_Value = "100"
		self.Ujv_Notes = "Jacket Condensation H. T. Coef.[W/m2K]"

		# Primary Parameters
		self.Ujl_Value = "30"
		self.Ujl_Notes = "Jkt L. Phase Design H. T. Coef.[W/m2K]"

		# Primary Parameters
		self.As1_Value = "0.056"
		self.As1_Notes = "Cross Section Area Cylindrical Frame[m2]"

		# Primary Parameters
		self.As2_Value = "1"
		self.As2_Notes = "Cross Section Area Bottom Head[m2]"

		# Primary Parameters
		self.Lmin_Value = "0"
		self.Lmin_Notes = "Min. Liquid Level to Discharge[m]"

		# Primary Parameters
		self.Hlow_Value = "0.05"
		self.Hlow_Notes = "Height of Jkt Undermirror Zone[m]"

		# Primary Parameters
		self.Ujlalp_Value = "0"
		self.Ujlalp_Notes = "Jkt L. Ph. H. T. Coef. Flow Factor[-]"

		# Primary Parameters
		self.Wdjl_Value = "200"
		self.Wdjl_Notes = "Jacket Liquid Design Flow Rate[kg/h]"

		# Primary Parameters
		self.Dpdjl_Value = "10"
		self.Dpdjl_Notes = "Jacket Design Pressure Drop[kPa]"

		# Primary Parameters
		self.Ddjl_Value = "1000"
		self.Ddjl_Notes = "Jacket Design Liquid Density[kg/m3]"

		# Primary Parameters
		self.Tj_Value = "30"
		self.Tj_Notes = "Liquid Temperature[C]"

		# Primary Parameters
		self.Pj_Value = "101.325"
		self.Pj_Notes = "Jacket Pressure[kPa]"

		# Primary Parameters
		self.zl_Value = "(31)"
		self.zl_Notes = "Liquid Component Holdup[kmol]"

		# Primary Parameters List Value
		self.zl_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.cmodeSt_Value = "1"
		self.cmodeSt_Notes = "Operation Start Value(1-3)"

		# Primary Parameters
		self.dpj_Value = "10"
		self.dpj_Notes = "Jacket Pressure Drop[kPa]"

		# Primary Parameters
		self.LjSt_Value = "0.5"
		self.LjSt_Notes = "Liquid Level Start Value[m]"

		# Primary Parameters
		self.TjSt_Value = "25"
		self.TjSt_Notes = "Liquid Outlet Temperature Start Value[C]"

		# Primary Parameters
		self.PjSt_Value = "101.325"
		self.PjSt_Notes = "Pressure Start Value[kPa]"

		# Primary Parameters
		self.xlSt_Value = "(31)"
		self.xlSt_Notes = "Liquid Composition Start Value[mol/mol]"

		# Primary Parameters List Value
		self.xlSt_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.freeLj_Value = "0"
		self.freeLj_Notes = "Set Hot Side Level Free(1:Free)"

		# Primary Parameters
		self.s1_Value = "4"
		self.s1_Notes = "System No."

class Block_c420:
	def __init__(self):
		self.ID = 2051
		self.Name = "c420"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_c421:
	def __init__(self):
		self.ID = 2052
		self.Name = "c421"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_c501:
	def __init__(self):
		self.ID = 2053
		self.Name = "c501"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_c504:
	def __init__(self):
		self.ID = 2054
		self.Name = "c504"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_c505:
	def __init__(self):
		self.ID = 2055
		self.Name = "c505"
		self.Model = "MIX4"
		self.Notes = "4-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_c602:
	def __init__(self):
		self.ID = 2056
		self.Name = "c602"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_c620:
	def __init__(self):
		self.ID = 2057
		self.Name = "c620"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_c624:
	def __init__(self):
		self.ID = 2058
		self.Name = "c624"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_c625:
	def __init__(self):
		self.ID = 2059
		self.Name = "c625"
		self.Model = "MIX2"
		self.Notes = "4-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_c701:
	def __init__(self):
		self.ID = 2060
		self.Name = "c701"
		self.Model = "MIX6"
		self.Notes = "6-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_c704:
	def __init__(self):
		self.ID = 2061
		self.Name = "c704"
		self.Model = "MIX4"
		self.Notes = "4-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_c802:
	def __init__(self):
		self.ID = 2062
		self.Name = "c802"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_c805:
	def __init__(self):
		self.ID = 2063
		self.Name = "c805"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_c806:
	def __init__(self):
		self.ID = 2064
		self.Name = "c806"
		self.Model = "HEADER2_4"
		self.Notes = "2 to 4 Flow Header"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_c808:
	def __init__(self):
		self.ID = 2065
		self.Name = "c808"
		self.Model = "MIX4"
		self.Notes = "2 to 4 Flow Header"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_c810:
	def __init__(self):
		self.ID = 2066
		self.Name = "c810"
		self.Model = "HEADER2_4"
		self.Notes = "2 to 4 Flow Header"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_c902:
	def __init__(self):
		self.ID = 2067
		self.Name = "c902"
		self.Model = "MIX6"
		self.Notes = "4-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_c903:
	def __init__(self):
		self.ID = 2068
		self.Name = "c903"
		self.Model = "MIX5"
		self.Notes = "4-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_ca03:
	def __init__(self):
		self.ID = 2069
		self.Name = "ca03"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_ca04:
	def __init__(self):
		self.ID = 2070
		self.Name = "ca04"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_cb02:
	def __init__(self):
		self.ID = 2071
		self.Name = "cb02"
		self.Model = "HEADER2_4"
		self.Notes = "2 to 4 Flow Header"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_cc01:
	def __init__(self):
		self.ID = 2072
		self.Name = "cc01"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_cc03:
	def __init__(self):
		self.ID = 2073
		self.Name = "cc03"
		self.Model = "MIX4"
		self.Notes = "4-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_cc09:
	def __init__(self):
		self.ID = 2074
		self.Name = "cc09"
		self.Model = "HEADER2_4"
		self.Notes = "2 to 4 Flow Header"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_cc10:
	def __init__(self):
		self.ID = 2075
		self.Name = "cc10"
		self.Model = "MIX4"
		self.Notes = "4-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_cc11:
	def __init__(self):
		self.ID = 2076
		self.Name = "cc11"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_cc13:
	def __init__(self):
		self.ID = 2077
		self.Name = "cc13"
		self.Model = "HEADER2_4"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_cc14:
	def __init__(self):
		self.ID = 2078
		self.Name = "cc14"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_cd03:
	def __init__(self):
		self.ID = 2079
		self.Name = "cd03"
		self.Model = "MIX6"
		self.Notes = "6-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_cd04:
	def __init__(self):
		self.ID = 2080
		self.Name = "cd04"
		self.Model = "MIX6"
		self.Notes = "6-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_ce01:
	def __init__(self):
		self.ID = 2081
		self.Name = "ce01"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_ce04:
	def __init__(self):
		self.ID = 2082
		self.Name = "ce04"
		self.Model = "HEADER2_4"
		self.Notes = "2 to 4 Flow Header"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_ce05:
	def __init__(self):
		self.ID = 2083
		self.Name = "ce05"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_cf03:
	def __init__(self):
		self.ID = 2084
		self.Name = "cf03"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_cf04:
	def __init__(self):
		self.ID = 2085
		self.Name = "cf04"
		self.Model = "MIX4"
		self.Notes = "4-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_cf05:
	def __init__(self):
		self.ID = 2086
		self.Name = "cf05"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_cg01:
	def __init__(self):
		self.ID = 2087
		self.Name = "cg01"
		self.Model = "MIX4"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_cg04:
	def __init__(self):
		self.ID = 2088
		self.Name = "cg04"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_cg08:
	def __init__(self):
		self.ID = 2089
		self.Name = "cg08"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_cg09:
	def __init__(self):
		self.ID = 2090
		self.Name = "cg09"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_cg10:
	def __init__(self):
		self.ID = 2091
		self.Name = "cg10"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_ch01:
	def __init__(self):
		self.ID = 2092
		self.Name = "ch01"
		self.Model = "MIX6"
		self.Notes = "4-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_ch03:
	def __init__(self):
		self.ID = 2093
		self.Name = "ch03"
		self.Model = "HEADER2_4"
		self.Notes = "4-stream Splitting Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_ch04:
	def __init__(self):
		self.ID = 2094
		self.Name = "ch04"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_ci02:
	def __init__(self):
		self.ID = 2095
		self.Name = "ci02"
		self.Model = "MIX4"
		self.Notes = "4-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_ci04:
	def __init__(self):
		self.ID = 2096
		self.Name = "ci04"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_ci05:
	def __init__(self):
		self.ID = 2097
		self.Name = "ci05"
		self.Model = "MIX4"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_ci16:
	def __init__(self):
		self.ID = 2098
		self.Name = "ci16"
		self.Model = "MIX4"
		self.Notes = "4-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_ci21:
	def __init__(self):
		self.ID = 2099
		self.Name = "ci21"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_ci23:
	def __init__(self):
		self.ID = 2100
		self.Name = "ci23"
		self.Model = "MIX4"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_cj01:
	def __init__(self):
		self.ID = 2101
		self.Name = "cj01"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_cj02:
	def __init__(self):
		self.ID = 2102
		self.Name = "cj02"
		self.Model = "MIX4"
		self.Notes = "4-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_cj03:
	def __init__(self):
		self.ID = 2103
		self.Name = "cj03"
		self.Model = "MIX4"
		self.Notes = "6-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_cj07:
	def __init__(self):
		self.ID = 2104
		self.Name = "cj07"
		self.Model = "HEADER2_4"
		self.Notes = "2 to 4 Flow Header"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_cj08:
	def __init__(self):
		self.ID = 2105
		self.Name = "cj08"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_cj09:
	def __init__(self):
		self.ID = 2106
		self.Name = "cj09"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_cj11:
	def __init__(self):
		self.ID = 2107
		self.Name = "cj11"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_cj13:
	def __init__(self):
		self.ID = 2108
		self.Name = "cj13"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_cj14:
	def __init__(self):
		self.ID = 2109
		self.Name = "cj14"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_cj17:
	def __init__(self):
		self.ID = 2110
		self.Name = "cj17"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_ck01:
	def __init__(self):
		self.ID = 2111
		self.Name = "ck01"
		self.Model = "MIX4"
		self.Notes = "4-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_ck03:
	def __init__(self):
		self.ID = 2112
		self.Name = "ck03"
		self.Model = "MIX3"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_ck05:
	def __init__(self):
		self.ID = 2113
		self.Name = "ck05"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.05"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.1"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "20"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_cl01:
	def __init__(self):
		self.ID = 2114
		self.Name = "cl01"
		self.Model = "HEADER2_4"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_cl03:
	def __init__(self):
		self.ID = 2115
		self.Name = "cl03"
		self.Model = "HEADER2_4"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_cm02:
	def __init__(self):
		self.ID = 2116
		self.Name = "cm02"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_cm03:
	def __init__(self):
		self.ID = 2117
		self.Name = "cm03"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_cm04:
	def __init__(self):
		self.ID = 2118
		self.Name = "cm04"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_cm08:
	def __init__(self):
		self.ID = 2119
		self.Name = "cm08"
		self.Model = "HEADER2_4"
		self.Notes = "2 to 4 Flow Header"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_cm10:
	def __init__(self):
		self.ID = 2120
		self.Name = "cm10"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_cn01:
	def __init__(self):
		self.ID = 2121
		self.Name = "cn01"
		self.Model = "MIX4"
		self.Notes = "4-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_cn03:
	def __init__(self):
		self.ID = 2122
		self.Name = "cn03"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_cn09:
	def __init__(self):
		self.ID = 2123
		self.Name = "cn09"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_cn10:
	def __init__(self):
		self.ID = 2124
		self.Name = "cn10"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_cn11:
	def __init__(self):
		self.ID = 2125
		self.Name = "cn11"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_co02:
	def __init__(self):
		self.ID = 2126
		self.Name = "co02"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_cp03:
	def __init__(self):
		self.ID = 2127
		self.Name = "cp03"
		self.Model = "MIX4"
		self.Notes = "4-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_cp05:
	def __init__(self):
		self.ID = 2128
		self.Name = "cp05"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_cp06:
	def __init__(self):
		self.ID = 2129
		self.Name = "cp06"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_cq03:
	def __init__(self):
		self.ID = 2130
		self.Name = "cq03"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_cq04:
	def __init__(self):
		self.ID = 2131
		self.Name = "cq04"
		self.Model = "MIX3"
		self.Notes = "3-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_cq05:
	def __init__(self):
		self.ID = 2132
		self.Name = "cq05"
		self.Model = "MIX4"
		self.Notes = "4-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_cq06:
	def __init__(self):
		self.ID = 2133
		self.Name = "cq06"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_cq08:
	def __init__(self):
		self.ID = 2134
		self.Name = "cq08"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_cq09:
	def __init__(self):
		self.ID = 2135
		self.Name = "cq09"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_cq10:
	def __init__(self):
		self.ID = 2136
		self.Name = "cq10"
		self.Model = "MIX4"
		self.Notes = "4-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_cq12:
	def __init__(self):
		self.ID = 2137
		self.Name = "cq12"
		self.Model = "HEADER2_4"
		self.Notes = "2 to 4 Flow Header"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_cq13:
	def __init__(self):
		self.ID = 2138
		self.Name = "cq13"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_cq14:
	def __init__(self):
		self.ID = 2139
		self.Name = "cq14"
		self.Model = "HEADER2_4"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_cq18:
	def __init__(self):
		self.ID = 2140
		self.Name = "cq18"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_cq21:
	def __init__(self):
		self.ID = 2141
		self.Name = "cq21"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_cr01:
	def __init__(self):
		self.ID = 2142
		self.Name = "cr01"
		self.Model = "MIX6"
		self.Notes = "6-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_cr05:
	def __init__(self):
		self.ID = 2143
		self.Name = "cr05"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_cs01:
	def __init__(self):
		self.ID = 2144
		self.Name = "cs01"
		self.Model = "MIX6"
		self.Notes = "6-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_cs02:
	def __init__(self):
		self.ID = 2145
		self.Name = "cs02"
		self.Model = "MIX4"
		self.Notes = "4-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_cs03:
	def __init__(self):
		self.ID = 2146
		self.Name = "cs03"
		self.Model = "MIX6"
		self.Notes = "6-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_cs05:
	def __init__(self):
		self.ID = 2147
		self.Name = "cs05"
		self.Model = "MIX6"
		self.Notes = "6-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_cs07:
	def __init__(self):
		self.ID = 2148
		self.Name = "cs07"
		self.Model = "HEADER2_4"
		self.Notes = "4-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_cs09:
	def __init__(self):
		self.ID = 2149
		self.Name = "cs09"
		self.Model = "MIX2"
		self.Notes = "2 to 4 Flow Header"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_cs10:
	def __init__(self):
		self.ID = 2150
		self.Name = "cs10"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_cs13:
	def __init__(self):
		self.ID = 2151
		self.Name = "cs13"
		self.Model = "MIX4"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_ct01:
	def __init__(self):
		self.ID = 2152
		self.Name = "ct01"
		self.Model = "MIX6"
		self.Notes = "6-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_ct02:
	def __init__(self):
		self.ID = 2153
		self.Name = "ct02"
		self.Model = "MIX6"
		self.Notes = "6-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_ct03:
	def __init__(self):
		self.ID = 2154
		self.Name = "ct03"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_ct04:
	def __init__(self):
		self.ID = 2155
		self.Name = "ct04"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_ct05:
	def __init__(self):
		self.ID = 2156
		self.Name = "ct05"
		self.Model = "MIX4"
		self.Notes = "4-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_ct06:
	def __init__(self):
		self.ID = 2157
		self.Name = "ct06"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_ct07:
	def __init__(self):
		self.ID = 2158
		self.Name = "ct07"
		self.Model = "BL_F1"
		self.Notes = "Constant Pressure Feed"

		# General Parameters
		self._TYPE_Value = "0"
		self._TYPE_Notes = "0:T constant, 1:RV constant"

		# General Parameters
		self._NXVAR_Value = "0"
		self._NXVAR_Notes = "Number of Composition Change Params(<=5)"

		# Primary Parameters
		self.x_Value = "(31)"
		self.x_Notes = "Feed Composition[mol/mol]"

		# Primary Parameters List Value
		self.x_List_Value = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])
		# Primary Parameters
		self.T_Value = "32"
		self.T_Notes = "Temperature[C]"

		# Primary Parameters
		self.P_Value = "200"
		self.P_Notes = "Pressure[kPa]"

		# Primary Parameters
		self.phase_Value = "0"
		self.phase_Notes = "Phase(0:Stream Definition, 1:L, 2:V)"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_ct08:
	def __init__(self):
		self.ID = 2159
		self.Name = "ct08"
		self.Model = "HEADER2_4"
		self.Notes = "2 to 4 Flow Header"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_ct11:
	def __init__(self):
		self.ID = 2160
		self.Name = "ct11"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_ct12:
	def __init__(self):
		self.ID = 2161
		self.Name = "ct12"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_ct16:
	def __init__(self):
		self.ID = 2162
		self.Name = "ct16"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_ct22:
	def __init__(self):
		self.ID = 2163
		self.Name = "ct22"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_cu01:
	def __init__(self):
		self.ID = 2164
		self.Name = "cu01"
		self.Model = "MIX4"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_cu02:
	def __init__(self):
		self.ID = 2165
		self.Name = "cu02"
		self.Model = "MIX6"
		self.Notes = "6-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_cu03:
	def __init__(self):
		self.ID = 2166
		self.Name = "cu03"
		self.Model = "MIX6"
		self.Notes = "4-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_cu05:
	def __init__(self):
		self.ID = 2167
		self.Name = "cu05"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_cu20:
	def __init__(self):
		self.ID = 2168
		self.Name = "cu20"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_cu23:
	def __init__(self):
		self.ID = 2169
		self.Name = "cu23"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_cv02:
	def __init__(self):
		self.ID = 2170
		self.Name = "cv02"
		self.Model = "MIX4"
		self.Notes = "4-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_cv03:
	def __init__(self):
		self.ID = 2171
		self.Name = "cv03"
		self.Model = "MIX4"
		self.Notes = "4-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_cv06:
	def __init__(self):
		self.ID = 2172
		self.Name = "cv06"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_cv08:
	def __init__(self):
		self.ID = 2173
		self.Name = "cv08"
		self.Model = "HEADER2_4"
		self.Notes = "2-stream Splitting Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_cv09:
	def __init__(self):
		self.ID = 2174
		self.Name = "cv09"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_cv10:
	def __init__(self):
		self.ID = 2175
		self.Name = "cv10"
		self.Model = "MIX6"
		self.Notes = "6-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_cv12:
	def __init__(self):
		self.ID = 2176
		self.Name = "cv12"
		self.Model = "MIX6"
		self.Notes = "6-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_cv13:
	def __init__(self):
		self.ID = 2177
		self.Name = "cv13"
		self.Model = "MIX6"
		self.Notes = "6-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_cv14:
	def __init__(self):
		self.ID = 2178
		self.Name = "cv14"
		self.Model = "MIX4"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_cv19:
	def __init__(self):
		self.ID = 2179
		self.Name = "cv19"
		self.Model = "MIX5"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_cw01:
	def __init__(self):
		self.ID = 2180
		self.Name = "cw01"
		self.Model = "MIX4"
		self.Notes = "3-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_cw05:
	def __init__(self):
		self.ID = 2181
		self.Name = "cw05"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_cw07:
	def __init__(self):
		self.ID = 2182
		self.Name = "cw07"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.0254"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "10"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "-10"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_cw08:
	def __init__(self):
		self.ID = 2183
		self.Name = "cw08"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_cw09:
	def __init__(self):
		self.ID = 2184
		self.Name = "cw09"
		self.Model = "MIX6"
		self.Notes = "6-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_cx04:
	def __init__(self):
		self.ID = 2185
		self.Name = "cx04"
		self.Model = "HEADER2_4"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_cx05:
	def __init__(self):
		self.ID = 2186
		self.Name = "cx05"
		self.Model = "MIX5"
		self.Notes = "4-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_cx06:
	def __init__(self):
		self.ID = 2187
		self.Name = "cx06"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_cx15:
	def __init__(self):
		self.ID = 2188
		self.Name = "cx15"
		self.Model = "MIX4"
		self.Notes = "3-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_cx20:
	def __init__(self):
		self.ID = 2189
		self.Name = "cx20"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_cy14:
	def __init__(self):
		self.ID = 2190
		self.Name = "cy14"
		self.Model = "MIX4"
		self.Notes = "3-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_cy19:
	def __init__(self):
		self.ID = 2191
		self.Name = "cy19"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_cy20:
	def __init__(self):
		self.ID = 2192
		self.Name = "cy20"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_cy21:
	def __init__(self):
		self.ID = 2193
		self.Name = "cy21"
		self.Model = "MIX4"
		self.Notes = "4-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_cz02:
	def __init__(self):
		self.ID = 2194
		self.Name = "cz02"
		self.Model = "MIX2"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ToutSt_Value = "25"
		self.ToutSt_Notes = "Mixing Temperature Start Value[C]"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

		# Primary Parameters
		self.s1_Value = "0"
		self.s1_Notes = "System No."

class Block_cz04:
	def __init__(self):
		self.ID = 2195
		self.Name = "cz04"
		self.Model = "PIPE_RGLR"
		self.Notes = "General Pipe"

		# Primary Parameters
		self.Di_Value = "0.0381"
		self.Di_Notes = "Pipe Inside Diameter[m]"

		# Primary Parameters
		self.Le_Value = "5"
		self.Le_Notes = "Length Equivalent to Pres. Drop[m]"

		# Primary Parameters
		self.lam_Value = "0.02"
		self.lam_Notes = "Friction Coefficient of Pipe"

		# Primary Parameters
		self.Asur_Value = "0"
		self.Asur_Notes = "Heat Loss Area[m2]"

		# Primary Parameters
		self.Uql_Value = "6"
		self.Uql_Notes = "Heat Transfer Coef.for Heat Loss[W/m2K]"

		# Primary Parameters
		self.Hdiff_Value = "0"
		self.Hdiff_Notes = "In/Out Difference of Elevation[m]"

		# Primary Parameters
		self.dptype_Value = "0"
		self.dptype_Notes = "Friction Coef. Calc. Type(0:Constant)"

		# Primary Parameters
		self.dP_Value = "0"
		self.dP_Notes = "Pressure Drop[kPa]"

		# Primary Parameters
		self.s1_Value = "1"
		self.s1_Notes = "System No."

class Block_cz05:
	def __init__(self):
		self.ID = 2196
		self.Name = "cz05"
		self.Model = "MIX6"
		self.Notes = "6-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_cz07:
	def __init__(self):
		self.ID = 2197
		self.Name = "cz07"
		self.Model = "MIX3"
		self.Notes = "2-stream Mixing Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_cz08:
	def __init__(self):
		self.ID = 2198
		self.Name = "cz08"
		self.Model = "HEADER2_4"
		self.Notes = "4-stream Splitting Point"

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_i1101:
	def __init__(self):
		self.ID = 2199
		self.Name = "i1101"
		self.Model = "WIRE"
		self.Notes = "Wiring"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Connection(0:R>R,1:I>I,2:R>I,3:I>R)"

		# Primary Parameters
		self.revcal_Value = "0"
		self.revcal_Notes = "Specify Reverse Calculation(1:rev.)"

class Block_i1102:
	def __init__(self):
		self.ID = 2200
		self.Name = "i1102"
		self.Model = "WIRE"
		self.Notes = "Wiring"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Connection(0:R>R,1:I>I,2:R>I,3:I>R)"

		# Primary Parameters
		self.revcal_Value = "0"
		self.revcal_Notes = "Specify Reverse Calculation(1:rev.)"

class Block_i1601:
	def __init__(self):
		self.ID = 2201
		self.Name = "i1601"
		self.Model = "WIRE"
		self.Notes = "Wiring"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Connection(0:R>R,1:I>I,2:R>I,3:I>R)"

		# Primary Parameters
		self.revcal_Value = "0"
		self.revcal_Notes = "Specify Reverse Calculation(1:rev.)"

class Block_i1c01:
	def __init__(self):
		self.ID = 2202
		self.Name = "i1c01"
		self.Model = "WIRE"
		self.Notes = "Wiring"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Connection(0:R>R,1:I>I,2:R>I,3:I>R)"

		# Primary Parameters
		self.revcal_Value = "0"
		self.revcal_Notes = "Specify Reverse Calculation(1:rev.)"

class Block_i1d01:
	def __init__(self):
		self.ID = 2203
		self.Name = "i1d01"
		self.Model = "WIRE"
		self.Notes = "Wiring"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Connection(0:R>R,1:I>I,2:R>I,3:I>R)"

		# Primary Parameters
		self.revcal_Value = "0"
		self.revcal_Notes = "Specify Reverse Calculation(1:rev.)"

class Block_ig01:
	def __init__(self):
		self.ID = 2204
		self.Name = "ig01"
		self.Model = "WIRE"
		self.Notes = "Wiring"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Connection(0:R>R,1:I>I,2:R>I,3:I>R)"

		# Primary Parameters
		self.revcal_Value = "0"
		self.revcal_Notes = "Specify Reverse Calculation(1:rev.)"

class Block_ih01:
	def __init__(self):
		self.ID = 2205
		self.Name = "ih01"
		self.Model = "WIRE"
		self.Notes = "Wiring"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Connection(0:R>R,1:I>I,2:R>I,3:I>R)"

		# Primary Parameters
		self.revcal_Value = "0"
		self.revcal_Notes = "Specify Reverse Calculation(1:rev.)"

class Block_ih02:
	def __init__(self):
		self.ID = 2206
		self.Name = "ih02"
		self.Model = "WIRE"
		self.Notes = "Wiring"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Connection(0:R>R,1:I>I,2:R>I,3:I>R)"

		# Primary Parameters
		self.revcal_Value = "0"
		self.revcal_Notes = "Specify Reverse Calculation(1:rev.)"

class Block_ii01:
	def __init__(self):
		self.ID = 2207
		self.Name = "ii01"
		self.Model = "WIRE"
		self.Notes = "Wiring"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Connection(0:R>R,1:I>I,2:R>I,3:I>R)"

		# Primary Parameters
		self.revcal_Value = "0"
		self.revcal_Notes = "Specify Reverse Calculation(1:rev.)"

class Block_il01:
	def __init__(self):
		self.ID = 2208
		self.Name = "il01"
		self.Model = "RNGTRNS"
		self.Notes = "Range Converter"

		# Primary Parameters
		self.inmax_Value = "1"
		self.inmax_Notes = "Maximum Input Value"

		# Primary Parameters
		self.inmin_Value = "0"
		self.inmin_Notes = "Minimum Input Value"

		# Primary Parameters
		self.outmax_Value = "1500"
		self.outmax_Notes = "Maximum Output Value"

		# Primary Parameters
		self.outmin_Value = "0"
		self.outmin_Notes = "Minimum Output Value"

		# Primary Parameters
		self.revcal_Value = "0"
		self.revcal_Notes = "Specify Reverse Calculation(1:rev.)"

class Block_im01:
	def __init__(self):
		self.ID = 2209
		self.Name = "im01"
		self.Model = "CONVRVS1"
		self.Notes = "Convert Array to Scalar"

		# Primary Parameters
		self.NNUM_Value = "6"
		self.NNUM_Notes = "Array No. of Taken out Part"

class Block_ip01:
	def __init__(self):
		self.ID = 2210
		self.Name = "ip01"
		self.Model = "WIRE"
		self.Notes = "Wiring"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Connection(0:R>R,1:I>I,2:R>I,3:I>R)"

		# Primary Parameters
		self.revcal_Value = "0"
		self.revcal_Notes = "Specify Reverse Calculation(1:rev.)"

class Block_ip02:
	def __init__(self):
		self.ID = 2211
		self.Name = "ip02"
		self.Model = "WIRE"
		self.Notes = "Wiring"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Connection(0:R>R,1:I>I,2:R>I,3:I>R)"

		# Primary Parameters
		self.revcal_Value = "0"
		self.revcal_Notes = "Specify Reverse Calculation(1:rev.)"

class Block_iq01:
	def __init__(self):
		self.ID = 2212
		self.Name = "iq01"
		self.Model = "WIRE"
		self.Notes = "Wiring"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Connection(0:R>R,1:I>I,2:R>I,3:I>R)"

		# Primary Parameters
		self.revcal_Value = "0"
		self.revcal_Notes = "Specify Reverse Calculation(1:rev.)"

class Block_iy01:
	def __init__(self):
		self.ID = 2213
		self.Name = "iy01"
		self.Model = "WIRE"
		self.Notes = "Wiring"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Connection(0:R>R,1:I>I,2:R>I,3:I>R)"

		# Primary Parameters
		self.revcal_Value = "0"
		self.revcal_Notes = "Specify Reverse Calculation(1:rev.)"

class Block_iy02:
	def __init__(self):
		self.ID = 2214
		self.Name = "iy02"
		self.Model = "WIRE"
		self.Notes = "Wiring"

		# General Parameters
		self._VTYPE_Value = "0"
		self._VTYPE_Notes = "Connection(0:R>R,1:I>I,2:R>I,3:I>R)"

		# Primary Parameters
		self.revcal_Value = "0"
		self.revcal_Notes = "Specify Reverse Calculation(1:rev.)"

class Block_u101:
	def __init__(self):
		self.ID = 2215
		self.Name = "u101"
		self.Model = "MIX6"
		self.Notes = ""

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

class Block_u201:
	def __init__(self):
		self.ID = 2216
		self.Name = "u201"
		self.Model = "MIX6"
		self.Notes = ""

		# Primary Parameters
		self.ifzero_Value = "1"
		self.ifzero_Notes = "No. of Main Feed[-]"

